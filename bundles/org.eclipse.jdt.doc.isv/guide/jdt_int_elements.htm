<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="isvGuide.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>Java elements and resources</TITLE>

<link rel="stylesheet" type="text/css" href="isvGuide.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H2>
Java elements and resources</H2>
<P>
The Java model is the set of classes that model the objects associated with creating, editing, and building a Java program. The Java model classes are defined in the
<b><a href="../reference/api/org/eclipse/jdt/core/package-summary.html">org.eclipse.jdt.core.*</a></b> packages. These classes implement Java specific behavior for resources and further decompose
Java resources into model elements.</P>

<H3>
Java elements</h3>
<P>
The package <a href="../reference/api/org/eclipse/jdt/core/package-summary.html"><b> org.eclipse.jdt.core</b></a> defines the classes that model the elements that compose a Java program. The JDT uses an in-memory object model to represent the structure of a
Java program. This model is hierarchical. Elements of a program can be decomposed into child elements.</P>
<P>
Java elements are a lot like resource objects.&nbsp; When you work with a Java
element, you are actually working with a <b>handle</b> to some underlying model
object.&nbsp; You must use the <b>exists()</b> protocol
to determine whether the element is actually present in the workspace.&nbsp;</P>
<P>
The following table summarizes the different kinds of Java elements.</P>
<TABLE BORDER="1">
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
Element</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
Description</P>
</TH>
</TR>
<tr>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<a href="../reference/api/org/eclipse/jdt/core/IJavaModel.html"><b>
IJavaModel</b></a></P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
Represents the root Java element, corresponding to the workspace. The parent of
all Java projects.</P>
</TD>
</tr>
<tr>
<TD COLSPAN="1">
<P CLASS="CellBody">
<a href="../reference/api/org/eclipse/jdt/core/IJavaProject.html"><b>
IJavaProject</b></a></P>
</TD>
<TD COLSPAN="1">
<P CLASS="CellBody">
Represents a Java project in the workspace. (Child of <a href="../reference/api/org/eclipse/jdt/core/IJavaModel.html"><b>IJavaModel</b></a>)</P>
</TD>
</tr>
<tr>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<a href="../reference/api/org/eclipse/jdt/core/IPackageFragmentRoot.html"><b>
IPackageFragmentRoot</b></a></P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
Represents a set of package fragments, and maps the fragments to an underlying resource which is either a folder, JAR, or ZIP file. (Child of
<a href="../reference/api/org/eclipse/jdt/core/IJavaProject.html"><b>IJavaProject</b></a>) </P>
</TD>
</tr>
<tr>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<a href="../reference/api/org/eclipse/jdt/core/IPackageFragment.html"><b>
IPackageFragment</b></a></P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
Represents the portion of the workspace that corresponds to an entire package, or a portion of the package. (Child of
<a href="../reference/api/org/eclipse/jdt/core/IPackageFragmentRoot.html"><b>IPackageFragmentRoot</b></a>)</P>
</TD>
</tr>
<TR>
<TD COLSPAN="1">
<P CLASS="CellBody"><a href="../reference/api/org/eclipse/jdt/core/ICompilationUnit.html"><b>ICompilationUnit</b></a></P>
</TD>
<TD COLSPAN="1">
<P CLASS="CellBody">
Represents a Java source (<b>.java</b>) file.</P>
</TD>
</TR>
<tr>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody"><a href="../reference/api/org/eclipse/jdt/core/IPackageDeclaration.html"><b>IPackageDeclaration</b></a></P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
Represents a package declaration in a compilation unit. (Child of <a href="../reference/api/org/eclipse/jdt/core/ICompilationUnit.html"><b>ICompilationUnit</b></a>)</P>
</TD>
</tr>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<a href="../reference/api/org/eclipse/jdt/core/IImportContainer.html"><b>
IImportContainer</b></a></P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
Represents the collection of package import declarations in a compilation unit. (Child of
<a href="../reference/api/org/eclipse/jdt/core/ICompilationUnit.html"><b>ICompilationUnit</b></a>)</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<a href="../reference/api/org/eclipse/jdt/core/IImportDeclaration.html"><b>
IImportDeclaration</b></a></P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
Represents a single package import declaration. (Child of <a href="../reference/api/org/eclipse/jdt/core/IImportContainer.html"><b>IImportContainer</b></a>)</P>
</TD>
</TR>
<tr>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<a href="../reference/api/org/eclipse/jdt/core/IType.html"><b>
IType</b></a></P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
Represents either a source type inside a compilation unit, or a binary type
inside a class file. </P>
</TD>
</tr>
<TR>
<TD COLSPAN="1">
<P CLASS="CellBody">
<a href="../reference/api/org/eclipse/jdt/core/IField.html"><b>
IField</b></a></P>
</TD>
<TD COLSPAN="1">
<P CLASS="CellBody">
Represents a field inside a type. (Child of <a href="../reference/api/org/eclipse/jdt/core/IType.html"><b>IType</b></a>)</P>
</TD>
</TR>
<tr>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<a href="../reference/api/org/eclipse/jdt/core/IMethod.html"><b>
IMethod</b></a></P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
Represents a method or constructor inside a type. (Child of <a href="../reference/api/org/eclipse/jdt/core/IType.html"><b>IType</b></a>)</P>
</TD>
</tr>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<a href="../reference/api/org/eclipse/jdt/core/IInitializer.html"><b>
IInitializer</b></a></P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
Represents a static or instance initializer inside a type. (Child of <a href="../reference/api/org/eclipse/jdt/core/IType.html"><b>IType</b></a>)</P>
</TD>
</TR>
<tr>
<TD COLSPAN="1">
<P CLASS="CellBody">
<a href="../reference/api/org/eclipse/jdt/core/IClassFile.html"><b>
IClassFile</b></a></P>
</TD>
<TD COLSPAN="1">
<P CLASS="CellBody">
Represents a compiled (binary) type.&nbsp; (Child of <a href="../reference/api/org/eclipse/jdt/core/IPackageFragment.html"><b>
IPackageFragment</b></a>)</P>
</TD>
</tr>
</TABLE>
<P>
All Java elements support the <a href="../reference/api/org/eclipse/jdt/core/IJavaElement.html"><b>IJavaElement</b></a> interface. </P>
<P>
Some of the elements are shown in the Packages view.&nbsp; These elements implement the
<b><a href="../reference/api/org/eclipse/jdt/core/IOpenable.html"> IOpenable</a></b> interface, since they must be opened before they can be navigated. The figure below shows how these elements are represented in the
Packages view.</P>
<P>
<img border="0" src="images/openables.jpg" width="394" height="375"></P>
<P>The Java elements that implement
<b><a href="../reference/api/org/eclipse/jdt/core/IOpenable.html"> IOpenable</a></b>
are created mostly from information found in the underlying resource
files.&nbsp; The same elements are represented generically in the resource
navigator view.</P>
<P>
<img border="0" src="images/javanavigator.jpg" width="194" height="295"></P>

<P>
Other elements correspond to the items that make up a Java compilation unit (<b>.java
</b> file). The figure below shows a Java compilation unit and a content outliner that displays the source elements in the compilation unit.</P>


<img border="0" src="images/sourceelements.jpg" width="600" height="405">



<P>
These elements implement the <a href="../reference/api/org/eclipse/jdt/core/ISourceReference.html"><b> ISourceReference</b></a> interface, since they have corresponding source code. (As these elements are selected in the content outliner, their corresponding source code is shown in the Java editor).</P>



<H3>
Java elements and their resources</h3>
<P>
Many of the Java elements correspond to generic resources in the
workspace.&nbsp; The class <a href="../reference/api/org/eclipse/jdt/core/JavaCore.html"><b> JavaCore</b></a> 
is the place to start when you want to create Java elements from a generic
resource. The following code snippet shows how to get Java elements from their
corresponding resources.</P>
<P CLASS="Code">
private void createJavaElementsFrom(IProject myProject,&nbsp;<br>
&nbsp;&nbsp;&nbsp;IFolder myFolder, IFile myFile) {<br>
<BR>
&nbsp;&nbsp;&nbsp;IJavaProject myJavaProject = JavaCore.create(myProject);<br>
&nbsp;&nbsp;&nbsp;if (myJavaProject == null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the project is not configured for Java (has no Java nature)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
<BR>
&nbsp;&nbsp;&nbsp;// get a package fragment or package fragment root<BR>
&nbsp;&nbsp;&nbsp;IJavaElement myPackageFragment = JavaCore.create(myFolder);<br>
<BR>
&nbsp;&nbsp;&nbsp;// get a .java (compilation unit), .class (class file), or<BR>
&nbsp;&nbsp;&nbsp;// .jar (package fragment root)<BR>
&nbsp;&nbsp;&nbsp;IJavaElement myJavaFile = JavaCore.create(myFile);<BR>
}
</P>
<P><a href="../reference/api/org/eclipse/jdt/core/JavaCore.html"><b>JavaCore</b></a> is also used to maintain the Java class path, including locations for finding source code and libraries, and locations for generating output binary
(<b>.class</b>) files.</P>


<P>When you create a Java project from a plain project, <a href="../reference/api/org/eclipse/jdt/core/JavaCore.html"><b> JavaCore</b></a><b>
</b>will check to see if the project is configured with the Java
nature.&nbsp; The JDT plug-in uses a project nature to designate a project as having Java behavior.&nbsp;
This nature
(<b>org.eclipse.jdt.core.javanature</b>) is assigned to a project when the &quot;New Java project&quot; wizard creates a project.&nbsp;
If the Java nature is not configured on a project, <a href="../reference/api/org/eclipse/jdt/core/JavaCore.html"><b> JavaCore</b></a>
will return null when asked to create the project.</P>
<P>
What's different about a Java project?&nbsp; Java projects record their classpath in a &quot;<b>.classpath</b>&quot; file and add the Java incremental project builder to the project's build spec.&nbsp;
Otherwise, they are just regular projects and can be configured with other natures (and other incremental builders) by plug-ins. Plug-ins that want to configure projects with Java behavior in addition to their own behavior typically use the &quot;New java project&quot; wizard page to assign the Java nature to the project in addition to their own custom natures or behavior.</P>
<P>
 <a href="../reference/api/org/eclipse/jdt/core/IJavaModel.html"><b> IJavaModel</b></a> can be considered the parent of all projects in the workspace that have the Java project nature (and therefore can be
treated as an <a href="../reference/api/org/eclipse/jdt/core/IJavaProject.html"><b>IJavaProject</b></a>.)</P>


<P><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" width="195" height="12"></a></p>
</BODY>
</HTML>
