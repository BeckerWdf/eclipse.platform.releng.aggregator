<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
     
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
     
  <meta http-equiv="Content-Style-Type" content="text/css">
      
  <link rel="STYLESHEET" href="../book.css" charset="ISO-8859-1" type="text/css">
  <title>Java development process</title>
          
  <link rel="stylesheet" type="text/css" href="../book.css">
</head>
  <body bgcolor="#ffffff">
   
<h2> Java development process</h2>
   
<p> Additional packages in the JDT support other aspects of the Java development 
process.&nbsp;</p>
    
<p> The following roadmap outlines the major function in the remaining <b>
  org.eclipse.jdt.*</b> packages.</p>
    
<ul>
   <li><a href="../reference/api/org/eclipse/jdt/launching/package-summary.html"><b>
org.eclipse.jdt.launching </b></a>
  provides classes for launching Java runtimes from the platform.&nbsp; 
   <b><a href="../reference/api/org/eclipse/jdt/launching/JavaRuntime.html">
 JavaRuntime</a>
     </b> implements static methods that let you register a vm for a particular 
project.&nbsp;     A family of VM's (such as the JDK) is represented by the 
    <a href="../reference/api/org/eclipse/jdt/launching/IVMInstallType.html"><b>
 IVMInstallType</b></a>
  class. <a href="../reference/api/org/eclipse/jdt/launching/IVMInstall.html"><b>
 IVMInstall</b></a>
  represents particular installations within a family.&nbsp;     The <a href="../reference/api/org/eclipse/jdt/launching/IVMRunner.html"><b>
 IVMRunner</b></a>
  is used to start a particular Java VM and register its processes with the 
debug plug-in.</li>
    <li><a href="../reference/api/org/eclipse/jdt/debug/core/package-summary.html"><b>
 org.eclipse.jdt.debug</b></a>
      supports a Java debug model based on JDI/JDWP that can be used for controlling a
      Java program under debug.</li>
   <li><b><a href="../reference/api/org/eclipse/jdt/core/dom/package-summary.html">
  org.eclipse.jdt.core.dom</a>
     </b> supports Abstract Syntax Trees (AST) that can be used for examining
 the structure of a compilation unit down to the statement level.<br>
   </li>
    <li><b><a href="../reference/api/org/eclipse/jdt/core/search/package-summary.html">
 org.eclipse.jdt.core.search</a>
     </b> supports searching the workspace Java elements that match a particular 
description.&nbsp;     <a href="../reference/api/org/eclipse/jdt/core/search/SearchEngine.html"><b>
 SearchEngine</b></a>
  allows you to set up searches in the workspace. You can search for particular 
patterns inside a Java element. You can also scope the search according to 
several predefined search types: searching for declarations of the pattern, 
implementors of the pattern, references to the pattern, or all occurrences 
of the pattern.</li>
    <li><a href="../reference/api/org/eclipse/jdt/core/jdom/package-summary.html"><b>
 org.eclipse.jdt.core.jdom</b></a>
      supports a Java Document Object Model (DOM) that can be used for walking 
the     structure of a Java compilation unit.</li>
    <li> <a href="../reference/api/org/eclipse/jdt/core/eval/package-summary.html"><b>
  org.eclipse.jdt.core.eval</b></a>
      supports the evaluation of code snippets in a scrapbook or inside the 
debugger.</li>
   
</ul>
     
<p> <a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" width="195" height="12">
 </a>
 </p>
     
</body>
</html>
