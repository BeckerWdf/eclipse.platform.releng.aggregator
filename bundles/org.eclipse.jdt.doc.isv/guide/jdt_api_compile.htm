<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>Compiling Java code</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H2>
Compiling Java code</H2>
<P>
The JDT plug-ins include an incremental and batch Java compiler for building Java .class files from source code. There is no direct API provided by the compiler. It is installed as an incremental builder on Java projects. Compilation is triggered using standard platform build mechanisms.</P>
<P>
The platform build mechanism is described in detail in <a HREF="../../org.eclipse.platform.doc.isv/guide/resAdv_builders.htm" CLASS="XRef">resource builders</a>.</P>

<h3>
Compiling code</h3>
<P >
You can programmatically compile the Java source files in a project using the build API.</P>
<font color='#4444CC'><pre>
   IProgressMonitor myProgressMonitor;
   myProject.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, myProgressMonitor);
</pre></font>
<P >
For a Java project, this will invoke the Java incremental project builder (along with any other incremental project builders that have been added to the project's build spec). The generated .class files will be written to the designated output folder.
In the case of a full batch build, all the .class files in the output folder are 'scrubbed' to ensure that no stale files are found. Make sure to place all your .class files, for which you do not have corresponding source files, in separate class file folders instead of the output folder (see your project's Properties->Java Build Path->Libraries->Advanced). </P>
<P >
Additional resource files are also copied to the output folder. You can control which resource files are copied using the resource filter (see Preferences->Java->Compiler->Other). Filenames are filtered if they match one of the supplied patterns. Entire folders are filtered if their name matches one of the supplied folder names which end in a path separator. </P>
<P >
The incremental and batch builders can also be configured to only generate a single error when the .classpath file has errors. This option is set by default and eliminates numerous errors, all usually caused by a missing jar file (see Preferences->Java->Compiler->Other). </P>

<h3>Using the ant javac adapter</h3>
The Eclipse compiler can be used inside an Ant script using the javac adapter. In order to use the Eclipse compiler, you
simply need to define the <b>build.compiler</b> property in your script. Here is a small example.
<font color='#4444CC'><pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project name="compile" default="main" basedir="../."&gt;

	<b>&lt;property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/&gt;</b>

	&lt;property name="root" value="${basedir}/src"/&gt;

	&lt;property name="destdir" value="d:/temp/bin" /&gt;

	&lt;target name="main"&gt;
		&lt;javac srcdir="${root}" destdir="${destdir}" debug="on" nowarn="on" extdirs="d:/extdirs" source="1.4"&gt;
		    &lt;classpath&gt;
		      &lt;pathelement location="${basedir}/../org.eclipse.jdt.core/bin"/&gt;
		    &lt;/classpath&gt;
		&lt;/javac&gt;		
	&lt;/target&gt;
&lt;/project&gt;
</pre></font>
The syntax used for the javac Ant task can be found in the <a href="http://jakarta.apache.org/ant/manual/CoreTasks/javac.html">Ant javac task documentation</a>.
<h3>
Problem determination</h3>
<P >
The JDT core defines a specialized marker (marker type &quot;<b>org.eclipse.jdt.core.problem</b>&quot;) to denote compilation problems. To programmatically discover problems detected by the compiler, the standard platform marker protocol should be used. See
<a HREF="../../org.eclipse.platform.doc.isv/guide/resAdv_markers.htm" CLASS="XRef">resource
markers</a> for an overview of using markers.</P>
<P >
The following snippet finds all Java problem markers in a compilation unit.</P>

<font color='#4444CC'><pre>
   public IMarker[] findJavaProblemMarkers(ICompilationUnit cu) 
      throws CoreException {
      IResource javaSourceFile = cu.getUnderlyingResource();
      IMarker[] markers = 
         javaSourceFile.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER,
            true, IResource.DEPTH_INFINITE);
   }
</pre></font>
<P >
Java problem markers are maintained by the Java incremental project builder and will be removed automatically as problems are resolved and the Java source is recompiled.</P>

<P>The marker ID value is set by one of the constants in <b><a href="../reference/api/org/eclipse/jdt/core/compiler/IProblem.html">IProblem</a></b>.
</P>
<P>An implementation of <b><a href="../reference/api/org/eclipse/jdt/core/IProblemRequestor.html">IProblemRequestor</a></b> should be defined to collect the problems discovered during a Java operation.
An example of such an implementor is the member class <b>CompilationUnitAnnotationModel</b> of the class <b>org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider</b>.</P>

<P >
<a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" width="195" height="12"></a></P>

</BODY>
</HTML>
