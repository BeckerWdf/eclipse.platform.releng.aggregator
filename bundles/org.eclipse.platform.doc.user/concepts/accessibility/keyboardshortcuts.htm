<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<head>
	<title>Keys</title>
	<LINK REL="STYLESHEET" HREF="../../book.css" CHARSET="ISO-8859-1" TYPE="text/css"> 
	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body>
<h1>Keys</h1>
<p>
The function of the keyboard can be extensively customized in Eclipse. Within Eclipse, 
key strokes and key sequences are assigned to invoke particular commands. 
</p>
<h2>Key strokes, Key sequences, and Key bindings</h2>
<p>
A 'key stroke' is the pressing of a key on the keyboard, while optionally holding down one 
or more of these modifier keys: <code>Ctrl</code>, <code>Alt</code> (<code>Option</code> on the Macintosh), <code>Shift</code>, or 
<code>Command</code> (only on the Macintosh.) For example, holding down <code>Ctrl</code> then 
pressing <code>A</code> produces the key stroke <code>Ctrl+A</code>. The pressing of the modifier keys themselves
do not constitute key strokes.
</p>
<p>
A 'key sequence' is one or more key strokes. Traditionally, emacs assigned two or three key stroke key sequences to particular 
commands. For example, the normal key sequence assigned to <code>Close All</code> in emacs is <code>Ctrl+X Ctrl+C</code>. 
To enter this key sequence, one presses the key stroke <code>Ctrl+X</code> followed by the key stroke <code>Ctrl+C</code>.
Eclipse supports key sequences of arbitrary lengths.
</p>
<p>
A 'key binding' is the assignment of a key sequence to a command.
</p>
<h2>Configurations</h2>
<p>
A 'configuration' is a set of key bindings. Eclipse includes two configurations:
</p>
<ul>
<li>Standard</li>
<li>Emacs (extends Standard)</li>
</ul>
<p>
The <em>Standard</em> configuration contains a general set of key bindings, in many cases recognizable to 
users as traditional key sequences. For instance, <code>Ctrl+A</code> is assigned to <code>Select All</code>, 
<code>Ctrl+S</code> is assigned to <code>Save</code>, etc.
</p>
The <em>Emacs</em> configuration contains a set of key bindings familiar to users of emacs.
For instance, <code>Ctrl+X H</code> is assigned to <code>Select All</code>, <code>Ctrl+X S</code> is assigned to <code>Save</code>, etc.
</p>
<p>
It is important to understand why the <em>Emacs</em> configuration says that it 'extends Standard'. The <em>Emacs</em> configuration
is not a complete set of key bindings like the <em>Standard</em> configuration. Rather, it borrows from the <em>Standard</em>
configuration where possible, only defining explicit emacs style key bindings where they vary from the
<em>Standard</em> configuration. Generally, only well known commands like <code>Select All</code>, <code>Save</code>, etc. have specific emacs key sequences associated with them. 
</p>
<p>
The user decides which configuration they are most comfortable using by changing the 'Active Configuration' setting on the
keys preference page. If the user chooses the <em>Standard</em> configuration, all <em>Emacs</em> key bindings are ignored. If the user chooses
the <em>Emacs</em> configuration, explicit emacs style key sequence assignments take precedence over any conflicting assignments in the <em>Standard</em> configuration.
</p>
<h2>Scopes</h2>
<p>
Key bindings can vary based on the current context of Eclipse. 
</p>
<p>
Sometimes the active part might be a java file editor, for instance, where a different set of
key sequence assignments may be more appropriate than if the active part was an html file editor.
As a specific example, typically <code>Ctrl+B</code> is assigned to <code>Build</code> in a context such as java file editing, 
while <code>Ctrl+B</code> is assigned to <code>Make Text Bold</code> in a context such as html file editing. This context is called
'scope' and is determined by the active part. If the active part does not choose a particular scope, the workbench
will set the active scope to <em>Global</em>.
</p>
<p>
Eclipse includes three different scopes. They are:
</p>
<ul>
<li>Global</li>
<li>Text Editor (extends Global)</li>
<li>Java Editor (extends Text Editor)</li>
</ul>
<p>
Much like configurations, scopes can extend other scopes. For example, the <em>Java Editor</em> scope borrows key bindings from the
<em>Text Editor</em> scope, which in turn borrows key bindings from the <em>Global</em> scope.
</p>
<h2>Platform and Locale</h2>
<p>
Key bindings also vary by platform and locale. On the Macintosh platform, <code>Command+S</code> is assigned to <code>Save</code>, instead of the usual <code>Ctrl+S</code>. On Chinese locales (zh), <code>Alt+/</code> is assigned to <code>Content Assist</code>, instead of the usual <code>Ctrl+Space</code>.
</p>
<p>
The current platform and locale is determined when Eclipse starts, and does not vary over the course of an Eclipse instance.
</p>
<h2>Customizing Key bindings</h2>
<p>
With multi-stroke key sequences, configurations, and scopes, there are a lot of things to keep in mind when customizing key bindings.
To make things easier, all key customization is done on the Keys preference page.
</p>
<p>
Select <b>Window &gt; Preferences &gt; Workbench &gt; Keys</b> for the Keys preference page.
</p>
<p> <img src="../../images/keys1.gif" alt="Keys preference page, showing <em>Emacs</em> as the active configuration, and the <code>Close</code> command selected" width="591" height="543"> 
</p>
In this example, we have chosen to select <em>Emacs</em> as the active configuration, and have selected the command <code>Close</code> from the list of commands. Information on this command, along with its current key bindings, is shown on the right side.
</p>
<p>
Notice that <code>Close</code> has two key sequences assigned to it: <code>Ctrl+F4</code> in the <em>Standard</em> configuration and <code>Ctrl+X K</code> in the <em>Emacs</em> configuration. Both are assigned in the <em>Global</em> scope. Thus, if the user sets the active configuration to <em>Standard</em>, <code>Ctrl+F4</code> will be assigned to <code>Close</code> while <code>Ctrl+X K</code> will not. If the user sets the active configuration to <em>Emacs</em>, however, <code>Ctrl+X K</code> will be assigned to <code>Close</code>. As well, because the <em>Emacs</em> configuration also borrows key bindings from the <em>Standard</em> configuration, <code>Ctrl+F4</code> will also be assigned to <code>Close</code> provided that <code>Ctrl+F4</code> has not been assigned to another command in the <em>Emacs</em> configuration. 
</p>
<p>
Below the list of key sequences assigned to <code>Close</code>, there is a place to add or remove key bindings. By default, it selects the scope as <em>Global</em> and the configuration to be the user's active configuration (recall above where we changed this to <em>Emacs</em>).
<p>
<p>
We type in the key sequence <code>Ctrl+W</code>, and the 'Add' button becomes enabled. Also, a list of all the commands to which the key sequence
<code>Ctrl+W</code> is already assigned is show below the Add button. We can see that <code>Ctrl+W</code> is currently assigned to the command <code>Cut</code> in the <em>Global</em> scope and <em>Emacs</em> configuration. We click the 'Add' button to assign <code>Ctrl+W</code> to <code>Close</code>.
</p>
<img src="../../images/keys2.gif" alt="Keys preference page, assigning the key sequence <code>Ctrl+W</code> to the command <code>Close'" width="470" height="247"> </p> 
Now we see <code>Ctrl+W</code> added to the list of key sequences assigned to 
<code>Close</code>. Notice the small 'change' graphic <img src="../../images/change.gif" alt="Small graphic representing 'change'"> 
indicating that this key binding changes an existing key binding. Our new key 
binding, effectively removes the previous assignment of <code>Ctrl+W</code> to 
<code>Cut</code>. We can remove this change at any time by selecting our new key 
binding and clicking the 'Remove' button. The previous assignment of <code>Ctrl+W</code> 
to <code>Cut</code> will automatically be restored. 
<p> <img src="../../images/keys3.gif" alt="Keys preference page, showing the new assignment, including 'change' graphic" width="472" height="428"> 
</p>
By selecting the command <code>Cut</code>, we can see the results of our change. Notice the small 'minus' graphic <img src="../../images/minus.gif" alt="Small graphic representing 'minus'"> indicating that the key binding was removed. We can restore this key binding at any time by selecting it here and clicking the 'Restore' button, effectively removing the new key binding we added in the previous step.
<p> <img src="../../images/keys4.gif" alt="Keys preference page, showing the <code>Cut</code> command" width="604" height="517"> 
</p>
Perhaps we choose to assign another key to <code>Cut</code> in the <em>Emacs</em> 
configuration, say <code>Ctrl+Alt+W</code>. Adding this in the previous manner 
above produces the following. Notice the small 'plus' graphic <img src="../../images/plus.gif" alt="Small graphic representing 'plus'"> 
indicating that the key binding was added by the user, and was previously unassigned: 
<p> <img src="../../images/keys5.gif" alt="Keys preference page, adding the key sequence <code>Ctrl+Alt+W</code> to <code>Close</code>" width="574" height="450"></p>
<h2>The Dynamic Nature of Key bindings</h2>
<p>
Key bindings are provided by plugins, and in Eclipse, plugins can be added or removed. This can cause key bindings declared by these plugins to be added or removed. Eclipse stores custom key bindings in a way to automatically compensate for this. Consider the example above where <code>Ctrl+Alt+W</code> was assigned to <code>Cut</code> in the <em>Emacs</em> configuration. Consider the user installs a new plugin which assigns <code>Ctrl+Alt+W</code> to a particular command. Eclipse will preserve the user's assignment to <code>Cut</code>, but show the key binding with the small 'change' graphic instead of the 'plus' graphic.
</p>
<h2>Conflict Resolution</h2>
<p>
There are only a finite number of simple, common key strokes available to assign to a multitude of commands. We have seen that configuration, scope, platform, and locale all partition key sequence assignments into domains where they don't conflict with one another. Consider the case for <code>Ctrl+B</code> above if scopes did not exist. One plugin would assign <code>Ctrl+B</code> to <code>Build</code>, the other plugin would assign <code>Ctrl+B</code> to <code>Make Bold Text</code>. How would Eclipse properly resolve this conflict?
</p>
<p>
Though conflicts are drastically reduced by employing the above mechanisms, they can still occur. Two plugins, independent of one another, could assign the same key sequence to different commands with the same scope, configuration, platform, and locale. Consider if a plugin assigned <code>Ctrl+F4</code> in the <em>Global</em> scope and <em>Standard</em> configuration to one of its commands. This directly conflicts with Eclipse assigning <code>Ctrl+F4</code> to the close command in the same scope and configuration.
</p>
This is a conflict. It wouldn't be proper to invoke both commands, nor would it be proper to simply choose one of the two commands to receive the key stroke. The only proper thing to do is to ignore both key bindings, making <code>Ctrl+F4</code> effectively useless in this scope and configuration.
</p>
<p>
Conflicts of this nature are shown in the Keys preference page as follows. Notice the red text and the word "[conflict]":
</p>
<p> <img src="../../images/keys6.gif" alt="Keys preference page, showing a conflict for the key sequence <code>Ctrl+F4'" width="567" height="451"> 
</p>
<p>
These types of conflicts can be resolved by the user explicitly assigning the key sequence to one of the commands.
</p>
<p>
Another type of conflict can be caused by multiple-key stroke key sequences. For example, in the <em>Emacs</em> configuration, there are many multiple-key stroke key sequences beginning with the key stroke <code>Ctrl+X</code>. <code>Ctrl+H K</code> is assigned to <code>Close</code>. <code>Ctrl+X H</code> is assigned to <code>Select All</code>.
</p>
<p>
As previously mentioned, the <em>Emacs</em> configuration borrows key bindings from the <em>Standard</em> configuration. In the standard configuration, <code>Ctrl+X</code> is assigned to <code>Cut</code>. Though the <em>Emacs</em> configuration doesn't explicitly redefine <code>Ctrl+X</code>, pressing <code>Ctrl+X</code> is required as part of many of its key bindings. In the <em>Emacs</em> configuration, when one presses <code>Ctrl+X</code>, one is half way to entering one of many possible assigned key sequences. One would not expect the <code>Cut</code> action to be invoked at this time.
</p>
<p>
For this type of conflict, the rule is that the <code>Ctrl+X</code> key sequence assigned to <code>Cut</code> would be ignored. Otherwise, it would not be possible to complete many of the key bindings in the <em>Emacs</em> configuration. 
</p>
<p><img src="../../images/ngrelc.gif" alt="Related concepts" width="159" height="27"><br>
<a href="accessmain.htm">Accessibility Features in Eclipse</a><br>
<a href="../../tasks/tkeybindings.htm">Changing the key bindings</a><br>
<a href="../chelpsys.htm">Online help system</a></p>
<p><img src="../../images/ngrelr.gif" alt="Related references" width="159" height="27"><br>
  <a href="fontsandcolors.htm">Font and color settings in Eclipse</a></p>
<p><a href="../../hglegal2003.htm">
<img src="../../images/ngibmcpy2003.gif" alt="Copyright IBM Corporation and others 2000, 2003. All Rights Reserved." border="0" width="324" height="14"></a></p> 
</body>
