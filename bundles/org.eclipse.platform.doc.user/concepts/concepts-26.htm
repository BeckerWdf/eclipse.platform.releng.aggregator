<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Team programming with CVS</title>
<meta name="keyword" content="team">
</HEAD>
<BODY BGCOLOR="#ffffff">
<h1 CLASS="Head">Team programming with CVS</h1>
<p CLASS="Para">In the Concurrent Versions System (CVS) team programming environment, 
  team members do all of their work in their own workbenches, isolated from others. 
  Eventually they will want to share their work. They do this via a CVS Repository.</p>
<h2 CLASS="Para">Branches</h2>
<p CLASS="Para">CVS uses a branch model to support multiple courses of work that 
  are somwhat isolated from each other but still highly interdependant. Branches 
  are where a development team shares and integrates ongoing work. A branch can 
  be thought of as a shared workspace that is updated by team members as they 
  make changes to the project. This model allows individuals to work on a CVS 
  team project, share their work with others as changes are made, and access the 
  work of others as the project evolves. A special branch, refered to as HEAD, 
  represents the main course of work in the repository (HEAD is often refered 
  to as the trunk).</p>
<h2 CLASS="Para">Sharing Work</h2>
<div CLASS="Topic">
  <p CLASS="Para">As team members produce new work, they share this work by <i>committing</i> 
    those changes to the branch. Similarly, when they wish to get the latest available 
    work, they <i>update</i> their local workspaces to the changes on the branch.&nbsp; 
    Thus the branch is constantly changing, moving forward as team members submit 
    new work.</p>
  <p CLASS="Para">The branch effectively represents the current state of the project. 
    At any point a team member can catch up to the branch and know they are up 
    to date.</p>
  <div CLASS="Figure">
    <div>
      <map NAME="ref-9"></map><img SRC="../images/ref-9.gif" USEMAP="#ref-9" alt="Interaction with Streams and Workbenches" width="344" height="183">
    </div>
  </div>
  <div CLASS="XRefList">
  </div>
</div>
<div CLASS="Topic">
  <h2>Optimistic team model</h2>
  <p CLASS="Para">CVS provides two important features required for working in 
    a team:</p>
  <ul>
    <li>
      <p CLASS="Para">A history of the work submitted by the team</li>
    <li>
      <p CLASS="Para">A way to coordinate and integrate this work</li>
  </ul>
  <p CLASS="Para">Maintaining history is important so that one can compare the 
    current work against previous, revert to older work that is better, and so on. 
    Coordinating the work is critical so that there exists one definition of the 
    current project state, containing the integrated work of the team. This coordination 
    is provided via the branch model.</p>
  <p CLASS="Para">An optimistic model is one where any member of the team can 
    make changes to any resource he or she has access to.&nbsp; Because two team 
    members can release to the branch changes to the same resource, conflicts 
    can occur and must be dealt with. This model is termed <i>optimistic</i> because 
    it is assumed that conflicts are rare.</p>
  <h2>Recommended work flow</h2>
  <p CLASS="Para">Usually resources do not exist in isolation: they typically
  contain implicit or explicit dependencies on other resources.&nbsp; For
  example, Web pages have links to other Web pages, and source code has
  references to artifacts described in other source code resources.&nbsp; No
  resource is an island.</p>
  <p CLASS="Para">As resources are released to the branch, these dependencies 
    can be affected. Ensuring the integrity of the dependencies is important because 
    the branch represents the current project state: at any point a team member 
    could take the branch contents as a basis for new work.</p>
  <p CLASS="Para">The ideal work flow therefore is one in which the branch integrity 
    is preserved. </p>
  <h3 CLASS="Para">Ideal Flow Enumerated</h3>
  <p CLASS="Para">The ideal work flow proceeds as follows:</p>
  <ol>
    <li>
      <p CLASS="Para">Start fresh: Before starting work, get caught up with the 
        current branch state. If you are sure that you have no local work that 
        you care about, the fastest way to get caught up is to select the projects 
        you are interested in from the branch (or HEAD) and select <b>Checkout 
        As Project</b>. This will overwrite your local resources with those from 
        the branch.
    </li>
    <li>
      <p CLASS="Para">Make changes: Work locally in your workbench, creating new
      resources, modifying existing ones, saving locally as you go.</li>
    <li>
      <p CLASS="Para">Synchronize: When you are ready to commit your work, synchronize 
        with the repository: 
      <ol type="a">
        <li>
          <p CLASS="Para">Update: Examine incoming changes and add them to your 
            local workbench. This allows you to determine if there are changes 
            which might affect the integrity of what you are about to commit. 
            Resolve conflicts. Retest, run integrity checkers (for example, check 
            for broken hypertext links, ensure your code compiles, and so on).
        </li>
        <li>
          <p CLASS="Para">Commit: Now that you are confident that your changes 
            are well integrated with the latest branch contents, release your 
            changes to the branch. To be prudent, you may repeat the previous 
            step if there are new incoming changes.
        </li>
      </ol>
    </li>
  </ol>
  <p CLASS="Para">Of course this is an <i>ideal</i> workflow. Under certain conditions 
    you may be confident that the incoming changes do not affect you and choose 
    to commit without updating. However, in general team members should make an 
    effort to follow a flow similar to the above in order to ensure that the branch 
    integrity is not accidentally compromised.&nbsp;
  <p CLASS="Para">You can find more information on CVS at <a href="http://www.cvshome.org" class="URL" target="_blank">http://www.cvshome.org.</a>
</div>

<p><img border="0" src="../images/ngrelc.gif" alt="Related concepts" width="159" height="27"><br>
  <a href="concepts-27c.htm">CVS Repositories</a><a href="concepts-27b.htm"><br>
  Branches</a><a href="concepts-30.htm"><br>
  Synchronizing with a CVS repository</a>&nbsp;</p>


<p><img border="0" src="../images/ngrelt.gif" alt="Related tasks" width="159" height="27"><a href="../tasks/tasks-92.htm"><br>
Creating a CVS repository location</a><a href="../tasks/tasks-96.htm"><br>
Checking out a project from a CVS repository</a>&nbsp;<a href="../tasks/tasks-103.htm"><br>
Replacing resources in the workbench</a><a href="../tasks/tasks-117.htm"><br>
Sharing a new project using CVS</a><a href="../tasks/tasks-115.htm"><br>
Synchronizing with the repository</a><a href="../tasks/tasks-113.htm"><br>
Updating</a><a href="../tasks/tasks-113b.htm"><br>
Resolving conflicts </a><a href="../tasks/tasks-100b.htm"><br>
Merging from a branch</a><a href="../tasks/tasks-114.htm"><br>
Committing</a><a href="../tasks/tasks-100.htm"><br>
Creating a version of a project</a><a href="../tasks/tasks-118.htm"><br>
Versioning projects in the repository</a>
</p>

<p>
<a href="../hglegal2002.htm"><img src="../images/ngibmcpy2002.gif" alt="Copyright IBM Corp. and others 2000, 2002. All Rights Reserved." border="0"></a>
</p>

</BODY>
</HTML>
