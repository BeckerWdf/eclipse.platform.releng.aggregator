<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Team programming</title>
<meta name="keyword" content="team">
</HEAD>
<BODY BGCOLOR="#ffffff">
<h1 CLASS="Head">Team programming</h1>
<p CLASS="Para">In the team programming environment, team members do all of
their work in their own workbenches, isolated from others. Eventually they will
want to share their work. They do this via <i>streams</i>. </p>
<p CLASS="Para">Streams are where a development team shares and integrates
ongoing work. A stream can be thought of as a shared workspace that is updated
by team members as they make changes to the project. This model allows
individuals to work on a team project, share their work with others as changes
are made, and access the work of others as the project evolves.</p>
<div CLASS="Topic">
  <p CLASS="Para">As team members produce new work, they share this work by <i>releasing</i>
  those changes to the stream. Similarly, when they wish to get the latest
  available work, they <i>catch up</i> to the changes on the stream.&nbsp; Thus
  the stream is constantly changing, moving forward as team members submit new
  work.</p>
  <p CLASS="Para">The stream effectively represents the current state of the
  project. At any point a team member can catch up to the stream and know they
  are up to date.</p>
  <div CLASS="Figure">
    <div>
      <map NAME="ref-9"></map><img SRC="../images/ref-9.gif" USEMAP="#ref-9" alt=" " width="344" height="183">
    </div>
  </div>
  <div CLASS="XRefList">
  </div>
</div>
<div CLASS="Topic">
  <h2>Optimistic team model</h2>
  <p CLASS="Para">Version control systems provide two important features
  required for working in a team:</p>
  <ul>
    <li>
      <p CLASS="Para">A history of the work submitted by the team</li>
    <li>
      <p CLASS="Para">A way to coordinate and integrate this work</li>
  </ul>
  <p CLASS="Para">Maintaining history is important so that one can compare the
  current work against previous, revert to older work that is better, etc.&nbsp;
  Coordinating the work is critical so that there exists one definition of the
  current project state, containing the integrated work of the team. This
  coordination is provided via the stream model.</p>
  <p CLASS="Para">An optimistic model is one where any member of the team can
  make changes to any resource he/she has access to.&nbsp; Because two team
  members can release to the stream changes to the same resource, conflicts can
  occur and must be dealt with. This model is termed <i>optimistic</i> because
  it is assumed that conflicts are rare.</p>
  <h2>Recommended work flow</h2>
  <p CLASS="Para">Usually resources do not exist in isolation: they typically
  contain implicit or explicit dependencies on other resources.&nbsp; For
  example, Web pages have links to other Web pages, and source code has
  references to artifacts described in other source code resources.&nbsp; No
  resource is an island.</p>
  <p CLASS="Para">As resources are released to the stream, these dependencies
  can be affected. Ensuring the integrity of the dependencies is important
  because the stream represents the current project state: at any point a team
  member could take the stream contents as a basis for new work.</p>
  <p CLASS="Para">The ideal work flow therefore is one in which the stream
  integrity is preserved. The ideal work flow proceeds as follows:</p>
  <ol>
    <li>
      <p CLASS="Para">Start fresh: Before starting work, get caught up with the
      current stream state. If you are sure that you have no local work that you
      care about, the fastest way to get caught up is to select the projects you
      are interested in from the stream and select <b>Add to Workspace</b>.
      This will overwrite your local resources with those from the
      stream.</li>
    <li>
      <p CLASS="Para">Make changes: Work locally in your workbench, creating new
      resources, modifying existing ones, saving locally as you go.</li>
    <li>
      <p CLASS="Para">Synchronize: When you are ready to release your work,
      synchronize with the stream:
      <ol type="a">
        <li>
          <p CLASS="Para">Catch up: Examine incoming changes and add them to your
      local workbench. This allows you to determine if there are changes which
      might affect the integrity of what you are about to release. Resolve
      conflicts. Retest, run integrity checkers (for example, check for broken hypertext
      links, ensure your code compiles, and so on).</li>
        <li>
          <p CLASS="Para">Release: Now that you are confident that your changes are
      well integrated with the latest stream contents, release your changes to
      the stream. To be prudent, you may repeat the previous step if there are new
      incoming changes.</li>
      </ol>
    </li>
  </ol>
  <p CLASS="Para">Of course this is an <i>ideal</i> workflow. Under certain
  conditions you may be confident that the incoming changes do not affect you
  and choose to release without catching up. However, in general team members
  should make an effort to follow a flow similar to the above in order to ensure
  that the stream integrity is not accidentally compromised.&nbsp;
</div>

<p><img border="0" src="../images/ngrelc.gif" alt="Related concepts" width="159" height="27"><br>
<a href="concepts-27c.htm">Repositories</a><a href="concepts-27b.htm"><br>
Streams</a><a href="concepts-30.htm"><br>
Team synchronization</a>&nbsp;</p>


<p><img border="0" src="../images/ngrelt.gif" alt="Related tasks" width="159" height="27"><a href="../tasks/tasks-92.htm"><br>
Creating a repository location</a><a href="../tasks/tasks-96.htm"><br>
Adding resources from a repository to the workbench</a>&nbsp;<a href="../tasks/tasks-103.htm"><br>
Replacing resources with a repository
        version</a><a href="../tasks/tasks-111.htm"><br>
Creating a new stream</a><a href="../tasks/tasks-117.htm"><br>
Associating a project with a stream</a><a href="../tasks/tasks-115.htm"><br>
Synchronizing with a stream</a><a href="../tasks/tasks-113.htm"><br>
Catching up</a><a href="../tasks/tasks-113b.htm"><br>
Resolving conflicts and merging changes</a><a href="../tasks/tasks-100b.htm"><br>
Merging from a stream</a><a href="../tasks/tasks-114.htm"><br>
Releasing resources to the stream</a><a href="../tasks/tasks-100.htm"><br>
Creating a version of a project</a><a href="../tasks/tasks-118.htm"><br>
Versioning projects in the stream</a>
</p>


<p>
<img src="../images/ngibmcpy.gif" alt="Copyright IBM Corp. 2000, 2001" width="195" height="12"></p>


</BODY>
</HTML>
