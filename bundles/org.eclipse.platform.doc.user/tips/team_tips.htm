<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Tips and Tricks for using CVS in Eclipse</title>

</HEAD>
<BODY BGCOLOR="#ffffff">
<H1 CLASS="Head"> Tips and Tricks for using CVS in Eclipse</H1>
<p>If the answer to your question is not here, read the <a href="http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/platform-vcm-home/docs/online/cvs_features2.0/cvs-faq.html">CVS 
  FAQ</a>. </p>
<h3 CLASS="Head">How to get branches to show in the Repositories view</h3>
<p CLASS="Head">See next point if branches don't appear.</p>
<p CLASS="Head">&nbsp;</p>
<h3 CLASS="Head">Browsing a CVS repository for versions and branches</h3>
<p CLASS="Head">If you expand a folder listed under the <strong>Version </strong>category 
  in the repositories view and there are no versions listed. Don't worry. </p>
<ol>
  <li>Select the project below the versions category and next select <strong>Configure 
    Branches and Versions</strong> from the context menu. </li>
  <li>Then browse the files in your project and the tags applied to each file 
    will be displayed. </li>
  <li>You can configure Eclipse to remember these tags. Also by selecting the 
    <strong>Add Selected Files</strong> button you can even configure Eclipse 
    to automatically look at this list of files each time it queries for versions 
    of that project.</li>
</ol>
<p CLASS="Head">This may seem a bit odd, but remember that we are trying to work 
  <em>around</em> some of the problems with CVS. If you are familliar with CVS 
  you know that there is no easy way of asking &quot;show me all the versions 
  and branches&quot; for a folder. Instead you have to look in the log of a file 
  and list the versions applied to that file. Understanding this CVS limitation 
  will help you navigate the CVS repository and the purpose of the <strong>Configure 
  Branches and Versions</strong> dialog.</p>
<h3 CLASS="Head">Sharing your CVS lineup with others</h3>
<p CLASS="Head">You can save the list of projects shared with CVS into a team 
  project set. This provides an easy way of re-creating your workspace with shared 
  CVS projects. </p>
<ol>
  <li>Once you have checked out the set of projects from the CVS repository, select 
    <strong>File &gt; Export</strong> from the main menu.</li>
  <li> Select <strong>Team Project Set</strong> from the list and then select 
    the projects to be exported. The generated file can be shared with your team 
    to allow quick setups of your development environment. </li>
  <li>To import the project set select <strong>File &gt; Import</strong> and select 
    <strong>Team Project Set</strong>. The projects will be checked out of CVS 
    and a repository location will automatically be created.</li>
</ol>
<h3 CLASS="Head"> Using projects checked out from outside of Eclipse</h3>
<p CLASS="Head">A common concern for those migrating to Eclipse is that they already 
  have their CVS project checked out on their local machine. You <em>don't</em> 
  have to check out the contents again to create a project in Eclipse. </p>
<ol>
  <li>Create a project in Eclipse and give it the exact same name as the top level 
    folder where the contents are checked out to. At this point you may have to 
    change the default location of the project contents. This will create a new 
    project in Eclipse and create resources for everything in that folder. </li>
  <li>Now to enable CVS for this project, select the project from the navigator 
    and from the context menu select <strong>Team &gt; Share Project...</strong>. 
    You should be prompted with the wizard page that detected that the project 
    already contains CVS meta information.Migrating an existing java project from 
    CVSMigrating an existing java project from CVS</li>
</ol>
<h3 CLASS="Head">My SSH server only supports version 2 of the protocol</h3>
<p CLASS="Head">Eclipse comes with a built-in SSH connection method called 'extssh'. 
  However this method only supports SSH1 servers. If your server is running SSH2 
  and you want to use Eclipse to connect to that server you have two options:</p>
<ol>
  <li>use a command line ssh client that supports SSH2 with the 'ext' connection 
    method</li>
  <li>download a plugin created by <a href="http://www.jcraft.com/eclipse-cvsssh2/">JCraft</a> 
    that provides a SSH2 connection method.</li>
</ol>
<p>To use the 'ext' connection method download a command line client for your 
  platform and in the CVS preference page, Windows &gt; Preferences then Team 
  &gt; CVS &gt; Ext Connetion Method you can configure the location of the ssh 
  executable and how the executable will be called.</p>
<h3 CLASS="Head">Restore a file that has been deleted from the CVS repository</h3>
<p CLASS="Head">To restore a file to your workspace that has previously been deleted 
  from the CVS repository select a folder and from the context menu select <strong>Team 
  &gt; Restore from Repository</strong>. The repository will be searched for deleted 
  files and the list will be shown. You have the option of restoring any previous 
  revision of a deleted file. After restoring the file you have to add then commit 
  the file back into the repository. If the filename does not change, revision 
  history will be maintained for the restored file.</p>
<h3 CLASS="Head">Restore a branch to a previous revision</h3>
<p CLASS="Head">It is often useful to revert the contents of a branch to those 
  of a specific version. </p>
<ol>
  <li>First, checkout the contents from the branch that you want to restore. </li>
  <li>Select <strong>Compare With &gt; Another Branch or Version</strong> on the 
    project and select the version to which you want to revert the branch.</li>
  <li>When the compare editor opens review the differences and ensure that they 
    are what you expected. </li>
  <li>Select the root folder in the compare view and from the context menu select 
    <strong>Copy All Changes From Right To Left</strong>. After the operation 
    is completed, it may take some time, the folder or project you compare against 
    will have exactly the same contents as the revision. </li>
  <li>You can verify this by performing another comparison against the version. 
    However this time, when the comparison completes select the <img src="images/team_contents_icon.gif" width="16" height="16" align="absmiddle"> 
    <strong>Use File Contents</strong> toolbar button to recompute the comparison 
    using file contents instead of revision numbers. Note, you may also have to 
    select the <strong>Ignore White Space</strong> button too. </li>
  <li>After the comparison using file contents completes the compare editor should 
    be empty. Meaning that the files in your workspace are identical to the ones 
    in the selected version.</li>
</ol>
<p CLASS="Head">Once your workspace contains the content you want, run your tests 
  then commit the changes to the branch.</p>
<h3 CLASS="Head">CVS Watch/Edit</h3>
<p CLASS="Head">The &quot;edit&quot; portion of CVS Watch/Edit is now supported 
  within Eclipse. Through settings on the <b>Team &gt; CVS &gt; Watch/Edit</b> 
  preference page (which must be set before the projects are added to your workspace), 
  you can choose to automatically notify the CVS server whenever you start to 
  edit a file. In turn, the CVS server will notify others on the watch list for 
  that file. When you go to edit a file, you are warned if there are others editing 
  the same file. <b>Team &gt; Show Editors</b> on a file's context menu lists 
  everyone currently working on the file. There are also <b>Team &gt; Edit</b> 
  and <b>Unedit</b> actions.</p>
<h3 CLASS="Head">Quick Sync Action</h3>
<p CLASS="Head">A new &quot;quick sync&quot; action has been added to the CVS 
  action set. The action lets you select which CVS projects to synchronize. A 
  new button shows up in the CVS repository view, but you can customize your workbench 
  toolbar to place it within easy reach. You can add the action to a key binding 
  and quickly synchronize projects via the keyboard. </p>
<ol>
  <li> From the CVS Repository Exploring perspective select the <img src="../images/cvs_synch.gif" width="16" height="16" align="absmiddle"> 
    <strong>Synchronize CVS projects</strong> button. </li>
  <li>Select to either include all projects that are shared with CVS or specify 
    a working set. Then select <strong>OK.</strong></li>
  <li>The Synchronize view will open.</li>
</ol>
<p> Note: The synchronize action is not enabled by default in other non-CVS specific 
  perspectives. You can enable the action to appear in your current perspective 
  by selecting <strong>Window &gt; Customize Perspective</strong>. Then enable 
  the CVS item via <strong>Other > CVS</strong>.</p>
<h3 CLASS="Head">Synchronize view that contains many conflicts</h3>
<p CLASS="Head">It can happen that a project is synchronized with a repository 
  but somehow the CVS meta information was either deleted or not available (e.g. 
  user ran cvs export from the command line). By default the synchronize view 
  uses CVS revision numbers to calculate the sync state for files. However if 
  the sync state is wrong or is not available you can revert to using file contents 
  for calculating the sync state.</p>
<ol>
  <li>Your sync view contains many <em>false</em> conflicts (e.g. file that are 
    marked as conflicting but whose contents are actually the same).</li>
  <li>From the view's toolbar menu select <strong>Compare File Contents</strong>.</li>
  <li>The synchronization will be refreshed and all false conflicts will be removed.</li>
  <li>For any remaining real conflicts you can either accept the remote contents 
    <strong>Overide and Update</strong> or release your file to the server <strong>Override 
    and Commit</strong>.</li>
</ol>
<h3 CLASS="Head">Revert a single file that was edited, but not committed</h3>
<p CLASS="Head">There are a two ways of doing this:</p>
<ol>
  <li>Select the file and from the context menu select Replace With &gt; Latest 
    from HEAD.</li>
</ol>
<p>or</p>
<ol>
  <li>Select the file or a parent folder and from the context menu select <strong>Team 
    &gt; Synchronize with Repository</strong>.</li>
  <li>Next switch to incoming/outgoing mode using the toolbar button in the view.</li>
  <li>Select the file and from the context menu select <strong>Override and Update</strong>.</li>
</ol>
<h3>Moving version tags</h3>
<p>Let's say that you have just submitted your build by versioning your project 
  as R1. But you soon after discover that there is a small change to a file that 
  should be made and included in the build. Instead of having to re-version the 
  project you can move the R1 version tag for the modified file.</p>
<ol>
  <li>Modify the file(s) Select the file that was modified after R1 was created 
    and from the context menu select <strong>Team &gt; Show in Resource History</strong>.</li>
  <li>From within the Resource History view select the revision that should be 
    marked with the R1 version. </li>
  <li>From the context menu select <strong>Tag with Existing...</strong>.</li>
  <li>Select the R1 version from the dialog box and press OK. </li>
  <li>The resource history view will be updated to confirm that the version had 
    been moved.</li>
</ol>
<UL CLASS="UnorderedList">
</UL>

<P>
<a href="../hglegal2002.htm"><img src="../images/ngibmcpy2002.gif" alt="Copyright IBM Corporation 2000, 2002. All Rights Reserved." border="0" width="324" height="14"></a>
</P>

</BODY>
</HTML>