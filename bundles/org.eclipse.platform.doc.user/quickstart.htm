<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Basic tutorial</title>

</HEAD>
<BODY BGCOLOR="#ffffff">
<H1 CLASS="Head"> Quick Start Guide</H1>
<P>This tutorial introduces you to the Workbench, providing a brief overview of 
  the steps required to create simple applications. More extensive explanations, 
  including images, are available in the Workbench User Guide.</P>
<P><strong>Workbench Quick Start</strong></P>
<table width="75%" border="1">
  <tr> 
    <td width="32%"><strong>Task</strong></td>
    <td width="68%"><strong>Description</strong></td>
  </tr>
  <tr> 
    <td><p>Create a Simple Project</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p></td>
    <td><ol>
        <li>Select <strong>File &gt; New &gt; Project...</strong>.</li>
        <li>In the New Project wizard, select <strong>Simple &gt; Project </strong>then 
          click <strong>Next</strong>. </li>
        <li>In the <strong>Project name </strong>field type a name for your new 
          project.</li>
        <li> 
          <p>Specify a location for the project or use the default. </p>
        </li>
        <li> 
          <p>Click <strong>Finish</strong>.</p>
        </li>
      </ol></td>
  </tr>
  <tr> 
    <td>Create a Java Project: JUnit example</td>
    <td><ol>
        <li>To download the JUnit source code, visit http://www.eclipse.org/downloads/ 
          and locate the Eclipse release that you are working with. </li>
        <li>Scroll down to the Example Plug-ins section and download the examples 
          archive. </li>
        <li> Extract the contents of the Zip file to a directory. </li>
        <li>Return to Eclipse and select <strong>File &gt; New &gt; Project...</strong>.</li>
        <li> Select <strong>Java Project </strong>then click <strong>Next</strong>. 
        </li>
        <li>In the <strong>Project name</strong> field type <strong>JUnit</strong>.</li>
        <li>Click <strong>Finish</strong>.</li>
        <li>In the Package Explorer, make sure that the JUnit project is selected. 
        </li>
        <li>Select the menu item <strong>File &gt; Import...</strong>. </li>
        <li>Select Zip file, then click <strong>Next</strong>.</li>
        <li> Click <strong>Browse </strong>next to the Zip file field and browse 
          to select &lt;ExamplesDownloadPath&gt;eclipse/plugins/org.eclipse.jdt.ui.examples.projects_3.0.0/archive/junit/junit381src.jar.</li>
        <li> 
          <p>In the Import wizard, below the hierarchy list click <strong>Select 
            All</strong>. </p>
        </li>
        <li> 
          <p>Once the JUnit project appears in the destination <strong>Folder 
            </strong>field click <strong>Finish</strong>. </p>
        </li>
        <li> 
          <p>In the import progress indicator, notice that the imported resources 
            are compiled as they are imported into the workbench. This is because 
            the <strong>Build automatically </strong>option is checked on the 
            Workbench preferences page. You will be prompted to overwrite the 
            .classpath and .project files in the JUnit project. This is because 
            the .classpath resource was created for you when you created the JUnit 
            project. It is safe to overwrite these files. <br>
            In the Package Explorer view, expand the JUnit project to view the 
            JUnit packages. </p>
        </li>
      </ol></td>
  </tr>
  <tr> 
    <td>Create a Java Class: JUnit Example</td>
    <td><ol>
        <li> In the Package Explorer view, right-click the JUnit project, select 
          <strong>New &gt; Package</strong>.</li>
        <li> In the <strong>Name</strong> field, type <strong>test</strong> as 
          the name for the new package. </li>
        <li>Click<strong> Finish</strong>. </li>
        <li>In the Package Explorer view, select the new test package and click 
          <strong>New Java Class </strong>in the toolbar. Make sure that <strong>JUnit</strong> 
          appears in the Source Folder field and that <strong>test</strong> appears 
          in the Package field.</li>
        <li> In the Name field, type <strong>MyTestCase</strong>.</li>
        <li>Next to the <strong>Superclass </strong>field, click <strong>Browse</strong>. 
        </li>
        <li>In the <strong>Choose a type </strong>field in the Superclass Selection 
          dialog, type <strong>Test </strong>to narrow the list of available superclasses. 
        </li>
        <li>Select the <strong>TestCase</strong> class and click <strong>OK</strong>. 
        </li>
        <li>Select the checkbox for <strong>Constructors from superclass</strong>. 
        </li>
        <li> Click <strong>Finish</strong>.</li>
        <li>The new file is opened in the editor. It contains the new class, the 
          constructor and comments. You can select options for the creation and 
          configuration of generated comments in the Java preferences <strong>(Window 
          &gt; Preferences &gt; Java &gt; Code Style &gt; Code Templates</strong>). 
        </li>
        <li>In the Outline view select the new class MyTestCase. Open the context 
          menu and select Source &gt; Override/Implement Methods....</li>
        <li><br>
        </li>
      </ol></td>
  </tr>
  <tr> 
    <td><p>Create a Folder</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p></td>
    <td> <ol>
        <li>Ensure one or more projects exist.</li>
        <li>Select <strong>File &gt; New &gt; Folder</strong>.</li>
        <li>In the <strong>Folder name </strong>field of the New Folder wizard, 
          type a name for your new folder.</li>
        <li>Click <strong>Finish</strong>.</li>
      </ol></td>
  </tr>
  <tr> 
    <td><p>Create a File</p>
      <p>&nbsp;</p></td>
    <td><ol>
        <li>Ensure one or more projects exist.</li>
        <li>Select <strong>File &gt; New &gt; File</strong>.</li>
        <li>In the <strong>File name </strong>field of the New Folder wizard, 
          type a name for your new folder.</li>
        <li>Click <strong>Finish</strong>.</li>
      </ol></td>
  </tr>
  <tr> 
    <td><p>Import Resources</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p></td>
    <td><ol>
        <li>Select <strong>File &gt; Import</strong>.</li>
        <li>Select an import source.</li>
        <li>Click <strong>Next</strong>.</li>
        <li>Select the directory containing the resource by following the steps 
          indicated in the applicable wizard.</li>
        <li>Click <strong>Finish</strong>.</li>
      </ol></td>
  </tr>
  <tr> 
    <td><p>Export Resources</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p></td>
    <td><ol>
        <li>Select <strong>File &gt; Export</strong>.</li>
        <li>Select an export destination.</li>
        <li>Click <strong>Next</strong>.</li>
        <li> Select the export destination by following the steps indicated in 
          the applicable wizard.</li>
        <li>Click <strong>Finish</strong>.</li>
      </ol></td>
  </tr>
  <tr> 
    <td>Launch a Java Program</td>
    <td>JDT</td>
  </tr>
  <tr> 
    <td>Create a Plug-in</td>
    <td>JDT</td>
  </tr>
  <tr> 
    <td>Test a Plug-in </td>
    <td>JDT -by launching Eclipse inside Eclipse </td>
  </tr>
  <tr> 
    <td>Automatically performing builds </td>
    <td> <ol>
        <li>Select <strong>Window &gt; Preferences</strong>.</li>
        <li>Select the <strong>General </strong>category in the left pane.</li>
        <li> Select <strong>Build automatically</strong>. </li>
        <li>Click <strong>OK</strong>. </li>
      </ol></td>
  </tr>
  <tr> 
    <td>Manually performing builds </td>
    <td><ol>
        <li>In the Navigator view of the Resource perspective, select one or more 
          projects. </li>
        <li>Right-click and select the option <strong>Rebuild Project </strong>from 
          the pop-up menu. </li>
      </ol></td>
  </tr>
</table>
<P><strong>CVS Quick Start</strong></P>
<P><strong>Note:</strong> A CVS server must already be configured on the host 
  machine to create a valid repository location in the Workbench.</P>
<table width="75%" border="1">
  <tr> 
    <td width="32%"><strong>Task</strong></td>
    <td width="68%"><strong>Description</strong></td>
  </tr>
  <tr> 
    <td> <p>Creating a CVS repository location</p>
      <p>&nbsp;</p></td>
    <td><ol>
        <li>Select <strong>Window &gt; Show View &gt; Other... </strong> </li>
        <li>Select <strong>CVS &gt; CVS</strong> <strong>Repositories</strong>.</li>
        <li>Click <strong>Add CVS Repository</strong>.</li>
        <li>Enter the information required to identify and connect to the repository 
          location.</li>
        <li>Click <strong>Finish</strong>. </li>
      </ol></td>
  </tr>
  <tr> 
    <td>Connecting and configuring CVS with SSH</td>
    <td><ol>
        <li>Select <strong>Window &gt; Preferences</strong>.</li>
        <li>Select <strong>Team &gt; CVS &gt; SSH2 Connection Method</strong>.</li>
        <li>Select the <strong>General </strong>tab, click <strong>Add Private 
          Key</strong> and add your private key to the list.</li>
        <li>Provide a password for your private key and save it on your computer.</li>
      </ol>
      <p>If you do not have a keypair:</p>
      <p></p>
      <ol>
        <li>Select <strong>Window &gt; Preferences</strong>.</li>
        <li>Select <strong>Team &gt; CVS &gt; SSH2 Connection Method</strong>.</li>
        <li>Select the <strong>Key Management</strong> tab.</li>
        <li>If your server supports version 1 of the protocol, select <strong>Generate 
          RSA key</strong>, for version 2 select <strong>Generate DSA key</strong>. 
          A public key and private key will be generated. The public key will 
          be shown in the read-only text area. </li>
        <li>Copy the public key to your server. If your server is running an OpenSSH 
          server, click <strong>Export via sftp</strong>. Otherwise copy and paste 
          the public key into your remote ~/.ssh/authorized_keys file.</li>
      </ol></td>
  </tr>
  <tr> 
    <td>Checking out a project from a CVS repository</td>
    <td> <ol>
        <li>Switch to the CVS Repository Exploring perspective. </li>
        <li> In the CVS Repositories view, expand the repository location.</li>
        <li>Expand HEAD and select the folders that you want to add as projects 
          to the Workbench. </li>
        <li>Select one of the following from the menu for the selected folders: 
          <ul>
            <li><strong>Check Out</strong> to check out each of the selected folders 
              as a project in the local workspace with the same name as the folder 
              in the repository.</li>
            <li><strong> Check Out As... </strong>to check out the selected folders 
              into a custom configured project in the local workspace. </li>
          </ul>
        </li>
      </ol></td>
  </tr>
  <tr> 
    <td>Synchronizing with the Repository and Updating or Commiting changes</td>
    <td><ol>
        <li>In the Navigator view, select the resources that you want to synchronize.</li>
        <li> Right click and select <strong>Team &gt; Synchronize with Repository</strong>. 
        </li>
        <li>In the Synchronize view, right-click the resource and select one of 
          the following: 
          <ul>
            <li><strong>Commit</strong>, if you want to override the existing 
              CVS version of the resource and save your version to the repository.</li>
            <li><strong>Update</strong>, if you want to update your workspace 
              with the version stored within the repository.
            </li>
          </ul>
        </li>
      </ol></td>
  </tr>
</table>
<p>
   <a href="notices.html"><img src="cpy.png" border="0" alt="Legal notices" ></a>
</p>

</BODY>
</HTML>