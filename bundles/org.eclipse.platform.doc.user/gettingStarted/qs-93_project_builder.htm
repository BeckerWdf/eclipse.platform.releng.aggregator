<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Creating a project builder Ant buildfile</title>

</HEAD>
<BODY BGCOLOR="#ffffff">
<h4>Creating a project builder Ant buildfile</h4>
<P CLASS="Para">To see how project builders work, we will create a simple project 
  with a single source file and an Ant buildfile that jars up the single class file. 
  Though this example uses Java, it should be noted that project builders are 
  available for all projects, Java or otherwise.</P>
<ol>
  <li>Create a Java project named 'HW'.</li>
  <li>Create a Java source file named 'HelloWorld' with a main method.</li>
  <li>Put a single 'System.out.println()' statement in the main method, and make 
    it print a greeting of your choice.</li>
  <li>Save changes.</li>
  <li>Create a file named 'projectBuilder.xml', open the Ant editor on it, enter 
    the following content, and save changes.<br>
    <img src="../images/Image609_project_builder.gif" alt="Content of projectBuilder.xml file" border="0" width="637" height="184"> 
  </li>
  <li>In the Navigator, select the HW project and choose <b>Properties</b> from its 
    context menu.</li>
  <li>In the project properties dialog, select <b>External Tools Builders</b>, then 
    click <b>New...</b>.<br>
  </li>
  <li>In the 'Choose configuration type' dialog, make sure 'Ant build' is selected, 
    and click <b>OK</b>. </li>
  <li>The External Tools dialog appears.Set the name to 'Makejar'. In the Main 
    tab, use the first <b>Browse Workspace...</b> button to set the <b>Location</b> to be 
    the projectBuilder.xml buildfile created above. Then use the second <b>Browse Workspace...</b> 
    button to set the Base Directory to be the HW project.<br>
    <img src="../images/Image611_et_main_tab.gif" alt="Main tab of External tools dialog" border="0" width="470" height="576"> </li>
  <li>In the <b>Refresh</b> tab, we want to be sure that when our HelloWorld.jar is created, 
    we see it in Eclipse. By default, no refreshing is done when a project builder 
    finishes running, so check <b>Refresh resource after running tool</b>, then select 
    <b>${project}</b> in the list of scope variables. Because refreshing can be expensive, 
    you should in general refresh the smallest entity that contains all resources 
    that will be affected by your buildfile. <br>
    <img src="../images/Image612_et_refresh_tab.gif" alt="Refresh tab of External tools dialog" border="0" width="422" height="485"> 
  </li>
  <li>In the <b>Targets</b> tab, the default target should be selected.</li>
  <li>In the <b>Build Options</b> tab, you can specify when this project builder is executed. 
    By default, this is set to full builds and incremental builds. Running your 
    project builder during auto builds is possible, though not recommended because 
    of performance concerns.<br>
    <img src="../images/Image610_et_options_tab.gif" alt="Build options tab of External tools dialog" border="0" width="422" height="485"> 
  </li>
  <li>Apply the changes and click <b>OK</b>.</li>
  <li>Back in the project properties dialog, you will now see a project builder 
    named 'Makejar' that is set to run after the default Java Builder. Note that 
    you can change the order so that your Ant buildfile runs before the Java builder, 
    though that wouldn't make sense in this example. Click <b>OK</b> to save the project 
    builder and close the dialog.<br>
    <img src="../images/Image613_project_properties.gif" alt="Project properties dialog" border="0" width="548" height="415"> 
  </li>
</ol>
<p>For a Java project, the default Java Builder will always be run and cannot 
  be removed. The Java Builder runs the internal Eclipse Java compiler which in 
  turn is reponsible for indexing your source so that searching, refactoring and 
  many other features are available. Thus it is not possible to replace the internal 
  Eclipse Java compiler by using a project builder. Your only option with the 
  Java Builder is when it runs with respect to the project builders that you define.</p>


<P><br>
<a href="../hglegal2003.htm">
<img src="../images/ngibmcpy2003.gif" alt="Copyright IBM Corporation 2000, 2003. All Rights Reserved." border="0" width="324" height="14"></a>
</P>

</BODY>
</HTML>