<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Editing Ant buildfiles</title>

</HEAD>
<BODY BGCOLOR="#ffffff">
<h3>Editing Ant buildfiles</h3>
<P CLASS="Para">Because Ant buildfiles are simple text files, any text editor 
  can be used to edit them. But there are several advantages to using the Eclipse 
  Ant editor, including syntax coloring, content assist and an outline view. To 
  get familiar with the Eclipse Ant editor, create a simple Ant buildfile using 
  this editor.</P>
<ol>
  <li>Create an Ant buildfile called HelloWorld.xml.</li>
  <li>Open the Ant editor on the file by selecting <b>Open With &gt; Ant Editor</b> 
    from the file's context menu. <br>
    <strong>Note:</strong> The default editor for a .xml file is a simple text 
    editor, but this can be changed in the <b>Window &gt; Preferences &gt; Workbench 
    &gt; File Associations</b>. </li>
  <li>Enter the following content in the editor. <br>
    <br>
    <p> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</p>
    <br>
    <p>&lt;project name=&quot;Hello World&quot; default=&quot;Hello&quot; basedir=&quot;.&quot;&gt;</p>
    <blockquote> 
      <p>&lt;property name=&quot;Hello Text&quot; value=&quot;Hello&quot;/&gt;</p>
      <p>&lt;target name=&quot;Hello&quot;&gt;</p>
      <blockquote> 
        <p>&lt;echo&gt;${HelloText}&lt;/echo&gt;</p>
      </blockquote>
    </blockquote>
    <blockquote> 
      <p>&lt;/target&gt;</p>
    </blockquote>
    <p>&lt;/project&gt; </p>
    <p>&nbsp;</p>
    <p><img src="../images/Image600_editor_first_targe.gif" alt="HelloWorld file content" border="0" ></p>
  </li>
  <li>Notice the syntax coloring for property values.</li>
  <li>Begin to enter a second target by typing '&lt;tar', then hit Ctrl-Space 
    to activate content assist. A list of valid completions is presented. In this 
    case there is only one, the &lt;target&gt; tag. Select this completion and 
    notice that the editor inserts both the opening and closing tags and leaves 
    the cursor positioned to enter properties for this tag.</li>
  <li>Name this target 'World'.</li>
  <li>Enter an 'echo' task for this target similar to that for the Hello target, 
    but change the text to 'World'.</li>
  <li>Save the changes to HelloWorld.xml.</li>
  <li>Make the Outline view visible and notice that there are entries for each 
    property and each target. In addition, each task under a target has an entry.<br>
    <img src="../images/Image601_outline_hello.gif" alt="Outline view for an Ant buildfile" border="0" ></li>
  <li>Clicking on an entry in the Outline view will scroll the editor to that 
    entry. In addition, when the Outline view has focus, typing a character will 
    move the selection in the Outline view to the next visible entry beginning 
    with that character.</li>
  <li>Position the cursor just past the end of one of the '&lt;target&gt;' tags, 
    type '&lt;tar', then hit Ctrl-Space to activate content assist. Notice that 
    now the only valid completion is the 'tar' tag. This is because the Ant editor 
    knows that nested targets are not allowed. Previously, when the content assist 
    was used to create a target tag, the editor knew that a tar task was not allowed 
    outside of a target.<br>
    <img src="../images/Image602_tar_assist.gif" alt="Code assist in Ant editor" border="0"> 
  </li>
  <li>Close the editor and do not save changes.</li>
</ol>


<p>
   <a href="../notices.html"><img src="../cpy.gif" border="0" alt="Legal notices" ></a>
</p>

</BODY>
</HTML>
