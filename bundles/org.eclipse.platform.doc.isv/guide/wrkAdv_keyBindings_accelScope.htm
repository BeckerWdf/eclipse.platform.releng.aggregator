<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
Scopes
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<h3>Scopes</h3>


<p>A <b> scope</b> is used to define the appropriate context for a key binding.&nbsp; The workbench defines two
key binding scopes:</p>


<ul>
  <li><b>Global scope</b> means a key binding is appropriate throughout the
    workbench UI.</li>
  <li><b>Text editor </b>scope means the key binding is only appropriate while a
    text editor is active.</li>
</ul>
<p>The scope dictates when a key binding (in the active key configuration) is considered active.&nbsp; The scope is declared in the
key binding markup:</p>


<pre><font color="#4444CC">...
&lt;keyBinding
       string=&quot;Ctrl+S&quot;
       <b>scope=&quot;org.eclipse.ui.globalScope&quot;
</b>       command=&quot;org.eclipse.ui.file.save&quot;
       configuration=&quot;org.eclipse.ui.defaultAcceleratorConfiguration&quot;&gt;
&lt;/keyBinding&gt;
...
&lt;keyBinding
       string=&quot;Ctrl+X Ctrl+S&quot;
       <b>scope=&quot;org.eclipse.ui.globalScope&quot;
</b>       command=&quot;org.eclipse.ui.file.save&quot;
       configuration=&quot;org.eclipse.ui.emacsAcceleratorConfiguration&quot;&gt;
&lt;/keyBinding&gt;
</font></pre>


<p>How is the current scope determined?&nbsp; By default, the workbench operates
in a global scope.&nbsp; When a text editor becomes active, it is responsible
for resetting the scope to the text editor scope.&nbsp; This is all handled by
the workbench and text editor code.&nbsp; Most plug-ins need only determine the
appropriate scope for their key bindings when defining them.&nbsp;&nbsp;</p>


<h4>Defining new scopes </h4>


<p>When a plug-in defines a key binding, it usually assigns it to an
existing scope.&nbsp;&nbsp; However, if your plug-in defines a new
style of editor, it's possible that you'll also want to introduce a new scope
for key bindings.&nbsp; For example, a multi-page editor may have different
scopes for each page in the editor.&nbsp;&nbsp;</p>


<p>When you define your own scope, it is up to your plug-in to ensure that the
proper scopes are set into the <a href="../reference/api/org/eclipse/ui/IKeyBindingService.html"><b>IKeyBindingService</b></a>
as appropriate for your editor.&nbsp; A complete discussion of how this works is
beyond the scope (pun intended!) of this documentation.&nbsp; Refer to <a href="../reference/api/org/eclipse/ui/IKeyBindingService.html"><b>IKeyBindingService</b></a>
and its implementors for more detail.&nbsp;&nbsp;</p>


<p>Plug-ins define their scopes inside (where else?) the <b><a href="../reference/extension-points/org_eclipse_ui_commands.html">org.eclipse.ui.commands</a></b>
extension point.&nbsp; The workbench markup for the global and text editor
scopes is located at the bottom of the extension definition:</p>


<pre><font color="#4444CC">&lt;extension
         point=&quot;org.eclipse.ui.commands&quot;&gt;
      ...
      &lt;scope
            name=&quot;%scope.global.name&quot;
            description=&quot;%scope.global.description&quot;
            <b>id=&quot;org.eclipse.ui.globalScope&quot;</b>&gt;
      &lt;/scope&gt;
      &lt;scope
            name=&quot;%scope.text.name&quot;
            parent=&quot;org.eclipse.ui.globalScope&quot;
            description=&quot;%scope.text.description&quot;
            <b>id=&quot;org.eclipse.ui.textEditorScope&quot;</b>&gt;
      &lt;/scope&gt;
   &lt;/extension&gt;</font></pre>


<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corp. and others 2000,2002." width="250" height="12"></a></p>
</BODY>
</HTML>
