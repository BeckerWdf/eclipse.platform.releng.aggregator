<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
Events
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H3>
Events</H3>

<P >
Once we create a display and some widgets, and start up the application's message
loop, where does the real work happen? It happens every time an event is read from the queue and dispatched to
a widget. Most of the application logic is implemented as responses to user events.</P>
<P >
The basic pattern is that you add a listener to some widget that you have created, and when the appropriate event occurs
the listener code will be executed. This simple example is adapted from
<strong>org.eclipse.swt.examples.helloworld.HelloWorld3</strong>:</P>
<font color='#4444CC'><pre>
   Display display = new Display ();
   Shell shell = new Shell (display);
   Label label = new Label (shell, SWT.CENTER);
   ...
   shell.addControlListener (new ControlAdapter () {
      public void controlResized (ControlEvent e) {
         label.setBounds (shell.getClientArea ());
      }
   });
</pre></font>
<P >
For each type of listener, there is an interface that defines the listener (<em>Xyz</em><strong>Listener</strong>), a class that provides event information
(<em>Xyz</em><strong>Event</strong>), and an API method to add the listener (<strong>add</strong><em>Xyz</em><strong>Listener</strong>).&nbsp;
If there is more than one method defined in the listener interface then an adapter
(<em>Xyz</em><strong>Adapter</strong>) that implements the listener interface and provides empty methods
is provided as well. All of the events, listeners, and adapters are defined in the package
<strong><a href="../reference/api/org/eclipse/swt/events/package-summary.html">org.eclipse.swt.events</a></strong>.</P>
<P >
The following table summarizes the events that are available and the widgets
that support each event.</P>
<TABLE BORDER="1" width="597">
<TR>
<TH ROWSPAN="1" COLSPAN="1" width="101">
<P CLASS="CellHeading">
Event Type</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1" width="224">
<P CLASS="CellHeading">
Description</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1" width="250">
<P CLASS="CellHeading">
Widgets</P>
</TH>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Arm</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when a widget, such as a menu item, is armed.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
MenuItem</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Control</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when a control is moved or resized.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>Control</strong>, <strong>TableColumn</strong>, <strong> Tracker</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Dispose</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when a widget is disposed, either programmatically or by the user.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
Widget</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Focus</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when a control gains or loses focus.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
Control</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Help</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when the user requests help for a widget, such as pressing the F1 key.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>Control</strong>, <strong>Menu</strong>, <strong> MenuItem</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Key</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when the user presses or releases a keyboard key when the control has
keyboard focus.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
Control</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Menu</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when a menu is hidden or shown.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
Menu</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Modify</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when a widget's text is modified.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
CCombo</strong>, <strong>Combo</strong>, <strong>Text</strong>, <strong> StyledText</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Mouse</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when the user presses, releases, or double clicks the mouse over the
control.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
Control</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
MouseMove</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated as the user moves the mouse across the control.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
Control</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
MouseTrack</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when the mouse enters, exits, or hovers over the control.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
Control</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Paint</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when the control needs to be repainted.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
Control</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Selection</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when the user selects an item in the control.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>Button</strong>, <strong>CCombo</strong>, <strong>Combo</strong>, <strong>CoolItem</strong>, <strong>CTabFolder</strong>, <strong>List</strong>,
<strong> MenuItem</strong>, <strong>Sash</strong>, <strong>Scale</strong>, <strong> ScrollBar</strong>, <strong>Slider</strong>, <strong> StyledText</strong>,
<strong> TabFolder</strong>, <strong>Table</strong>, <strong>Table Cursor</strong>,&nbsp; <strong>TableColumn</strong>, <strong> TableTree</strong>,
<strong>Text</strong>, <strong>ToolItem</strong>, <strong> Tree</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Shell</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when a shell is minimized, maximized, activated, deactivated, or
closed.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
Shell</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Traverse</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when a control is traversed by the user using keystrokes.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>
Control</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Tree</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when the user expands or collapses items in the tree.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>Tree</strong>, <strong> TableTree</strong></P>
</TD>
</TR>
<TR>
<TD width="101">
<P CLASS="CellBody">
<strong>
Verify</strong></P>
</TD>
<TD width="224">
<P CLASS="CellBody">
Generated when a widget's text is about to be modified. Gives the application a chance to alter the text or prevent the modification.</P>
</TD>
<TD width="250">
<P CLASS="CellBody">
<strong>Text</strong>, <strong> StyledText</strong></P>
</TD>
</TR>
</TABLE>

<H4>
Untyped events</H4>
<P >
The typed event system described above is implemented with a low level, untyped widget event mechanism. This mechanism is not intended to be used by applications, but you will see it used inside of the SWT implementation. It is also used in many of the workbench wizard page implementations.</P>
<P >
The untyped mechanism relies on a constant to identify the event type and defines a generic listener that is supplied with this constant. This allows the listener to implement a &quot;case style&quot; listener. In the following snippet, we define a generic event handler and add several listeners to a shell.</P>
<font color='#4444CC'><pre>
   Shell shell = new Shell ();
   Listener listener = new Listener () {
      public void handleEvent (Event e) {
         switch (e.type) {
            case SWT.Resize:
               System.out.println (&quot;Resize received&quot;);
               break;
            case SWT.Paint:
               System.out.println (&quot;Paint received&quot;);
               break;
            default:
               System.out.println (&quot;Unknown event received&quot;);
         }
      }
   };
   shell.addListener (SWT.Resize, listener);
   shell.addListener (SWT.Paint, listener);
</pre></font>

<p><a href="../notices.html"><img border="0" src="../cpy.gif" alt="Legal notices." border="0" ></a></p>

</BODY>
</HTML>
