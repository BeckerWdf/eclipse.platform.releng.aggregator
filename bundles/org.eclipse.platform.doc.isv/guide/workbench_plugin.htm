<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="isvGuide.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
The plug-in class
</TITLE>

<link rel="stylesheet" type="text/css" href="isvGuide.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H2>
The plug-in class</H2>
<P >
So far, we've been looking at the different extensions that are provided by the readme tool. Let's look at the general definition of the readme tool plug-in.</P>

<H3>
Plug-in definition</H3>
<P >
The readme tool plug-in is defined at the top of the <b> plugin.xml</b> file.</P>
<P class="Code">
&lt;plugin<br>
&nbsp;&nbsp;&nbsp;name = "Readme File Editing Tool"<br>
&nbsp;&nbsp;&nbsp;id = &quot;org.eclipse.ui.examples.readmetool&quot;<br>
&nbsp;&nbsp;&nbsp;version = "0.9"<br>
&nbsp;&nbsp;&nbsp;provider-name = "Object Technology International, Inc."<br>
&nbsp;&nbsp;&nbsp;class=&quot;org.eclipse.ui.examples.readmetool.ReadmePlugin&quot;&gt;<br>
<br>
&nbsp;&nbsp;&nbsp;&lt;requires><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;import plugin=&quot;org.eclipse.ui&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;import plugin=&quot;org.eclipse.core.resources&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&lt;/requires><br>
<br>
&nbsp;&nbsp;&nbsp;&lt;runtime><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;library name=&quot;readmetool.jar&quot;/&gt;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&lt;/runtime><br>
&lt;/plugin>
</P>
<P >
The plug-in definition includes the name, id, version, and vendor name of the plug-in. We saw these parameters before in our hello world plug-in. The readme tool also defines a specialized plug-in class,
<b>ReadmePlugin</b>. </P>
<P >
The workbench UI and resources plug-ins are listed as required plug-ins so that the platform will know that the readme tool is dependent on
them. </P>
<P >
Finally, the name of the jar file is provided. File names specified in a <b> plugin.xml</b> file are relative to the
plug-in's directory.</P>


<H3>
AbstractUIPlugin</H3>
<P >
The<b> ReadmePlugin</b> class represents the readme
tool plug-in and manages the life cycle of the plug-in.&nbsp; As we saw in the
Hello World example, you don't have to specify a plug-in class.&nbsp; The
platform will provide one for you.&nbsp; In this case, our plug-in needs to
initialize UI related data when it starts up.&nbsp; The platform class <a href="../reference/api/org/eclipse/ui/plugin/AbstractUIPlugin.html"><b>AbstractUIPlugin</b></a>
provides a structure for managing UI resources and is extended by <b>
ReadmePlugin</b>.</P>
<P >
<a href="../reference/api/org/eclipse/ui/plugin/AbstractUIPlugin.html"><b>AbstractUIPlugin</b></a>
 uses the generic startup and shutdown methods to manage images, dialog settings, and a preference store during the lifetime of the plug-in.&nbsp;
We'll look at the specifics of the <b> ReadmePlugin</b> class when we work with dialogs and preferences.</P>

<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" width="195" height="12"></a></p>

</BODY>
</HTML>
