<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta name="copyright"
	content="Copyright (c) IBM Corporation and others 2000, 2007. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">
<link rel="STYLESHEET" href="../book.css" charset="ISO-8859-1"
	type="text/css">
<script language="JavaScript"
	src="PLUGINS_ROOT/org.eclipse.help/livehelp.js"></script>
<title>Contributing a Search Dialog</title>
</head>
<body>

<h2>Contributing a Search Dialog</h2>
<p>We will now contribute a very basic search dialog to illustrate the steps needed to contribute a <a
	href="../reference/api/org/eclipse/ui/dialogs/FilteredItemsSelectionDialog.html">
<b> FilteredItemsSelectionDialog</b></a> implementation.</p>

<ol>
	<li>
	Create a class extending <em>org.eclipse.ui.dialogs.FilteredItemsSelectionDialog</em>.
	Let's name it <em>FilteredResourcesSelectionDialogExample</em>.
	</li>
	<li>
	Choose a source of  the resources which will be used during
	filtering. In our example we will generate our own set of resources as
	below:
	<pre>
	private static ArrayList resources = new ArrayList();
	
	static {
		
		generateRescourcesTestCases('A', 'C', 8, ""); //$NON-NLS-1$
		
		generateRescourcesTestCases('a', 'c', 4, ""); //$NON-NLS-1$
		
	}
	
	private static void generateRescourcesTestCases(char startChar, char endChar, int length, String resource){
		for (char ch = startChar; ch &lt;= endChar; ch++) {
			String res = resource + String.valueOf(ch);
			if (length == res.length()) 
				resources.add(res);
			else if ((res.trim().length() % 2) == 0)
					generateRescourcesTestCases(Character.toUpperCase((char)(startChar + 1)), Character.toUpperCase((char)(endChar + 1)), length, res);
				else 
					generateRescourcesTestCases(Character.toLowerCase((char)(startChar + 1)), Character.toLowerCase((char)(endChar + 1)), length, res);
		}
	}
		</pre></li>
	<li>
	Now, let's implement abstract methods from the <em>FilteredItemsSelectionDialog</em>
	class.
	<ul>
		<li><em>createExtendedContentArea(Composite)</em>: The method
		creates an extra content area located above the details. Due to the
		fact that it is supposed to be the simplest example we will return
		null for an extended area. This way there will be no extra field
		added. Eg.: <pre>
	protected Control createExtendedContentArea(Composite parent) {
		return null;
	}
		</pre></li>

		<li><em>createFilter()</em>: Creates a new instance of a filter.
		In the simplest implementation you should also extend <em>
		FilteredItemsSelectionDialog#ItemsFilter </em> and implement necessary
		methods. Eg.: <pre>
	protected ItemsFilter createFilter() {
		return new ItemsFilter() {
		
			public boolean matchItem(Object item) {
				return matches(item.toString());
			}
		
			public boolean isConsistentItem(Object item) {
				return true;
			}
		
		};
	}
		</pre></li>

		<li><em>
		fillContentProvider(FilteredItemsSelectionDialog.AbstractContentProvider,
		FilteredItemsSelectionDialog.ItemsFilter,
		org.eclipse.core.runtime.IProgressMonitor)</em>: Fills the content provider
		with matching items. Eg.: <pre>
	protected void fillContentProvider(AbstractContentProvider contentProvider,
			ItemsFilter itemsFilter, IProgressMonitor progressMonitor)
			throws CoreException {

		progressMonitor.beginTask("Searching", resources.size()); //$NON-NLS-1$
		
		for (Iterator iter = resources.iterator(); iter.hasNext();) {
			contentProvider.add(iter.next(), itemsFilter);
			progressMonitor.worked(1);
		}
		
		progressMonitor.done();
		
	}
		</pre></li>

		<li><em>getDialogSettings()</em>: Returns settings of the dialog.
		Returned object can't be null. Eg.:<pre>
	protected IDialogSettings getDialogSettings() {
		return new DialogSettings("TEST"); //$NON-NLS-1$
	}
		</pre></li>

		<li><em>getElementName(Object)</em>: Returns a name for the given
		object. It is used to check duplicates. Eg.: <pre>
	public String getElementName(Object item) {
		return item.toString();
	}
		</pre></li>

		<li><em>getItemsComparator()</em>: Returns a comparator used to
		sort items. Eg.: <pre>
	protected Comparator getItemsComparator() {
		return new Comparator() {
		
			public int compare(Object arg0, Object arg1) {
				return arg0.toString().compareTo(arg1.toString());
			}
		
		};
	}
		</pre></li>

		<li><em>validateItem(Object)</em>: Validates an item. Eg.: <pre>
	protected IStatus validateItem(Object item) {
		return new Status(IStatus.OK, WorkbenchPlugin.PI_WORKBENCH, 0, "", null); //$NON-NLS-1$
	}
		</pre></li>

	</ul>
	</li>

	<li>
	This is how the dialog should look:
	<p align="center"><img
		src="images/filteredResourcesSelectionDialogExample.png" border="0"
		alt="Screen shot of a simple search dialog"></p>
	</li>
</ol>
</body>
</html>
