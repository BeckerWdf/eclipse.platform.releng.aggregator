<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>Intro support</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">

<h3>
Intro support</h3>
<P >
Intro support is a set of extension points and workbench parts that allow plug-ins to define
specialized pages that introduce a platform product to new users.  The intro information is typically
shown the first time a product is started.  Intro support is typically configured at the product level,
although individual plug-ins can contribute intro information to known product intro configurations.</P>
<P>From a workbench point of view, the root of the intro support is in the <b>intro part</b>.  This
part is specified in an extension definition.  When the
workbench initializes, it creates an intro site that reserves space for the intro page.  The
intro part implementation for the site is determined using product configuration information.
Once an intro part is shown, it can move between two modes:
<ul>
<li>in <b>full mode</b>, the intro part takes over the main workbench area.</li>
<li>in <b>standby mode</b>, the intro part moves to the side, allowing the current perspective
to remain visible.</li>
</ul>
</p>
<p>Once an intro part is established, it must be configured with intro information.  This is done using
an <b>intro config</b> which is also contributed using an extension.  Individual plug-ins can add to the
basic product intro config using their own extensions.</p>
<p>We'll look at the platform SDK intro page as an example in order to better understand these 
concepts.</p>
<h4>Defining an intro part</h4>
<p>
The <a href="../reference/api/org/eclipse/ui/intro/IIntroPart.html"><b>IIntroPart</b></a> interface
and the <b><a href="../reference/extension-points/org_eclipse_ui_intro.html">org.eclipse.ui.intro</a></b>
extension point make up the generic mechanism that can be used to create your own intro support for
a given product.  The main purpose of this extension is to define the class that implements
<a href="../reference/api/org/eclipse/ui/intro/IIntroPart.html"><b>IIntroPart</b></a> and to
specify the binding between a product id and an intro part.  For example, the following contribution
defines a hypothetical intro part to be shown by the workbench on startup:
<pre><font color="#4444CC">
&lt;extension  
	point="org.eclipse.ui.intro"&gt;
	&lt;intro
		class="com.example.SampleIntroPart"
		id="someId"&gt;
		icon="someIcon.png"
	&lt;/intro>
	&lt;introProductBinding
		introId="someId"
		productId="com.example.someProductId"&gt;
	&lt;/introProductBinding&gt;
&lt;/extension>
</font></pre>
This contribution first defines the intro part and assigns it the id "someId".  It then binds this
intro part to a product whose id is "com.example.someProductId".  On platform startup, the class specified
in the <b>class</b> attribute will be instantiated by the workbench and presented to the user as the
introduction to the product.  This is the lowest level integration into the 
<a href="../reference/api/org/eclipse/ui/intro/IIntroPart.html"><b>IIntroPart</b></a>
interface.
</p>
<p>The platform supplies its own <a href="../reference/api/org/eclipse/ui/intro/IIntroPart.html"><b>IIntroPart</b></a>
implementation called <a href="../reference/api/org/eclipse/ui/intro/config/CustomizableIntroPart.html"><b>CustomizableIntroPart</b></a>
that allows for the content and presentation of the intro to be customized.  Below is the snippet that defines the intro part for the workbench.
We won't go over the mechanics of implementing an intro part since we want to focus on defining
the intro content.  (See the extension point documentation and javadoc referenced above for more detail
if you need it.)
<pre><font color="#4444CC">
&lt;extension  
	point="org.eclipse.ui.intro"&gt;
	&lt;intro
		class="org.eclipse.ui.intro.config.CustomizableIntroPart"
		id="org.eclipse.platform.intro"&gt;
	&lt;/intro>
	&lt;introProductBinding
		introId="org.eclipse.platform.intro"
		productId="org.eclipse.platform"&gt;
	&lt;/introProductBinding&gt;
&lt;/extension>
</font></pre>
The above contribution defines the 
<a href="../reference/api/org/eclipse/ui/intro/config/CustomizableIntroPart.html"><b>CustomizableIntroPart</b></a> as the
intro part to be used for the Eclipse SDK platform.  The rest of this discussion shows you how to use and extend
this part.
</p>
<h4>Using the CustomizableIntroPart</h4>
<p>The platform's <a href="../reference/api/org/eclipse/ui/intro/config/CustomizableIntroPart.html"><b>CustomizableIntroPart</b></a>
allows for the content and presentation of the intro to be customized using the
<b><a href="../reference/extension-points/org_eclipse_ui_intro_config.html">org.eclipse.ui.intro.config</a></b>
extension point.  (This intro config can be extended using the 
<b><a href="../reference/extension-points/org_eclipse_ui_intro_configExtension.html">org.eclipse.ui.intro.configExtension</a></b>
extension point.)  This structure allows product plug-in developers to focus on developing their intro content rather than
implementing an intro part scheme from scratch.  If a different intro class is specified, then these two extension points
are not utilized and the specified class must implement its own scheme for intro content format and configuration.
</p>
<h4>Defining an intro config</h4>
<p>
<b><a href="../reference/extension-points/org_eclipse_ui_intro_config.html">org.eclipse.ui.intro.config</a></b>
describes the id of the intro config that is to show our content, and the name of the
XML file that contains the specific definition for the intro content.  It is expected that only one
intro config should be defined for a given <a href="../reference/api/org/eclipse/ui/intro/config/CustomizableIntroPart.html"><b>CustomizableIntroPart</b></a>.
(Only the first intro config found can be shown in a
<a href="../reference/api/org/eclipse/ui/intro/config/CustomizableIntroPart.html"><b>CustomizableIntroPart</b></a>.)
<pre><font color="#4444CC">
&lt;extension   
	id="intro"
	point="org.eclipse.ui.intro.config"&gt;
	<b>&lt;config
		introId="org.eclipse.platform.intro"
		id="org.eclipse.platform.introConfig"
		content="$nl$/introContent.xml"&gt;</b>
	&lt;presentation
		home-page-id="root" standby-page-id="standby"&gt;
			&lt;implementation
 				ws="win32"
				style="css/shared.css"
				kind="html"
				os="win32"&gt;
			&lt;/implementation&gt;
			&lt;implementation
				kind="swt"&gt;
			&lt;/implementation&gt;
	&lt;/presentation&gt;
	&lt;/config&gt;
&lt;/extension&gt;  
</font></pre>
The path for the file is relative to the plug-in's directory.  (Note
the use of the <tt>$nl$</tt> variable in the directory name, which means the file will be located in a directory specific
to the national language of the target environment.)
</p>
<p>
The config extension allows you to specify both the content and the presentation of the content.
While the <b>content</b> element focuses on defining pages, the
<b>presentation</b> element describes presentation-related attributes that describe how
pages will be shown.  The page id for the intro home page (in <b>full mode</b>) must be specified,
and the standby page id (in <b>standby mode</b>) is optional.  The home page is the page that is shown when the product is first started.
A presentation can specify one or more <b>implementations</b> for showing the pages.  Implementations are specified
per platform and windowing system, allowing you to take advantage of platform-specific features for showing
page content. For example, the windows platform has a robust HTML browser widget, so an HTML-based implementation
is used for intro content.  Other platforms without this capability use an SWT-based implementation that maps
page descriptions to an SWT-based form.  An implementation that does not specify either a windowing system or operating system will be considered
the generic implementation; to ensure an intro is shown on all platforms, it is important to define
such an implementation.  The workbench will first look for an implementation that matches the current operating system and
windowing system.  If one cannot be found, it will choose the generic implementation.  Most of these details
are handled at the product configuration level, so we won't discuss them any further here.
</p>
<h4>Defining intro content</h4>
<p>
Now we can look at the content itself.  Content is described in terms of pages.  All pages have an <b>id</b> attribute.
This is the id that is used when defining the home and standby pages, and other places where there is a reference
to a page.  Otherwise, the relevant attributes depend on the kind of page that is defined.
There are two basic types of pages:
<ul>
<li><b>Static pages</b> are plain HTML files.  These pages use the normal HTML mechanisms to link to other
pages.  Static pages need not be defined in the config content file, except for the home page.  Since the home
page is specified by id (<b>home-page-id</b>) in the <b>presentation</b> element, there must be a page definition
using that id in the content file.  This page need only define a <b>url</b>.  All other subelements will be ignored
since the HTML page itself will describe the page content. All other HTML intro pages contributed by the plug-in
must be included with the plug-in, but do not need to be specified in the content file. HTML files located in other
plug-ins or on the web may be referenced also. </li>
<li><b>Dynamic pages</b> are described in the XML content file using subelements that describe the content of the
page.  The subelements are UI items often found in HTML-like pages.  Depending on the implementation, these pages
will either be dynamically translated to HTML (when the implementation <b>kind</b> is html) or else dynamically
created as SWT-based UI forms (when the implementation <b>kind</b> is swt).  The following subelements
can be defined in a page: 
<ul>
<li>A <b>group</b> is used to group other subelements and define a consistent style across the group.</li>
<li>A <b>link</b> defines a link that can be displayed using an image and text.  The link can navigate to another
page and optionally run an intro action.  Actions are specified as commands in the URL.</li>
<li>The <b>text</b> and <b>img</b> elements show text and image content.</li>
<li>The <b>include</b> element includes a previously defined subelement.  The element is referred to by its id.  </li>
<li>The <b>head</b> element defines additional HTML to be included in the head section of the page
when the html implementation is used. </li>
<li>The <b>html</b> element defines additional HTML to be included in the body of the page
when the html implementation is used.</li>
</ul>
A <b>title</b> for a page may also be defined.  A page may also specify that
its content is defined in a separate <b>content</b> file.  Breaking up pages into separate
files may be useful when performance is a concern, since an intro page's contents won't be initialized until needed.
</li>
</ul>
</p>
<p>
The best way to get a feel for the content definition format is to browse the implementations in the SDK.  The following
snippet shows just the first part of the content for the SDK root page, which is the first intro page shown.
<pre><font color="#4444CC">
&lt;introContent>
  &lt;page alt-style="css/root_swt.properties" style="css/root.css" id="root" style-id="page"&gt;
    &lt;title style-id="intro-header">Welcome to Eclipse Platform 3.0&lt;/title&gt;
    &lt;group id="links-background"&gt;
      &lt;group id="page-links"&gt;
        &lt;link label="Overview" url="http://org.eclipse.ui.intro/showPage?id=overview" id="overview" style-id="left"&gt;
          &lt;text&gt;Find out what Eclipse is all about&lt;/text&gt;
        &lt;/link&gt;
        &lt;link label="Tutorials" url="http://org.eclipse.ui.intro/showPage?id=tutorials" id="tutorials" style-id="left"&gt;
          &lt;text&gt;Let us guide you through Eclipse end-to-end tutorials&lt;/text&gt;
        &lt;/link&gt;
        &lt;link label="Samples" url="http://org.eclipse.ui.intro/showPage?id=samples" id="samples" style-id="right"&gt;
          &lt;text>Explore Eclipse development through code samples&lt;/text&gt;
        &lt;/link&gt;
        &lt;link label="Whats New" url="http://org.eclipse.ui.intro/showPage?id=news" id="news" style-id="right"&gt;
          &lt;text&gt;Find out what is new in this release&lt;/text&gt;
        &lt;/link&gt;
      &lt;/group&gt;
    &lt;/group&gt;
</font></pre>
</p>
<p>
Elements on a page can also be <b>filteredFrom</b> a particular implementation.  This allows page designers
to design with particular platforms in mind.  There are many more powerful attributes that 
can be used when describing a page and its contents.  See the extension point documentation for 
<b><a href="../reference/extension-points/org_eclipse_ui_intro_config.html">org.eclipse.ui.intro.config</a></b>
and its associated <a href="../reference/extension-points/introContentFileSpec.html">intro content file format specification</a> for a complete reference of 
valid elements, subelements, and their attributes.
</p>
<h4>Extending an intro config</h4>
<p>
An intro configuration can be extended in three ways:
<ul>
<li>content of an existing intro config can be extended.</li>
<li>a custom standby content part, such as Cheat Sheet, can be contributed to provide 
content for the standby area of the Intro part.</li>
<li>custom IntroURL actions can be defined.</li>
</ul>
</p>
<h5>Extending the content of an intro config</h5>
<p>
Plug-ins can contribute intro content to a page defined elsewhere.  However, the defining page must define an
<b>anchor</b> attribute that acts as a location placeholder for new content.  The SDK overview page defines
two anchors for adding JDT and PDE related elements on the overview page.
<pre><font color="#4444CC">    
&lt;group id="page-content">
	&lt;text style-id="page-title" id="page-title"&gt;OVERVIEW&lt;/text&gt;
	&lt;text style-id="page-description" id="page-description"&gt;Eclipse is a kind of universal tool platform - an open extensible IDE for anything and nothing in particular. It provides a feature-rich development environment that allows the developer to efficiently create tools that integrate seamlessly into the Eclipse Platform.&lt;/text&gt;
	&lt;group id="overview-links"&gt;
		&lt;link label="Workbench basics" url="http://org.eclipse.ui.intro/showHelpTopic?id=/org.eclipse.platform.doc.user/concepts/concepts-2.htm" id="basics"&gt;
			&lt;text>Learn about basic Eclipse workbench concepts&lt;/text&gt;
        &lt;/link&gt;
        &lt;link label="Team support" url="http://org.eclipse.ui.intro/showHelpTopic?id=/org.eclipse.platform.doc.user/concepts/concepts-26.htm" id="team"&gt;
			&lt;text&gt;Find out how to collaborate with other developers&lt;/text&gt;
        &lt;/link&gt;
		<b>&lt;anchor id="jdtAnchor"/&gt;
		&lt;anchor id="pdeAnchor"/&gt;</b>
	&lt;/group&gt;
&lt;/group&gt;
</font></pre>
These anchors can be referenced by plug-ins that add content to the page.  Content is added using the
<b><a href="../reference/extension-points/org_eclipse_ui_intro_configExtension.html">org.eclipse.ui.intro.configExtension</a></b>
extension.  In addition to extending page content, this extension point also allows one to contribute standby content
parts and custom actions.
</p>
<p>
To extend an existing intro config, you can use the <b>configExtension</b> element.  In this element,
you specify the <b>configId</b> of the intro config being extended and the <b>content</b> file that describes the new
content.
<pre><font color="#4444CC"> 
&lt;extension
	point="org.eclipse.ui.intro.configExtension"&gt;
	&lt;configExtension
		configId="org.eclipse.platform.introConfig"
		content="$nl$/overviewExtensionContent.xml"/&gt;  
    ...
&lt;/extension&gt;
</font></pre>
The format of the content file is similar to that of the intro config content, except that it must
contain an <b>extensionContent</b> element that defines the path to the anchor where the extension content
should be inserted.
<pre><font color="#4444CC"> 
&lt;introContent&gt;
	&lt;extensionContent alt-style="css/swt.properties" style="css/overview.css" <b>path="overview/page-content/overview-links/jdtAnchor"</b>&gt;
		&lt;link label="Java development" url="http://org.eclipse.ui.intro/showHelpTopic?id=/org.eclipse.jdt.doc.user/gettingStarted/qs-BasicTutorial.htm" id="java"&gt;
			&lt;text&gt;Get familiar with developing Java programs using Eclipse&lt;/text&gt;
		&lt;/link&gt;
	&lt;/extensionContent&gt;
&lt;/introContent&gt;
</font></pre>
After contributing custom content to an intro's predefined anchor points, a given product can bind itself to that
intro using the <b><a href="../reference/extension-points/org_eclipse_ui_intro.html">org.eclipse.ui.intro</a></b>
discussed above.  When the product is run, the intro that was extended will be shown with the additional
content.  This allows the product to have its own branding and other product-specific information, while reusing
a closely related product's intro along with key content of its own.
</p>
<p>A given intro could also selectively include pieces of a related product's intro.  In this case, the product could define its
own intro and intro config, and then reference important elements defined in another intro's config
using an <b>include</b> in the content file.  This mechanism is valuable in situations where related products
are built on top of one another and it is necessary to introduce users to key concepts in the higher level
products.</p>
<h5>Contributing a standby content part</h5>
<p>
Plug-ins can also implement a part for displaying alternative content when the intro page is in standby mode.  For
example, the platform defines a standby part that will show a cheat sheet for related intro content.  The part is launched using a page
link with a specialized URL.  Standby parts are launched using a URL containing a special command for showing
a standby part, such as <tt>http://org.eclipse.ui.intro/showStandby?partId=somePartId</tt>.
The part is defined in the <b>standbyContentPart</b> subelement in the 
<b><a href="../reference/extension-points/org_eclipse_ui_intro_configExtension.html">org.eclipse.ui.intro.configExtension</a></b>
extension. An <b>id</b>, <b>pluginId</b>, and <b>class</b> must be specified for the part.  The class must implement
<a href="../reference/api/org/eclipse/ui/intro/config/IStandbyContentPart.html"><b>IStandbyContentPart</b></a>.
The following snippet shows how the platform defines a standby part for showing cheat sheets.
<pre><font color="#4444CC"> 
&lt;extension point="org.eclipse.ui.intro.configExtension"&gt;
	&lt;standbyContentPart
		id="org.eclipse.platform.cheatsheet"
		class="org.eclipse.platform.internal.CheatSheetStandbyContent"
		pluginId="org.eclipse.platform"/&gt;
&lt;/extension&gt;
</font></pre>
This cheat sheet could be launched from an intro page using a <b>link</b> subelement whose
URL is <tt>http://org.eclipse.ui.intro/showStandby?partId=org.eclipse.platform.cheatsheet&amp;input=org.eclipse.pde.helloworld</tt>.
This IntroURL would launch the org.eclipse.platform.cheatsheet standby content part and set its input to
"org.eclipse.pde.helloworld".  The detailed mechanics for implementing a standby part are beyond the scope
of this discussion.   See <a href="../reference/api/org/eclipse/ui/intro/config/IStandbyContentPart.html"><b>IStandbyContentPart</b></a>
and its related classes for more information.
</p>
<h5>Defining a custom IntroURL action</h5>
<p>
Using the <b><a href="../reference/extension-points/org_eclipse_ui_intro_configExtension.html">org.eclipse.ui.intro.configExtension</a></b>
extension point, plug-ins can contribute their own custom actions that can be used as a <b>url</b> value for a link element in a page.
For example, consider the following link:
</p>
<p><tt>http://org.eclipse.ui.intro/runAction?pluginId=org.eclipse.pde.ui&amp;class=org.eclipse.pde.ui.internal.samples.ShowSampleAction&amp;id=org.eclipse.sdk.samples.swt.examples</tt></p>
<p>This IntroURL will run an action class called <b>ShowSampleAction</b>, which is in a package "org.eclipse.pde.ui.internal.samples" in the plug-in
"org.eclipse.pde.ui".  The id of the sample to run is "org.eclipse.sdk.samples.swt.examples".
</p>
<p>To define a custom version of this intro URL, you can use the following markup:
<pre><font color="#4444CC"> 
&lt;extension point="org.eclipse.ui.intro.configExtension"&gt;
	&lt;action
		name="myCommand"
		<b>replaces="runAction?pluginId=org.eclipse.pde.ui&amp;class=org.eclipse.pde.ui.internal.samples.ShowSampleAction"</b>&gt;
	&lt;/action&gt;
&lt;/extension&gt;
</font></pre>
With the above extension you can now use the following URL to run the same action:</p>
<p><tt>http://org.eclipse.ui.intro/myCommand?id=org.eclipse.sdk.samples.swt.examples</tt></p>
<p>
The action "myCommand" will be replaced by the value of the <b>replaces</b> attribute and any remaining URL
parameters will be appended to the end.  Once the substitution is made, the resulting URL will be expanded back into:</p>
<p><tt>http://org.eclipse.ui.intro/runAction?pluginId=org.eclipse.pde.ui&amp;class=org.eclipse.pde.ui.internal.samples.ShowSampleAction&amp;id=org.eclipse.sdk.samples.swt.examples</tt></p>

<p><a href="../notices.html"><img border="0" src="../cpy.png" alt="Legal notices." border="0" ></a></p>

</BODY>
</HTML>
