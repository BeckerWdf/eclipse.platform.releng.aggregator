<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>org.eclipse.ui.actionSets</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H3>
org.eclipse.ui.actionSets</H3>

<P >
Your plug-in can contribute menus, menu items, and tool bar items to the workbench menus and toolbar using the
<a href="../reference/extension-points/org_eclipse_ui_actionSets.html"><b> org.eclipse.ui.actionSets</b></a> 
extension point. In order to reduce the clutter of having every plug-in's menu contributions shown at once, the contributions are grouped into action sets which can be made visible by user preference.</P>
<P >
You can see which action sets have been contributed to your workbench by choosing
<b>Window-&gt;Customize Perspective...</b> from the workbench menu. This will show you a dialog that lists
the shortcuts and action sets that are available to the current
perspective.&nbsp; Action sets are listed under <b>Other</b>.&nbsp; A checkmark by the action set means that the menu and tool bar actions are visible in the workbench. You can select the name of the action set to see the list of available actions on the right. The figure below shows the
list of action sets available in our workbench.&nbsp; (Your workbench may look different depending on which plug-ins you have
installed and which perspective is active.)</P>

<img border="0" src="images/actionsets.jpg" width="669" height="450">


<P >
The readme tool uses an action set to contribute several different &quot;Open Readme
Browser&quot; actions to the workbench menu.&nbsp; (We contributed a similar
action to the popup menu of the resource navigator.)&nbsp; The markup follows:</P>
<font color='#4444CC'><pre>
&lt;extension point = &quot;org.eclipse.ui.actionSets&quot;&gt;
	   &lt;actionSet id=&quot;org_eclipse_ui_examples_readmetool_actionSet&quot;
		   label=&quot;%ActionSet.name&quot;
		   visible=&quot;true&quot;&gt;
		   &lt;menu id=&quot;org_eclipse_ui_examples_readmetool&quot;
			   label=&quot;%ActionSet.menu&quot;
			   path=&quot;window/additions&quot;&gt; 
			   &lt;separator name=&quot;slot1&quot;/&gt;
			   &lt;separator name=&quot;slot2&quot;/&gt;
			   &lt;separator name=&quot;slot3&quot;/&gt;
		   &lt;/menu&gt;
		   &lt;action id=&quot;org_eclipse_ui_examples_readmetool_readmeAction&quot;
			   menubarPath=&quot;window/org_eclipse_ui_examples_readmetool/slot1&quot;
			   toolbarPath=&quot;readme&quot;
			   label=&quot;%ReadmeAction.label&quot;
			   tooltip=&quot;%ReadmeAction.tooltip&quot;
			   helpContextId=&quot;org.eclipse.ui.examples.readmetool.open_browser_action_context&quot;
			   icon=&quot;icons/ctool16/openbrwsr.gif&quot;
			   class=&quot;org.eclipse.ui.examples.readmetool.WindowActionDelegate&quot;
			   enablesFor=&quot;1&quot;&gt;
			   &lt;selection class=&quot;org.eclipse.core.resources.IFile&quot;
					name=&quot;*.readme&quot;&gt;
			   &lt;/selection&gt;
		   &lt;/action&gt;
		   ...
	   &lt;/actionSet&gt;
   &lt;/extension&gt;</pre></font>
<P >
Wow, there's a lot going on here!&nbsp; Let's take it a step at a time, looking
only at the first action.&nbsp;&nbsp;</P>
<P >
First, the action set is declared and given a <b>label</b>.&nbsp;
The label &quot;ReadMe Actions&quot; (defined for <b> %ActionSet.name</b> in the plug-in's
properties file) is used to display the action set in the
dialog shown above.&nbsp; Since we set <b> visible</b> to true, the workbench will initially have the action set
check marked in the action set list and the actions will be visible.</P>
<P >
The rest of the action set declaration is concerned with defining the menu in
which the actions appears and the actions themselves.</P>
<P >
We define a menu whose <b>label</b> appears in the workbench menus.&nbsp; The menu's <b>path</b>
tells the workbench to place the new menu in the <b>additions</b>
slot of the <b>window</b> menu.&nbsp; (For a discussion
of menu paths and slots, see <a HREF="workbench_menupaths.htm" CLASS="XRef"> Menu and toolbar paths</a>.)&nbsp;
We define some slots in our new menu that can be used to insert actions in
specific locations in our menu.</P>
<P >
This alone is enough to cause the menu to appear in the workbench <b>Window</b>
menu.</P>
<P >
<img border="0" src="images/readmeactionset.jpg" width="229" height="329"></P>
<P >
Next, we define the actions themselves.&nbsp;&nbsp;</P>
<P >
The action definition (<b>id</b>,
<b>label</b>, <b>icon</b>, <b>class</b>) is
similar to the other actions we've seen in views, editors, and popups.&nbsp;
We'll focus here on what's different:&nbsp; where does the action go?&nbsp; We
use&nbsp; <b>menubarPath</b> and <b>toolbarPath</b>
to indicate the location.&nbsp; First, we set the <b>menubarPath</b> to add the actions to a slot in the menu
that we just defined (&nbsp;<b>&quot;window/org_eclipse_ui_examples_readmetool/slot1&quot;</b>).</P>
<P >
<img border="0" src="images/readmeactionsetmenu.jpg" width="569" height="75"></P>
<P >
Then, we define a new <b> toolbarPath</b> to insert our actions in the workbench tool
bar.&nbsp; Since we've defined a new tool path, <b>&quot;readme&quot;</b>, the workbench will decide where it goes
relative to other plug-in's toolbar contributions.</P>
<P >
<img border="0" src="images/readmeactionsettoolbar.jpg" width="248" height="55"></P>
<P >
What happens when the action is selected by the user?&nbsp; Most actions in an
action set are locally implemented.&nbsp; That is, they are implemented by the
plug-in that defines the action, using the class specified in the <b>class</b>
attribute.&nbsp; The <b>readmeAction</b> is defined this way.&nbsp;&nbsp;</P>
<P >
The action <b> class</b> must implement
<b><a href="../reference/api/org/eclipse/ui/IWorkbenchWindowActionDelegate.html"> IWorkbenchWindowActionDelegate</a></b>,
or
<b><a href="../reference/api/org/eclipse/ui/IWorkbenchWindowPulldownDelegate.html"> IWorkbenchWindowPulldownDelegate</a></b> 
if the action set is shown as a pull-down in a tool bar.&nbsp; Since we are not
creating a tool bar pull-down, we provide <b>WindowActionDelegate</b>.&nbsp;
This class is similar to <b>ObjectActionDelegate</b>.&nbsp;
It launches the readme sections dialog when the user chooses the action.&nbsp;
We'll see the sections dialog in <a href="dialogs_applications.htm">Application
dialogs</a>.</P>


<P >
This action also supplies enabling conditions for its menu item and tool bar
item.&nbsp; They will only be enabled when a single (<b>enablesFor=&quot;1&quot;</b>)
readme file (<b>selectionClass =&quot;org.eclipse.core.resources.IFile&quot;
name=&quot;*.readme&quot;</b>) is selected.&nbsp; This action's menu and toolbar
item appear and enable based solely on the markup
in the <b>plugin.xml</b> file.&nbsp; None of the
plug-in code will execute until the user chooses the action and the workbench
runs the action <b>class</b>.</P>


<P >
<b>Retargeted actions</b></P>


<P >Occasionally, a plug-in defines an action that may be implemented
differently by different parts.&nbsp; This is called a retargeted action.&nbsp;
The readme markup includes two actions that are retargeted, <b>readmeRetargetAction</b>
and <b>readmeRetargetRelabelAction</b>.</P>


<pre ><font color='#4444CC'>...
&lt;action id=&quot;org_eclipse_ui_examples_readmetool_readmeRetargetAction&quot;
   menubarPath=&quot;window/org_eclipse_ui_examples_readmetool/slot1&quot;
   toolbarPath=&quot;readme&quot;
   label=&quot;%ReadmeRetargetAction.label&quot;
   tooltip=&quot;%ReadmeRetargetAction.tooltip&quot;
   helpContextId=&quot;org.eclipse.ui.examples.readmetool.open_browser_action_context&quot;
   icon=&quot;icons/ctool16/openbrwsr.gif&quot;
   <b>retarget=&quot;true&quot;</b>&gt;
&lt;/action&gt;
&lt;action id=&quot;org_eclipse_ui_examples_readmetool_readmeRelabelRetargetAction&quot;
   menubarPath=&quot;window/org_eclipse_ui_examples_readmetool/slot1&quot;
   toolbarPath=&quot;readme&quot;
   label=&quot;%ReadmeRelabelRetargetAction.label&quot;
   tooltip=&quot;%ReadmeRelabelRetargetAction.tooltip&quot;
   helpContextId=&quot;org.eclipse.ui.examples.readmetool.open_browser_action_context&quot;
   icon=&quot;icons/ctool16/openbrwsr.gif&quot;
   <b>retarget=&quot;true&quot;	</b>
   <b>allowLabelUpdate=&quot;true&quot;</b>&gt;
&lt;/action&gt;
...
</font></pre>


<P >Retargeted actions do not specify an implementing class.&nbsp; Instead, any
part that wants to implement the action must register a global handler (<a href="../reference/api/org/eclipse/ui/IActionBars.html"><b>IActionBars</b></a>.<b>setGlobalActionHandler</b>),
specifying the id of the retargeted action.&nbsp; When the part becomes active, its
handler will be used as the implementation for the action.&nbsp; Plug-ins should
specify <b>retarget=&quot;true&quot; </b>when supplying retargeted actions.&nbsp; The <b>allowLabelUpdate</b> attribute determines whether the
action handlers should be allowed to set a different label on the action when
their part becomes active.&nbsp;&nbsp;</P>


<P >The readme tool sets these global actions in its <b>ReadmeEditorActionBarContributor</b>.&nbsp;
We saw these contributions before when we looked at the editor contribution
class.&nbsp;&nbsp;</P>


<pre ><font color="#4444CC">...
action2 = new <b>RetargetAction</b>(<b>IReadmeConstants.RETARGET2</b>, MessageUtil.getString(&quot;Editor_Action2&quot;));
action2.setToolTipText(MessageUtil.getString(&quot;Readme_Editor_Action2&quot;));
action2.setDisabledImageDescriptor(ReadmeImages.EDITOR_ACTION2_IMAGE_DISABLE);
action2.setImageDescriptor(ReadmeImages.EDITOR_ACTION2_IMAGE_ENABLE);
...
action3 = new <b>LabelRetargetAction</b>(<b>IReadmeConstants.LABELRETARGET3</b>, MessageUtil.getString(&quot;Editor_Action3&quot;));
action3.setDisabledImageDescriptor(ReadmeImages.EDITOR_ACTION3_IMAGE_DISABLE);
action3.setImageDescriptor(ReadmeImages.EDITOR_ACTION3_IMAGE_ENABLE);
...&nbsp;&nbsp;
<b>handler2</b> = new EditorAction(MessageUtil.getString(&quot;Editor_Action2&quot;)); 
...
<b>handler3</b> = new EditorAction(MessageUtil.getString(&quot;Editor_Action3&quot;)); 
...</font></pre>


<P >The readme tool creates additional editor actions, <b>handler2</b> and <b>handler3</b>,&nbsp;
to be used for the retargeted actions.&nbsp; They are associated with the
actions by registering them as global handlers.</P>


<pre ><font color="#4444CC">public void init(IActionBars bars, IWorkbenchPage page) {
	super.init(bars, page);
	bars.setGlobalActionHandler(<b>IReadmeConstants.RETARGET2, handler2</b>);
	bars.setGlobalActionHandler(<b>IReadmeConstants.LABELRETARGET3, handler3</b>);
	...</font></pre>


<P >All of this means that the retargeted actions will be shown in the action set when the readme file
editor is active.&nbsp; Sure enough, these actions become visible when the
editor is active and the <b>readmeRelabelRetargetAction</b> has been renamed.</P>


<P ><img border="0" src="images/readmeretargeted.jpg" width="493" height="78"></P>


<P >For more detail, browse the code in <b>ReadmeEditorActionBarContributor</b>.</P>


<P >&nbsp;</P>


<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" width="250" height="12"></a></p>


</BODY>
</HTML>
