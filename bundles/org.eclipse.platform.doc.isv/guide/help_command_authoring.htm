<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2006. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>Invoking the action from HTML</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<h1>
Authoring a Command Link</h1>

<P>
To include command links in your documentation, you must first declare the
use of the supporting JavaScript code in the <b>HEAD</b> section of your HTML:
</P>


<pre >&lt;script language=&quot;JavaScript&quot; src=&quot;../../org.eclipse.help/livehelp.js&gt; &lt;/script&gt;</pre>


<P>The live help JavaScript is located in the <b>org.eclipse.help</b>
plug-in.&nbsp; You can refer to it using the help system's <a href="help_plugin_files.htm#help_plugin_files_xref">cross
plug-in referencing</a> technique.
</P>

<P>In this example, we have to navigate up two levels in the directory
structure.&nbsp; The document with the command
link is located in a sub-directory underneath the
plug-in directory (a typical practice).&nbsp; So we must navigate up one directory to reach the
documentation plug-in's root, and another level to reach the &quot;virtual&quot; location of all
plug-ins.&nbsp;&nbsp; Then we can refer to the <b>org.eclipse.help</b> plug-in.
</P>

<P>
In the body of your documentation, you invoke the executeCommand function.
</P>

<pre>&lt;a href='javascript:executeCommand("org.eclipse.ui.help.aboutAction")'&gt;
Open the About dialog&lt;/a&gt;</pre>

<P>
The parameter for the <b>executeCommand</b> function is a serialized
<a href="../reference/api/org/eclipse/core/commands/ParameterizedCommand.html">
<b>ParameterizedCommand</b></a>.
See the
<a href="../reference/api/org/eclipse/core/commands/ParameterizedCommand.html#serialize()">
<b>ParameterizedCommand.serialize()</b></a> method for full details on this format.
</P>

<P>
In the example above, the About dialog command does not require any parameters, so the
serialization is merely its command id: <tt>org.eclipse.ui.help.aboutAction</tt>.
Below is another example showing a command with a parameter.  Note the command id is
followed by the parameter id and value in parentheses:
</P>

<pre>&lt;a href='javascript:executeCommand(
	"org.eclipse.ui.window.preferences(preferencePageId=org.eclipse.ui.preferencePages.Views)")'&gt;
	Show a preference page&lt;/a&gt;</pre>

<P>
A final example demonstrates that multiple parameters are possible.  They are comma
separated and the order of the parameters is not important.
</P>

<pre>&lt;a href='javascript:executeCommand(
	"org.eclipse.ui.dialogs.openMessageDialog(imageType=3,buttonLabel2=Maybe,title=Opinion Poll,message=Do you like command links?,buttonLabel0=Yes,defaultIndex=0,buttonLabel1=No)")'&gt;
	Open a message dialog&lt;/a&gt;</pre>

</BODY>
</HTML>
