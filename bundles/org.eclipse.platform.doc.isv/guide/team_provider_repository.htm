<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>Implementing a repository provider</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">

<H3>Implementing a repository provider</H3>
<P>
The <a href="../reference/extension-points/org_eclipse_team_core_repository.html"> <b> org.eclipse.team.core.repository</b></a> extension point is used to add a
repository definition.&nbsp;
Here is the markup for the CVS client.</P>
<font color='#4444CC'>
<pre>&lt;extension
    point=&quot;org.eclipse.team.core.repository&quot;&gt;
      &lt;repository
            class=&quot;org.eclipse.team.internal.ccvs.core.CVSTeamProvider&quot;
            id=&quot;org.eclipse.team.cvs.core.cvsprovider&quot;&gt;
      &lt;/repository&gt;
&lt;/extension&gt;
</pre></font>
<p>This registers your team provider with the team support plug-in and assigns
an id that should be used when your provider is associated with a project.&nbsp;
The specified <b>class</b> for the repository must extend <b><a href="../reference/api/org/eclipse/team/core/RepositoryProvider.html">RepositoryProvider</a></b>.
</p>


<H3>Implementing a provider</H3>
<P>
The class identified in the extension must be a subclass of <b><a href="../reference/api/org/eclipse/team/core/RepositoryProvider.html">RepositoryProvider</a></b>.
Its primary responsibilities are to configure and deconfigure a project for
repository support, and supply any necessary resource modification hooks.&nbsp;
The CVS client serves as a good example.&nbsp; Its repository provider is <b>CVSTeamProvider</b>.</P>
<font color='#4444CC'><pre>
   public class CVSTeamProvider extends RepositoryProvider {

	...
	</pre></font>
		
<p> <b><a href="../reference/api/org/eclipse/team/core/RepositoryProvider.html">RepositoryProvider</a> </b>defines two abstract methods, <b>configureProject</b> and <b>deconfigure</b>.&nbsp;
All providers must implement these methods.&nbsp; </p><p>A project is configured
when it is first associated with a particular repository provider.&nbsp; This
typically happens when the user selects a project and uses the team wizards to
associate a project with your repository.&nbsp; Regardless of how the operation
is triggered, this is
the appropriate time to compute or cache any data about the project that you'll
need to provide your repository function.&nbsp; (Assume that mapping the project
to your provider has already happened.&nbsp; You'll be taking care of this in
your configuration wizard.)</p><p>The
CVS provider simply broadcasts the fact that a project has been configured:</p><pre>public void configureProject() throws CoreException {
	CVSProviderPlugin.broadcastProjectConfigured(getProject());
}</pre><p>We won't follow the implementation of the plug-in broadcast
mechanism.&nbsp; Suffice to say that any parties that need to compute or
initialize project specific data can do so at this time.</p><p>A project is
deconfigured when the user no longer wants to associate a team provider with a
project.&nbsp;&nbsp; It is up to your plug-in to implement the user action that
causes this to happen (and unmapping the project from your team provider will
happen there).&nbsp; The <b>deconfigure</b> method&nbsp; is the
appropriate time to delete any project related caches or remove any references
to the project in the UI.&nbsp; The CVS provider flushes project related caches
kept in its views and broadcasts the fact that the project is deconfigured.</p>

<font color='#4444CC'>
<pre>public void deconfigure() throws CoreException {
	...
	try {
		EclipseSynchronizer.getInstance().flush(getProject(), true, true /*flush deep*/, null);
	} catch(CVSException e) {
		throw new CoreException(e.getStatus());
	} finally {
		CVSProviderPlugin.broadcastProjectDeconfigured(getProject());
	}
}</pre>
</font> 
<h3>Resource modification hooks<a name="hooks"></a></h3>
<P >Most of the interesting function associated with a repository provider occurs 
  as the user works with resources in the project that is configured for the provider.&nbsp; 
  In order to be aware of changes the user makes to a resource, the provider can 
  implement <a href="resAdv_hooks.htm">resource modification hooks</a>.&nbsp; 
  The resources plug-in provides these hooks as extension points.&nbsp; The documentation 
  for <a href="../reference/api/org/eclipse/core/resources/team/IMoveDeleteHook.html"><b>IMoveDeleteHook</b></a>, 
  <a href="../reference/api/org/eclipse/core/resources/IFileModificationValidator.html"><b>IFileModificationValidator</b></a> 
  and <a href="../reference/api/org/eclipse/core/resources/ResourceRuleFactory.html"><strong>ResourceRuleFactory</strong></a> 
  describe the details for implementing these hooks.</P>
<P >The team plug-in optimizes and simplifies the association of the hook with
appropriate resources by registering generic hooks with the resources
plug-in.&nbsp; These generic hooks simply look up the repository provider for a
given resource and obtain its hook.&nbsp; This has the advantage of calling only
one provider hook rather than having each provider implementation register a
hook that must first check whether the resource is managed by the provider.</P>
<P >What this means to your plug-in is that you provide any necessary hooks by 
  overriding methods in <font color="#4444CC"><b><a href="../reference/api/org/eclipse/team/core/RepositoryProvider.html">RepositoryProvider</a></b>.&nbsp; 
  </font>The default implementation of these methods answers null, indicating 
  that no hook is necessary (except for the resource rule factory, as described 
  below): </P>
<ul>
  <li><b>getMoveDeleteHook</b> - answers an <a href="../reference/api/org/eclipse/core/resources/team/IMoveDeleteHook.html"><b>IMoveDeleteHook</b></a> 
    appropriate for the provider.&nbsp; This hook allows providers to control 
    how moves and deletes occur and includes the ability to prevent them from 
    happening.&nbsp; Implementors can provide alternate implementations for moving 
    or deleting files, folders, and projects.&nbsp; The CVS client uses this hook 
    to monitor folder deletions and ensure that any files contained in deleted 
    folders are remembered so that they can later be deleted from the repository 
    if desired.</li>
  <li><b>getFileModificationValidator</b> - answers an <a href="../reference/api/org/eclipse/core/resources/IFileModificationValidator.html"><b>IFileModificationValidator</b></a> 
    appropriate for the provider.&nbsp; This hook allows providers to pre-check 
    any modifications or saves to files.&nbsp; This hook is typically needed when 
    a repository provider wants to implement <b>pessimistic versioning</b>.&nbsp; 
    In pessimistic versioning, a file must be checked out before modifying it, 
    and only one client can check out a file at any given time.&nbsp; Pessimistic 
    versioning could be implemented by checking out a file (if not already checked 
    out) whenever a file is edited, and checking the file back in when it is saved. 
    Since CVS uses an optimistic versioning scheme, it does not implement this 
    hook.</li>
  <li><strong>getRuleFactory</strong> - answers a resource rule factory appropriate 
    for the provider. Providers should always override this method as the default 
    factory locks the workspace for all operations for backwards compatibility 
    reasons. Provides should subclass <a href="../reference/api/org/eclipse/core/resources/ResourceRuleFactory.html"><strong>ResourceRuleFactory</strong></a> 
    and override those rules required to ensure that the proper rules are obtained 
    for operations that invoke the move/delete hook and file modification validator. 
    The rule methods of particular interest to repository providers are: 
    <ul>
      <li><em>deleteRule</em> - move/delet hook</li>
      <li><em>moveRule</em> -move/delete hook</li>
      <li><em>validateEditRule</em> - file modification validator validateEdit</li>
      <li><em>modifyRule</em> - file modification validator validateSave</li>
    </ul>
  </li>
</ul>


<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corporation and others 2000, 2003." border="0" width="324" height="14"></a>
</p>
</BODY>
</HTML>
