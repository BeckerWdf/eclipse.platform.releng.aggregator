<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>Reporting and listening to progress</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H1>
Reporting and listening to progress</H1>
<p>
Long running jobs (those lasting more than a second) should report progress to the <tt>IProgressMonitor</tt> passed to the
job's <tt>run</tt> method.  The workbench progress view will
show all progress messages and units of completed work given
to this monitor.  The supplied progress monitor is also used to respond to
cancelation requests made from the progress view.  When a user
(or plug-in) attempts to cancel a job, the method <tt>IProgressMonitor.isCanceled</tt>
will return <tt>true</tt>. When this occurs, it is the job's responsibility to
respond to the cancelation by exiting the <tt>run</tt> method as soon as possible.
Here is a sample <tt>run</tt> method from a job that reports progress and responds 
to cancelation:
<font color='#4444CC'><pre>
   public IStatus run(IProgressMonitor monitor) {
      final int ticks = 6000;
      monitor.<b>beginTask</b>("Doing some work", ticks);
      try {
         for (int i = 0; i &lt; ticks; i++) {
            if (monitor.<b>isCanceled</b>())
               return Status.CANCEL_STATUS;
            monitor.<b>subTask</b>("Processing tick #" + i);
            //... do some work ...
            monitor.<b>worked</b>(1);
         }
      } finally {
         monitor.<b>done</b>();
      }
      return Status.OK_STATUS;
   }
</pre></font>
In the progress view, the string supplied to <tt>beginTask</tt> will appear
after the job name, and the <tt>subTask</tt> messages will appear as
a child in the progress tree. The progress view will calculate and display a 
percent completion based on the number of <tt>worked</tt> calls that
have occurred.  Here is a snapshot of the progress view while the above
job is running:
</p>
<P ><img src="images/job-progress.jpg" alt="Job progress view" ></P>

<p>
If your job is an implementation detail that you do not want to show to users,
you can flag your job as a <i>system job</i>.  A system job is just like any
other job, except it does not appear in the progress view or cause the progress
busy indicator in the status line to animate.  If your job is not either directly
initiated by a user, or a periodic task that can be configured by a user, then your
job should be a system job.  Making your job a system job is easy as pie:
<font color='#4444CC'><pre>
   class TrivialJob extends Job {
      public TrivialJob() {
         super("Trivial Job");
         <b>setSystem(true)</b>;
      }
      ...
   }
</pre></font>
<p>
[The remainder of this document is under construction]<br>

Other topics to be covered in this section:
<ul>
<li>progress groups</li>
<li>job state</li>
<li>job change listeners</li>

</ul>
</p>




<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corporation and others 2000, 2003." border="0" width="324" height="14"></a></p>
</BODY>
</HTML>
