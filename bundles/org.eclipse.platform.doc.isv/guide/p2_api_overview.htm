<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
  <meta name="copyright"
 content="Copyright (c) Sonatype Inc and others 2010. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
  <meta http-equiv="Content-Type"
 content="text/html; charset=ISO-8859-1">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <link REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
  <title>Overview of the p2 API</title>
</head>
<body>
<H1>API overview</H1>
<p>
This section provides an overview of the p2 API and introduces some of the key concepts that should be understood to work with
the p2 API.  The API can be generally split into three categories:
</p> 
<ol> 
<li>The p2 User Interface API </li>
<li>The Operations API </li>
<li>The Core API</li>
</ol>
<p>
This section provides a description of each of these components and introduces some of the key concepts.
</p>
<dl>
<dt><h3>The User Interface API</h3></dt>
<dd>The UI provides wizards for installing, updating, and uninstalling software in a system.  It also
provides dialog pages for describing the installation and manipulating the repositories that are used
to access software.  Most of these building blocks are private ("black box") implementations, not intended
to be extended by clients.  A small package, 
<a href="../reference/api/org/eclipse/equinox/p2/ui/package-summary.html">org.eclipse.equinox.p2.ui</a>,
defines the API, which provides hooks for customizing the behaviour of the UI components, and class definitions that
can be used in a plug-in's UI contributions.  The <a href="../reference/api/org/eclipse/equinox/p2/ui/Policy.html">Policy</a> class defines the 
customization points for the UI.  <a href="org.eclipse.platform.doc.isv/guide/p2_ui.htm">Customizing the p2 UI</a> 
describes how the p2 UI can be reused and configured.
</dd>
<dt><h3>Operations API</h3></dt>
<dd>The <a href="../reference/api/org/eclipse/equinox/p2/operations/package-summary.html">operations API</a> provides high-level API for 
installing, updating, and uninstalling software in a headless system.  In order to keep the API relatively simple, operations are
designed to handle the most common use cases.  Applications with complex install sequences may need to bypass the operations API 
work directly with the 
<a href="../reference/api/org/eclipse/equinox/p2/planner/IPlanner.html">Director</a> and 
<a href="../reference/api/org/eclipse/equinox/p2/engine/IEngine.html">Engine</a> APIs. 
The life cycle for an operation is described in the javadoc for
<a href="../reference/api/org/eclipse/equinox/p2/operations/ProfileChangeOperation.html">ProfileChangeOperation</a>. 
Code snippets for working with operations can be found in the javadoc for
<a href="../reference/api/org/eclipse/equinox/p2/operations/InstallOperation.html">InstallOperation</a>, 
<a href="../reference/api/org/eclipse/equinox/p2/operations/UpdateOperation.html">UpdateOperation</a>, and
<a href="../reference/api/org/eclipse/equinox/p2/operations/UninstallOperation.html">UninstallOperation</a>.
</dd>		
	
<dt><h3>The Core API</h3></dt>
<dd>The core API contains all the building blocks on which the Operation and UI APIs are built.  The Core API
defines the constructs that feed into the Operations and User Interface API.  
The major concepts that define the core API are summarized below:
<ul>
<li><b>The Provisioning Agent:</b><br>
All access to the p2 API happens through a <a href="../reference/api/org/eclipse/equinox/p2/core/IProvisioningAgent.htm">
provisioning <b>agent</b></a>. The agent is the starting point of everything.  One way to think about 
the <a href="../reference/api/org/eclipse/equinox/p2/core/IProvisioningAgent.html">IProvisioningAgent</a> 
is that it is an "executable" representation of the p2 area (e.g. the p2 folder at the root of an eclipse installation).  
Among other things, the agent can be used to 
acquire p2 services for managing repositories, creating provisioning plans and performing installs. 
The provisioning agent can be acquired using the IProvisioningAgentProvider. 
<br>
The following examples show how to acquire the provisioning agent.
<br>
<br>
<code>
&nbsp;&nbsp;&nbsp;ServiceReference sr = Activator.sContext.getServiceReference(IProvisioningAgentProvider.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgentProvider agentProvider = null;<br>
&nbsp;&nbsp;&nbsp;if (sr == null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
&nbsp;&nbsp;&nbsp;agentProvider = (IProvisioningAgentProvider) Activator.sContext.getService(sr);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgent agent = agentProvider.createAgent(new URI("file:/Applications/eclipse36/p2"));<br>
</code>
<br>
The concept of agent allows for multiple instances of p2
to be running in isolation in the same VM.  Note that
the client creating the agent is responsible for destroying it.
<br><br>
</li>
<li><b>Metadata</b>
The <b>Installable Unit</b> (IU) is the source of metadata and what is being passed to p2 to trigger an installation, 
removal, or update. An IU describes "what" can be installed, the license, copyright information, installation 
processing steps and the "requirements" that must be satisfied 
(see <a href="../reference/api/org/eclipse/equinox/p2/metadata/IInstallableUnit.html">IInstallableUnit</a>).  
<br><br>
An IU is usually obtained either by querying a source of metadata (e.g. a repository) 
or created programmatically.
<br><br>
<i>Note: There is no specified serialization format for an IU. Also, an IU is immutable, that is, once created it should
never change.</i>
<br><br>
</li>
<li><b>Query/Queryable</b>
Every source of metadata is usually queryable 
(see <a href="../reference/api/org/eclipse/equinox/p2/query/IQueryable.html">org.eclipse.equinox.p2.query.IQueryable</a>). 
To discover an IU, one usually executes a query 
(see <a href="../reference/api/org/eclipse/equinox/p2/query/IQuery.html">IQuery</a>) against a metadata source.
Queries can be created in multiple ways.
The simplest way is to create a query using the QueryUtil.  For example: 
<br><br>
<code>
&nbsp;&nbsp;&nbsp;QueryUtil.createIUQuery("org.eclipse.jdt");
</code>
<br><br>
Will create a query that searchers for all IUs that have the ID <tt>"org.eclipse.jdt"</tt>. 
There may be more than one IU if the repository you are querying has
more than one version of the <tt>org.eclipse.jdt</tt> IU. (See <a href="../reference/api/org/eclipse/equinox/p2/query/QueryUtil.html">QueryUtil</a> for the list of queries that
can be constructed). 
<br><br>
Because of the extensible nature of p2, additional queries that are OSGi specific can be found in the package
<a href="../reference/api/org/eclipse/equinox/p2/touchpoint/eclipse/query/package-summary.html">org.eclipse.equinox.p2.eclipse.touchpoint</a>.
Finally, should you need to write more complex queries, 
p2 comes with a query language called <a href="http://wiki.eclipse.org/Query_Language_for_p2">p2 QL</a>
<br><br>
</li>
<li><b>Repository / Repository manager</b>
In p2 there are two types of repositories, <b>Metadata Repositories</b> and <b>Artifact Repositories</b>.  Metadata repositories
hold Installable Units, while artifact repositories hold "artifacts" (the actual bytes that make up an install).  Repositories can be
remote or local, and can be edited and queries.  
See <a href="../reference/api/org/eclipse/equinox/p2/repository/metadata/IMetadataRepository.htm">metadata repository</a> and
<a href="../reference/api/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.htm">artifact repository</a> for information on 
their APIs.
Repositories are managed (created, loaded, removed, cached, etc...) using a Repository Manager.  
(See <a href="../reference/api/org/eclipse/equinox/p2/repository/IRepositoryManager.htm">repository manager</a>).  The repository
manager can be acquired using the Provisioning Agent. The following code shows how to acquire the Metadata Repository Manager 
using the agent, and subsequently load the Helios repository.
<br><br>  
<code>
&nbsp;&nbsp;&nbsp;IMetadataRepositoryManager manager = (IMetadataRepositoryManager) agent.getService(IMetadataRepositoryManager.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IMetadataRepository repository = manager.loadRepository(new URI("http://download.eclipse.org/releases/helios"), new NullProgressMonitor());<br>
</code>
<br>
</li>
<li><b>Profile / Profile Registry</b>
A p2 profile tracks the set of software installed to make an executable application. For example,
your Eclipse Install is Profile that contains all the IUs that you currently have intalled.
When you attempt to install new IUs, p2 modifies your current profile.  If the new
IUs conflict with your existing profile (or dependencies cannot be resolved), then p2 will report
an error and the installation will not proceed.  
(See <a href="../reference/api/org/eclipse/equinox/p2/engine/IProfile.htm">profile</a> for a complete
list of the Profile API.
<br><br>
Like other p2 constructs, the Profile is managed by a profile registry
(see <a href="../reference/api/org/eclipse/equinox/p2/engine/IProfileRegistry.htm">IProfileRegistry</a>).
A profile registry manages all the profiles for a given p2 agent. The profile registry can be 
acquired through the agent.
<br><br>
</li>
<li><b>Putting it all together</b>
The following code is the complete code snippet to trigger the installation of an IU.  Note that we don't work directly with a profile or
profile registry, because the install operation will default to use the profile of the running system.
<br>
<code>
&nbsp;&nbsp;&nbsp;//get the agent<br>
&nbsp;&nbsp;&nbsp;ServiceReference sr = Activator.sContext.getServiceReference(IProvisioningAgentProvider.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgentProvider agentProvider = null;<br>
&nbsp;&nbsp;&nbsp;if (sr == null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
&nbsp;&nbsp;&nbsp;agentProvider = (IProvisioningAgentProvider) Activator.sContext.getService(sr);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgent agent = agentProvider.createAgent(new URI("file:/Applications/eclipse36/p2"));<br>
<br>
&nbsp;&nbsp;&nbsp;//get the repository managers<br>
&nbsp;&nbsp;&nbsp;IMetadataRepositoryManager manager = (IMetadataRepositoryManager) agent.getService(IMetadataRepositoryManager.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IArtifactRepositoryManager artifactManager = (IArtifactRepositoryManager) agent.getService(IArtifactRepositoryManager.SERVICE_NAME);<br>
<br>
&nbsp;&nbsp;&nbsp;//Loading repositories<br>
&nbsp;&nbsp;&nbsp;IMetadataRepository metadataRepo = manager.loadRepository(new URI("file:/Users/Pascal/tmp/demo/"), new NullProgressMonitor());<br>
&nbsp;&nbsp;&nbsp;IArtifactRepository artifactRepo = artifactManager.loadRepository(new URI("file:/Users/Pascal/tmp/demo/"), new NullProgressMonitor());<br>
<br>
&nbsp;&nbsp;&nbsp;//Querying<br>
&nbsp;&nbsp;&nbsp;Collection toInstall = metadataRepo.query(QueryUtil.createIUQuery("org.eclipse.equinox.p2.demo.feature.group"), new NullProgressMonitor()).toUnmodifiableSet();<br>
<br>
&nbsp;&nbsp;&nbsp;//Creating an operation<br>
&nbsp;&nbsp;&nbsp;InstallOperation installOperation = new InstallOperation(new ProvisioningSession(agent), toInstall);<br>
&nbsp;&nbsp;&nbsp;if (installOperation.resolveModal(new NullProgressMonitor()).isOK()) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Job job = installOperation.getProvisioningJob(new NullProgressMonitor());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;job.addJobChangeListener(new JobChangeAdapter() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void done(IJobChangeEvent event) {agent.close()}});<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;job.schedule();<br>
&nbsp;&nbsp;&nbsp;}<br>
</code>
</li>
</ul>
</dl>
</body>
</html>