<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
  <meta name="copyright"
 content="Copyright (c) Sonatype Inc and others 2010. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
  <meta http-equiv="Content-Type"
 content="text/html; charset=ISO-8859-1">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <link REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
  <title>Overview of the p2 API</title>
</head>
<body>
<h2>API overview</h2>
<p>
This section provides an overview of the p2 API and introduces some of the key concepts that should be understood to work with
the p2 API.  The API can be generally split into three categories:
</p>
<dl>
<dt>UI API</dt>
<dd>The UI provides wizards for installing, updating, and uninstalling software in a system.  It also
provides dialog pages for describing the installation and manipulating the repositories that are used
to access software.  Most of these building blocks are private ("black box") implementations, not intended
to be extended by clients.  A small package, 
<a href="../reference/api/org/eclipse/equinox/p2/ui/package-summary.html">org.eclipse.equinox.p2.ui</a>,
defines the API, which provides hooks for customizing the behavior of the UI components, and class definitions that
can be used in a plug-in's UI contributions.  The <a href="../reference/api/org/eclipse/equinox/p2/ui/Policy.html">Policy</a> class defines the 
customization points for the UI.  <a href="org.eclipse.platform.doc.isv/guide/p2_ui.htm">Customizing the p2 UI</a> 
describes how the p2 UI can be reused and configured. 
</dd>
<dt>Operations API</dt>
<dd>The <a href="../reference/api/org/eclipse/equinox/p2/operations/package-summary.html">operations API</a> provides high-level API for 
installing, updating, and uninstalling software in a headless system.  In order to keep the API relatively simple, operations are
designed to handle the most common use cases.  Applications with complex install sequences may need to bypass the operations API and
work directly with the core.  The life cycle for an operation is described in the javadoc for
<a href="../reference/api/org/eclipse/equinox/p2/operations/ProfileChangeOperation.html">ProfileChangeOperation</a>. 
Code snippets for working with operations can be found in the javadoc for
<a href="../reference/api/org/eclipse/equinox/p2/operations/InstallOperation.html">InstallOperation</a>, 
<a href="../reference/api/org/eclipse/equinox/p2/operations/UpdateOperation.html">UpdateOperation</a>, and
<a href="../reference/api/org/eclipse/equinox/p2/operations/UninstallOperation.html">UninstallOperation</a>.
</dd>	
<dt>Core API</dt>
<dd>The core API contains all the building blocks on which the Operation and UI APIs are being built.  There are more
concepts to understand when using the core, but this API provides the most flexibility and configurability for
provisioning a complex system.  The major concepts that define the core API are summarized below:
<ul>
<li><b>Installable Unit</b> (IU) is the metadata that describes something that can be installed, updated, or removed.
An installable unit is usually obtained either by querying a source of metadata (e.g. a repository), or by
creating one programmatically.
A typical source of metadata is a metadata repository.  Note that the serialized format of an IU is not specified.  Manipulation
of installable units should only be performed through the 
<a href="../reference/api/org/eclipse/equinox/p2/metadata/IInstallableUnit.html">IInstallableUnit</a> API.</li>
<li><b>Queries and Queryables</b> are used to obtain metadata.  Every source of metadata is usually an <a href="../reference/api/org/eclipse/equinox/p2/query/IQueryable.html">IQueryable</a>. 
To discover an IU, you can execute an <a href="../reference/api/org/eclipse/equinox/p2/query/IQuery.html">IQuery</a> against a metadata source.
Queries can be created in multiple ways. <a href="../reference/api/org/eclipse/equinox/p2/query/QueryUtil.html">QueryUtil</a> defines the most
common queries, such as querying for an IU with a given id, version, name, etc.
Additional queries that are OSGi specific can be found in the package <a href="../reference/api/org/eclipse/equinox/p2/touchpoint/eclipse/query/package-summary.html">org.eclipse.equinox.p2.eclipse.touchpoint</a>.
If you need to write more complex queries, p2 includes a query language called <a href="http://wiki.eclipse.org/Query_Language_for_p2">p2 QL</a>
</li>
<li><b>Repositories and Repository Managers</b> are used to obtain metadata.   An <a href="../reference/api/org/eclipse/equinox/p2/repository/IRepository.html">IRepository</a> contains either
installable units (<a href="../reference/api/org/eclipse/equinox/p2/repository/metadata/IMetadataRepository.html">IMetadataRepository</a>) or 
downloadable artifacts (<a href="../reference/api/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.html">IArtifactRepository</a>).
The repositories can be remote or local, and can be edited and queried.  The  <a href="../reference/api/org/eclipse/equinox/p2/repository/IRepositoryManager.html">IRepositoryManager</a>
can be used to create, add, and remove repositories, as well as enable or disable repositories.  </li>
<li><b>Provisioning Agent</b> represents an aggregation of all the p2 services working together.  It is the starting point for obtaining
all of the other p2 services.  One way to think about <a href="../reference/api/org/eclipse/equinox/p2/core/IProvisioningAgent.html">IProvisioningAgent</a> 
is that it is an "executable" representation of the p2 area (e.g. the p2 folder at the root of an eclipse installation). 
The concept of agent allows for multiple instances of p2 to be running in isolation in the same VM.  Note that the client creating the agent 
is responsible for destroying it.</li>
<li><b>Profiles and Profile Registries</b> describe what installations are available in a given system.  
<a href="../reference/api/org/eclipse/equinox/p2/engine/IProfile.html">IProfile</a> describes the IUs that are present in a given
installation.  It can be queried similarly to a metadata repository.  <a href="../reference/api/org/eclipse/equinox/p2/engine/IProfileRegistry.html">IProfileRegistry</a> 
knows about all the profiles in a given p2 area.</li>
</ul>
</dd>
</dl>
<h3>Putting it all together</h3>
<p>The following code is the complete code snippet to trigger the installation of an IU.  Note that we don't work directly with a profile or
profile registry, because the install operation will default to use the profile of the running system.
</p>
<code>
&nbsp;&nbsp;&nbsp;//get the agent<br>
&nbsp;&nbsp;&nbsp;ServiceReference sr = Activator.sContext.getServiceReference(IProvisioningAgentProvider.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgentProvider agentProvider = null;<br>
&nbsp;&nbsp;&nbsp;if (sr == null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
&nbsp;&nbsp;&nbsp;agentProvider = (IProvisioningAgentProvider) Activator.sContext.getService(sr);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgent agent = agentProvider.createAgent(new URI("file:/Applications/eclipse36/p2"));<br>
<br>
&nbsp;&nbsp;&nbsp;//get the repository managers<br>
&nbsp;&nbsp;&nbsp;IMetadataRepositoryManager manager = (IMetadataRepositoryManager) agent.getService(IMetadataRepositoryManager.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IArtifactRepositoryManager artifactManager = (IArtifactRepositoryManager) agent.getService(IArtifactRepositoryManager.SERVICE_NAME);<br>
<br>
&nbsp;&nbsp;&nbsp;//Loading repositories<br>
&nbsp;&nbsp;&nbsp;IMetadataRepository metadataRepo = manager.loadRepository(new URI("file:/Users/Pascal/tmp/demo/"), new NullProgressMonitor());<br>
&nbsp;&nbsp;&nbsp;IArtifactRepository artifactRepo = artifactManager.loadRepository(new URI("file:/Users/Pascal/tmp/demo/"), new NullProgressMonitor());<br>
<br>
&nbsp;&nbsp;&nbsp;//Querying<br>
&nbsp;&nbsp;&nbsp;Collection toInstall = metadataRepo.query(QueryUtil.createIUQuery("org.eclipse.equinox.p2.demo.feature.group"), new NullProgressMonitor()).toUnmodifiableSet();<br>
<br>
&nbsp;&nbsp;&nbsp;//Creating an operation<br>
&nbsp;&nbsp;&nbsp;InstallOperation installOperation = new InstallOperation(new ProvisioningSession(agent), toInstall);<br>
&nbsp;&nbsp;&nbsp;if (installOperation.resolveModal(new NullProgressMonitor()).isOK()) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Job job = installOperation.getProvisioningJob(new NullProgressMonitor());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;job.addJobChangeListener(new JobChangeAdapter() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void done(IJobChangeEvent event) {agent.close()}});<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;job.schedule();<br>
&nbsp;&nbsp;&nbsp;}<br>
</code>
</body>
</html>