<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
  <head>
    <title>
      Editing Java elements
    </title>
    <link rel="stylesheet" href="../book.css" charset="ISO-8859-1" type="text/css">
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <meta http-equiv="Content-Style-Type" content="text/css">
  </head>
  <body>
    <h1>
      Editing Java elements
    </h1>
    <p>
      In this section, you will edit Java elements in the workbench.
    </p>
    <h2>
      Using the outline view
    </h2>
    
<ol>
  <li> Expand the package <em>junit.samples</em> and select the file <em>VectorTest.java</em>.&nbsp;
    You can open <em>VectorTest.java</em> in the Java editor by double clicking on
    it. </li>
  <li> Notice the syntax highlighting.&nbsp; Different kinds of elements in the
    java source are rendered in unique colors.&nbsp; Examples of java source
    elements that are rendered differently are: 
    <ul>
      <li> Regular comments </li>
      <li> Javadoc comments </li>
      <li> Keywords </li>
      <li> Strings. </li>
    </ul>
	<p>
    <img src="../images/qs-8.gif" alt="Syntax highlighting" width="492" height="381">
	</p>
  </li>
  <li> Look at the Outline view. It displays an outline of the Java file including 
    the package declaration, import declarations, fields, types and methods. The 
    Outline view uses icons to annotate Java elements.&nbsp; For example, icons indicate whether a Java element is static, abstract,
    or final.&nbsp; Different icons show you whether a method is overridden from a 
    base class (<img src=
        "../images/org.eclipse.jdt.ui/ovr16/over_co.gif" alt="overridden">) or 
    when it implements a method from an interface (<img src=
        "../images/org.eclipse.jdt.ui/ovr16/implm_co.gif" alt="implements">).
	<p>	
    <img src="../images/qs-9.gif" alt="Outline view" width="198" height="281">
	</p>
  </li>
  <li> Toggle the <strong>Hide Fields</strong>, <strong>Hide Static Members</strong>, 
    and <strong>Hide Non-Public Members</strong> buttons in the Outline view toolbar 
    to filter the view's display.
	<p>
	<img src="../images/qs-10.gif" alt="Outline view tool bar"> 
	</p>
  </li>
  <li> You can edit source code by viewing the whole Java file, or you can narrow 
    the view to a single Java element. The toolbar includes a button, <strong>Show Source of Selected 
    Element Only</strong>, that will cause only the source code of the selected
    outline element to be displayed in the Java editor.&nbsp; In the example
    below, only the <em>setUp()</em> method is displayed.
	<p>
	<img src="../images/qs-11.gif" alt="Show selected element only tool bar button"> 
	</p>
  </li>
  <li> Press the <strong>Show Source of Selected Element Only</strong> button 
    again to see the whole Java file again. In the Outline view, select different 
    elements and note that they are once again displayed in a whole file view 
    in the editor. The Outline view selection now contains a range indicator 
    on the vertical ruler on the left border of the Java editor that indicates
    the range of the selected element.
	<p>
	<img src="../images/qs-12.gif" alt="Range indicator"> 
	</p>
  </li>
</ol>
    <h2>
      Adding methods and using code assist
    </h2>
    <ol>
      <li>
        Start adding a method by typing the following at the end of the <em>VectorTest.java</em> file (but before the closing brackets of the type) in the Java editor:<br>
        &nbsp;
        <code>public void testSizeIsThree() {</code> &nbsp;<br>
 As soon as you type the method name in the editor area, the new method appears at the bottom of the Outline view. 
		<p>
		<img src="../images/qs-13.gif" alt="New method in outline view">
		</p>
      </li>
      <li>
        Click the <strong>Save</strong> button. The compilation unit is compiled automatically and errors appear in the Package Explorer view, in the Tasks view and on the
        vertical ruler. In the Package Explorer view, the errors are propagated up to the project of the compilation unit containing the error.
		<p>
		<img src="../images/qs-14.gif" alt="Error propagation in package explorer" width="180" height="302">
		</p>
      </li>
      <li>
        Complete the new method by typing the following:&nbsp; <code><br>
        assertTrue(fFull.size() == 3); }</code>
      </li>
      <li>
        Save the file. Notice that the error indicators disappear since the
        missing bracket has been added.
      </li>
    </ol>
    <h2>
      Deleting and replacing a method from the local history
    </h2>
    <p>
      In this section, you will use the local history feature to switch to a previously saved version of an individual Java element.
    </p>
    <ol>
      <li>
        Delete the method you just created by selecting it in the Outline view and clicking <strong>Delete</strong> from the context menu.
      </li>
      <li>
        Add a new version of the method by typing the following at the end of the <em>VectorTest.java</em> file in the Java editor:&nbsp; <code><br>
        public void testSizeIsThree() {&nbsp;<br>
        &nbsp;&nbsp;&nbsp; fFull.add(0, new Integer(0));&nbsp;<br>
        &nbsp;&nbsp;&nbsp; fFull.remove(new Integer(3));&nbsp;<br>
        &nbsp;&nbsp;&nbsp; assertTrue(fFull.size() == 3); }</code> &nbsp;<br>
 Save the file.
      </li>
      <li>
        In the Outline view, select the method <code>testSizeIsThree()</code>, and from its context menu, select <strong>Replace
        With &gt; Element from Local History</strong>.
      </li>
      <li>
        In the <strong>Replace Java Element from Local History</strong> dialog, the Local History list shows the various saved states of
        the method. The Java Source Compare pane
        shows details of the differences between the selected history resource and the existing workbench resource.
		<p>
		<img src="../images/qs-15.gif" alt="Replace from local history">
		</p>
      </li>
      <li>
        In the Local History pane, select the version that you deleted, then click
        the <strong> Replace button</strong>. In the Java editor, the method is replaced with the
        selected history version.
      </li>
      <li>
        Save the file.
      </li>
    </ol>
    <h2>
      Using content assist
    </h2>
    <p>
      In this section you will use content assist to help finish writing a new
      method.&nbsp; Open <em>junit.samples.VectorTest.java</em> file in the Java
      editor if you do not already have it open and select the <code>testSizeIsThree()</code> method
      in the Outline view.
    </p>
    <ol>
      <li>
        Add the following lines to the end of the method:&nbsp; <code><br>
        Vector v = new Vector();&nbsp;<br>
 for (int i=0; i&lt;3; i++)&nbsp;<br>
        &nbsp;&nbsp;&nbsp; v.addElement(new Object());&nbsp;<br>
        &nbsp;&nbsp;&nbsp; assert</code>
      </li>
      <li>
        With your cursor at the end of the word <code>assert</code>, press <kbd>Ctrl</kbd>+<kbd>Space</kbd> to activate content assist. The content assist window with a list of
        proposals will appear. Scroll the list to see the available choices.
		<p>
		<img src="../images/qs-16.gif" alt="Content assist" width="645" height="258">
		</p>
      </li>
      <li>
        With the content assist window still active, type the letter 't'
        in the source code after <code>assert</code> (with no space in between). The list is narrowed and only shows entries
        starting with 'assertt'. Select and then hover over various items in the list to view any available Javadoc help for each item.
		<p>
		<img src="../images/qs-17.gif" alt="Content assist filtered">
		</p>
      </li>
      <li>
        Select <code>assertTrue(boolean)</code> from the list and press <kbd>Enter</kbd>. The code for the <code>assertTrue(boolean)</code> method is inserted.
      </li>
      <li>
        Complete the line so that it reads as follows:&nbsp; <code><br>
        assertTrue(v.size() == fFull.size());</code>
      </li>
      <li>
        Save the file.
      </li>
    </ol>
    <h2>
      Using source code templates
    </h2>
    <p>
      In this section you will use content assist to fill in a template for a
      common loop structure.&nbsp; Open <em>junit.samples.VectorTest.java</em> file in the Java
      editor if you do not already have it open.
    </p>
    <ol>
      <li>
        Start adding a new method by typing the following:&nbsp; <code><br>
        public void testValues() {&nbsp;<br>
        &nbsp;&nbsp;&nbsp; Integer[] expected= new Integer[3];&nbsp;<br>
        &nbsp;&nbsp;&nbsp; for</code>
      </li>
      <li>
        With the cursor at the end of <code>for</code>, type <kbd>Ctrl</kbd>+<kbd>Space</kbd> to enable content assist.&nbsp;
        You will see a list of common templates for &quot;for&quot; loops.&nbsp;
        When you hover over a template, you'll see the code for the template in
        its help.&nbsp; Note that the local array name is guessed automatically.
		<p>
		<img src="../images/qs-17b.gif" alt="Content assist for for">
		</p>
      </li>
      <li>
        Choose the <code>for - iterate over array</code>  entry and press <kbd>Enter</kbd> to confirm the template.&nbsp;
        The template will be inserted in your source code.
		<p>
		<img src="../images/qs-17c.gif" alt="Inserted for template" width="435" height="101">
		</p>
      </li>
      <li>
        Complete the <code>for</code> loop as follows:<br>
 <code> for (int i= 0; i &lt; expected.length; i++) {&nbsp;<br>
 &nbsp;&nbsp;&nbsp; expected[i]= i + 1; }&nbsp;<br>
 Integer[] actual= to<br>
        </code>(Ignore any warnings in the vertical ruler for now.)
      </li>
      <li>
        With the cursor at the end of <code>to</code>, type <kbd>Ctrl</kbd>+<kbd>Space</kbd> to enable content assist. Pick <code>toarray - convert collection to array</code>
        and press <kbd>Enter</kbd> to confirm the selection (or double-click the
        selection).
		<p>
        <img src="../images/qs-17d.gif" alt="Inserted for template" width="797" height="257">
		</p>
		The template is inserted in the editor and <code>type</code> is highlighted and selected.
		<p>
		<img src="../images/qs-17e.gif" alt="Inserted for template">
		</p>
      </li>
      <li>
        Overwrite the selection by typing <code>Integer</code>. The type of array constructor changes
        when you change the selection.
      </li>
      <li>
        Press <kbd>Tab</kbd> to move the selection to <code>collection</code> and
        overwrite it by typing <code>fFull</code>.
		<p>
		<img src="../images/qs-17f.gif" alt="Inserted for template" width="638" height="114">
		</p>
      </li>
      <li>
        Add the following lines of code to complete the method:&nbsp; <code><br>
        assertEquals(expected.length, actual.length);&nbsp;<br>
        for (int i= 0; i &lt; actual.length; i++)&nbsp;<br>
        &nbsp;&nbsp;&nbsp; assertEquals(expected[i], actual[i]);&nbsp;<br>
        }</code>
      </li>
      <li>
        Save the file.&nbsp; (Ignore any warnings in the vertical ruler for
        now).
      </li>
    </ol>
    <h2>
      Organizing imports
    </h2>
    <p>
      In this section you will use organize the import declarations in your
      source code.&nbsp; Open <em>junit.samples.VectorTest.java</em> file in the Java
      editor if you do not already have it open.
    </p>
    <ol>
      <li>
        Delete the import declarations by selecting them in the Outline view and selecting <strong>Delete</strong> from the context menu.&nbsp;
        You will see numerous compiler warnings in the vertical ruler since the
        types used in the method are no longer imported.
		<p>
		<img src="../images/qs-18.gif" alt="Outline view context menu">
		</p>
      </li>
      <li>
        From the context menu in the editor, select <strong>Source &gt;Organize Imports</strong>. The required import statements are added to the beginning of your code below the package
        declaration.
		<p>
		<img src="../images/qs-19.gif" alt="Organize imports">
		</p>
        You can also choose <strong>Organize Imports</strong> from the context menu of the
        import declarations in the Outline view. <em>Note: You can specify the order of the import declarations in <strong>Preferences</strong> (Window &gt; Preferences &gt; Java
        &gt; Organize Imports).</em>
      </li>
      <li>
        Save the file.
      </li>
      <li>
        Note that the warnings associated with import statements have
        disappeared.
      </li>
    </ol>
    <h2>
      Extract a method
    </h2>
    <p>
      In this section, you will improve the code of the constructor of <em>junit.framework.TestSuite</em>. To make the intent of the code more clear, you will extract the code
      that collects test cases from base classes into a new method called <em>collectTestMethods</em>.
    </p>
    <ol>
      <li>
        In the <em>junit.framework.TestSuite.java</em> file, select the following range of
        code inside the <em>TestSuite(Class)</em> constructor:<br>
        <code>Class superClass= theClass;&nbsp;<br>
 Vector names= new Vector();&nbsp;<br>
 while
        (Test.class.isAssignableFrom(superClass)) {&nbsp;<br>
        &nbsp;&nbsp;&nbsp; Method[] methods= superClass.getDeclaredMethods();&nbsp;<br>
        &nbsp;&nbsp;&nbsp; for (int i= 0; i &lt; methods.length; i++) {&nbsp;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTestMethod(methods[i],
        names, constructor);&nbsp;<br>
        &nbsp;&nbsp;&nbsp; }&nbsp;<br>
        &nbsp;&nbsp;&nbsp; superClass= superClass.getSuperclass();&nbsp;<br>
 }</code> &nbsp;<br>
      </li>
      <li>
        From the selection's context menu in the editor, select <strong>Refactor &gt; Extract Method...</strong>.
		<p>
		<img src="../images/qs-20.gif" alt="Context menu extract method">
		</p>
      </li>
      <li>
        In the <strong>Method Name</strong> field, type <em>collectInheritedTests</em>.&nbsp;</li>
        <li>
        To preview the changes, press <strong>Preview&gt;&gt;</strong>.            <p>&nbsp;</p>
		<p>
		<img src="../images/qs-21.gif" alt="Extract method wizard page 1" width="608" height="322">
		</p>
      </li>
      <li>
        The preview page displays the changes that will be made. Press <strong>OK</strong>
        to extract the method.
		<p>
		<img src="../images/qs-22.gif" alt="Extract method wizard page 2">
		</p>
      </li>
      <li>
        Go to the extracted method by selecting it in the Outline view.
		<p>
		<img src="../images/qs-23.gif" alt="Extracted method" width="710" height="222">
		</p>
      </li>
    </ol>
    <h2>
      Using open declaration and open on type hierarchy
    </h2>
    
<ol>
  <li> Open the <em>junit.samples.money.MoneyTest.java</em> file in the Java editor. 
  </li>
  <li> On the first line of the MoneyTest class declaration, select the
    superclass TestCase and either 
    <ul>
      <li> select from the menu bar Navigate &gt; Open Declaration or </li>
      <li> press <kbd>F3</kbd>. </li>
    </ul>
    <em>Note: This command also works on methods and fields.</em>
	<p>
    <img src="../images/qs-24.gif" alt="Menu open declaration">
	</p>
    The TestCase class opens in the editor area and is also represented in 
    the Outline view.
	<p>
    <img src="../images/qs-25.gif" alt="Opened declaration">
	</p>
  </li>
  <li> With the <em>TestCase.java</em> editor open and the class declaration
    selected: 
    <ul>
      <li> select from the menu bar Navigate &gt; Open Type Hierarchy or </li>
      <li> press <kbd>F4</kbd>. </li>
    </ul>
	<p>
    <img src="../images/qs-26.gif" alt="Menu open type hierarchy">
	</p>
  </li>
  <li> 
    The Hierarchy view opens with the TestCase class displayed.
	<p>
    <img src="../images/qs-27.gif" alt="Type hierarchy view">
	</p>
    <em>Note: You can also open editors on types and methods in the Hierarchy view.</em> 
  </li>
</ol>
    <p>
      <img border="0" src="../images/ngrelc.gif" alt="Related concepts" width="159" height="27">
    </p>
    <p>
      <a href="../tasks/tasks-6.htm">Java views</a><br>
       <a href="../concepts/concepts-7.htm">Java editor</a><br>
       <a href="../concepts/concepts-9.htm">Refactoring support</a><br>
       <a href="../concepts/ctemplates.htm">Templates</a><br>
    </p>
    <p>
      <img src="../images/ngrelt.gif" alt="Related tasks" border="0" height="27" width="159">
    </p>
    <p>
      <a href="../tasks/tasks-54.htm">Using the Java editor</a><br>
       <a href="../tasks/tasks-2.htm">Showing and hiding elements</a><br>
       <a href="../tasks/tasks-6.htm">Showing single elements or whole Java files</a><br>
       <a href="../tasks/tasks-195.htm">Sorting elements in Java views</a><br>
       <a href="../tasks/tasks-62.htm">Using the local history</a><br>
       <a href="../tasks/tasks-65.htm">Using content assist</a><br>
       <a href="../tasks/tasks-171.htm">Using templates</a><br>
       <a href="../tasks/tasks-58.htm">Managing import statements</a><br>
       <a href="../tasks/tasks-80.htm">Refactoring</a><br>
       <a href="../tasks/tasks-83.htm">Refactoring with preview</a><br>
       <a href="../tasks/tasks-37.htm">Using the Hierarchy view</a><br>
       <a href="../tasks/tasks-39.htm">Opening a type hierarchy on a Java element</a><br>
       <a href="../tasks/tasks-40.htm">Opening a type hierarchy on the current text selection</a><br>
       <a href="../tasks/tasks-73.htm">Opening an editor for a selected element</a><br>
    </p>
    <p>
      <img src="../images/ngrelr.gif" alt="Related reference">
    </p>
    <p>
      <a href="../reference/ref-view-outline.htm">Java Outline View</a><br>
       <a href="../reference/ref-143.htm">Java Content Assist</a><br>
       <a href="../reference/ref-preferences-templates.htm">Templates Preferences</a><br>
       <a href="../reference/ref-22.htm">Organize Imports Preferences</a><br>
       <a href="../reference/ref-21.htm">Java Editor Preferences</a><br>
       <a href="../reference/ref-154.htm">Extract Method Errors</a><br>
       <a href="../reference/ref-type-hierarchy.htm">Type Hierarchy View</a><br>
    </p>
    <p>
      <a href="../hglegal2002.htm"><img src="../images/ngibmcpy2002.gif" alt="Copyright IBM Corporation 2000, 2002. All Rights Reserved." border="0"></a>
    </p>
  </body>
</html>

