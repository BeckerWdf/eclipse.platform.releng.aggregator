<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "DTD/xhtml1-strict.dtd">
<html>
  <head>
    <title>Editing Java Elements</title>
    <link rel="stylesheet" href="../book.css" charset="ISO-8859-1"
      type="text/css" />
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <meta http-equiv="Content-Style-Type" content="text/css" />
  </head>

  <body>
    <h1 class="Head">Editing Java Elements</h1>

    <p class="Para">
      In this section, you will edit Java elements in the workbench.
    </p>

    <div class="Topic">

    <h2>Using the Outline View</h2>

    <ol>
      <li>
        <p class="Para">
          To open the file
          <span class="Filename">junit.samples.VectorTest.java</span>
          in the Java editor, double click on the file in the Package Explorer.
        </p>
      </li>

      <li>
        <p class="Para">
          Notice the syntax highlighting. Examples for parts of java source
          which are rendered differently are:
        </P>

        <ul class="UnorderedList">
          <li class="Item">Regular comments</li>
          <li class="Item">Javadoc comments</li>
          <li class="Item">Keywords</li>
          <li class="Item">Strings</li>
        </ul>

        <div class="Snapshot">
          <img src="../images/qs-8.gif" alt="Syntax Highlighting" />
        </div>
      </li>

      <li>
        <p class="Para">
          Look at the Outline view.
          Notice that it displays an outline of the Java file
          including the package declaration, import declarations,
          fields, types and methods.

          Also notice how the Outline view indicates whether a Java element
          is static, abstract, final, etc.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-9.gif" alt="Outline View" />
        </div>
      </li>

      <li>
        <p class="Para">
          Toggle the
          <span class="Label">Hide Fields</span>,
          <span class="Label">Hide Static Members</span>, and
          <span class="Label">Hide Non-Public Members</span>
          buttons in the Outline view toolbar to filter the view's display.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-10.gif" alt="Outline View Tool Bar" />
        </div>
      </li>

      <li>
        <p class="Para">
          Toggle the <span class="Label">Sort</span>
          button in the Outline view to sort the Java elements in
          alphabetical order rather than in the order they appear in the
          Java file.
        </p>
      </li>

      <li>
        <p class="Para">
          You can edit source code by viewing the whole 
          Java file, or you can narrow the view to a single Java element.
          Click the
          <span class="Label">Show Source of Selected Element Only</span>
          button in the toolbar.
        </p>

        <p class="Para">
          In the Outline view, select various elements and note that only
          the selected element is displayed in the Java editor.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-11.gif" alt="Show Selected Element Only Tool Bar Button" />
        </div>
      </li>

      <li>
        <p class="Para">
          Press the same button again to see the whole Java file again.
        </P>

        <p class="Para">
          In the Outline view, select various elements and note that they
          are once again displayed in a whole file view in the editor.
          Notice that now, the Outline view selection is indicated with a
          range indicator in the vertical ruler attached to the left of the
          Java editor.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-12.gif" alt="Range Indicator" />
        </div>
      </li>
    </ol>

</div>

<div class="Topic">

    <h2>Adding Methods and Using Code Assist</h2>

    <ol>
      <li>
        <p class="Para">
          Ensure that the alphabetical Sort button in the toolbar of the Outline view
          is toggled off.
        </P>
      </li>

      <li>
        <p class="Para">
          Start adding a method by typing the following at the end of the
          <span class="Filename">VectorTest.java</span> file
          (but before the closing brackets of the type) in the Java editor:
        </p>

        <pre class="Code">public void testSizeIsThree() {</pre>

        <P class="Para">
          As soon as you type the method name in the editor area,
          the new method appears at the bottom of the Outline view.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-13.gif" alt="New Method in Outline View" />
        </div>
      </li>

      <li>
        <p class="Para">
          Click the <span class="Label">Save</span> button.
        </p>

        <p class="Para">
          The compilation unit is compiled automatically and
          errors show up in the Packages view, in the Tasks view and on the
          vertical ruler. Notice that in the Package Explorer,
          the errors are propagated up to the project of the
          compilation unit containing the error.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-14.gif" alt="Error Propagation in Package Explorer" />
        </div>
      </li>
 
      <li>
        <p class="Para">
          Complete the new method by typing the following:
        </p>

         <pre class="Code">    assertTrue(fFull.size() == 3);
}</pre>
      </li>

      <li>
        <p class="Para">
          Save the file.
        </p>
        
        <p class="Para">
          Notice that the errors disappear.
        </p>
      </li>
    </ol>

</div>

<div class="Topic">

    <h2>Deleting and Replacing a Method from the Local History</h2>

    <p class="Para">
      In this section, you will use the local history feature to easily switch
      to a previously saved version of an individual Java element.
    </p>

    <ol>
      <li>
        <p class="Para">
          Delete the method you just created by selecting it in the Outline view
          and clicking <span class="Label">Delete it</span> from the
          context menu.
        </p>
      </li>
 
      <li>
        <p class="Para">
          Add a new version of the method by typing the following at the end of the
          <span class="Filename">VectorTest.java</span> file
          in the Java editor:
        </p>

        <pre class="Code">public void testSizeIsThree() {
    fFull.add(0, new Integer(0));
    fFull.remove(new Integer(3));
    assertTrue(fFull.size() == 3);
}</pre>

        <p class="Para">
          Save the file when you are done.
        </p>
      </li>

      <li>
        <p class="Para">
          In the Outline view, select the method <code>testSizeIsThree()</code>,
          and from its context menu, select
          <span class="Label">Replace from Local History</span>.
        </p>
      </li>

      <li>
        <p class="Para">
          In the
          <span class="Label">Replace Java Element from Local History</span>
          dialog, the Local History list shows the various saved states of
          that element, and the Java Source Compare pane shows details
          of the differences between the selected history resource and
          the existing workbench resource.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-15.gif" alt="Replace from Local History" />
        </div>
      </li>

      <li>
        <p class="Para">
          In the Local History pane, select the version that you deleted,
          then click <span class="Label">Replace</span>.
        </p>

        <p class="Para">
          The code in the editor is replaced with the history version.
        </p>
      </li>

      <li>
        <p class="Para">
          Save the file.
        </p>
      </li>
    </ol>

</div>

<div class="Topic">

    <h2>Using Content Assist</h2>

    <ol>
      <li>
        <p class="Para">
          Open the
          <span class="Filename">junit.samples.VectorTest.java</span>
          file in the Java editor.
        </p>
      </li>

      <li>
        <P class="Para">
          Go to the <code>testSizeIsThree()</code> method by selecting it
          in the Outline view.
        </p>
      </li>

      <li>
        <p class="Para">
          Add the following lines to the end of the method:
        </p>

        <pre class="Code">Vector v = new Vector();
for (int i=0; i&lt;3; i++)
    v.addElement(new Object());
assert</pre>
      </li>

      <li>
        <p class="Para">
          With your cursor at the end of the word
          <code>assert</code>,
          press <key>Ctrl</key>+<key>Space</key> to activate content assist.
        </p>

        <p class="Para">
          The content assist window with a list of proposals will appear.
          Scroll down a bit in the list to see the available choices.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-16.gif" alt="Content Assist" />
        </div>
      </li>

      <li>
        <p class="Para">
          With the content assist window still active, type the letter
          't' after <code>assert</code> (with no space in between).
          The list is narrowed and now only shows entries starting with
          'assertt'.
        </p>

        <p>
          Select and then hover over various items in the list to view any
          available Javadoc help for each item.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-17.gif" alt="Content Assist Filtered" />
        </div>

      </li>
 
      <li>
        <p class="Para">
          Select <code>assertTrue(boolean)</code> from the list and press
          <key>Enter</key>.
        </p>
        
        <p>
          The code for the <code>assertTrue(boolean)</code> method is inserted.
        </p>
      </li>

      <li>
        <p class="Para">
          Complete the line such that it reads as follows:
        </p>

        <pre class="Code">assertTrue(v.size() == fFull.size());</pre>
      </li>

      <li>
        <p class="Para">
          Save the file.
        </p>
      </li>
    </ol>

</div>

<div class="Topic">

    <h2>Using Import Assist</h2>

    <ol>
      <li>
        <p class="Para">
          Open the
          <span class="Filename">junit.samples.VectorTest.java</span>
          file in the Java editor.
        </p>
      </li>
 
      <li>
        <p class="Para">
          Delete the import declarations by selecting them in the
          Outline view and selecting <span class="Label">Delete</span> from
          the context menu.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-18.gif" alt="Outline View Context Menu" />
        </div>
      </li>

      <li>
        <p class="Para">
          From the context menu in the editor, select
          <span class="Label">Organize Imports</span>.
        </p>

        <p class="Para">
          The required import statements are added to the beginning of your
          code below the package declaration.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-19.gif" alt="Organize Imports" />
        </div>
        
        <div class="Note"><p class="Para">
          Note: Alternatively, you could have invoked
          <span class="Label">Organize Imports</span>
          directly from the context menu of the import declarations
          in the Outline view.
        </p></div>

        <div class="Note"><p class="Para">
          Note: You can control the order of the import statement in the
          preferences pages
          (Window &gt; Preferences &gt; Java &gt; Organize Imports).
        </p></div>
      </li>

      <li>
        <p class="Para">
          Save the file.
        </p>
      </li>
    </ol>

</div>

<div class="Topic">

    <h2>Extract a Method</h2>

    <p class="Para">
      In this section, you will improve the code of the constructor of
      <span class="Filename">junit.framework.TestSuite</span>.
      To make the intent of the code more clear, you will extract the code
      that collects test cases from base classes into a new method called
      <span class="Filename"> collectTestMethods</span>.
    </p>

    <ol>
      <li>
        <p class="Para">
          In the <span class="Filename">junit.framework.TestSuite.java</span>
          file, select the following range of code:
        </p>

        <pre class="Code">Class superClass= theClass;
Vector names= new Vector();
while (Test.class.isAssignableFrom(superClass)) {
    Method[] methods= superClass.getDeclaredMethods();
    for (int i= 0; i &lt; methods.length; i++) {
        addTestMethod(methods[i], names, constructor);
    }
    superClass= superClass.getSuperclass();
}</pre>
      </li>

      <li>
        <p class="Para">
          From the selection's context menu in the editor, select
          <span class="Label">Refactor > Extract Method...</span>.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-20.gif" alt="Context Menu Extract Method" />
        </div>
      </li>

      <li>
        <p class="Para">
          In the <span class="Label">Method Name</span>
          field, type <span class="Filename">collectInheritedTests</span>,
          then click <span class="Label">Next</span>.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-21.gif" alt="Extract Method Wizard Page 1" />
        </div>
      </li>

      <li>
        <p class="Para">
          The refactoring preview page displays the changes that will be made.
        </p>
        
        <p>
          Press <span class="Label">Finish</span> to extract the method.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-22.gif" alt="Extract Method Wizard Page 2" />
        </div>
      </li>

      <li>
        <p class="Para">
          Go to the extracted method by selecting it in the Outline view.
        </p>
 
        <div class="Snapshot">
          <img src="../images/qs-23.gif" alt="Extracted Method" />
        </div>
      </li>
    </ol>

</div>
<div class="Topic">

    <h2>Using Open on Selection and Open on Type Hierarchy</h2>

    <ol>
      <li>
        <p class="Para">
          Open the
          <span class="Filename">junit.samples.money.MoneyTest.java</span>
          file in the Java editor.
        </p>
      </li>

      <li>
        <p class="Para">
          On the first line of the MoneyTest class declaration,
          select the TestCase superclass specification and either
        </p>

        <ul class="UnorderedList">
          <li class="Item">
            select from the menu bar Navigate &gt; Open on Selection or
          </li>

          <li class="Item">press <key>F3</key>.</li>
        </ul>

        <div class="Note">
        <p class="Para">
          Note: This command also works on methods and fields.
        </p></div>

        <div class="Snapshot">
          <img src="../images/qs-24.gif" alt="Menu Open Declaration" />
        </div>

        <p class="Para">
          The TestCase superclass opens in the editor area and is also
          represented in the Outline view.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-25.gif" alt="Opened Declaration" />
        </div>
      </li>

      <li>
        <p class="Para">
          Click the <span class="Filename">TestCase.java</span>
          editor tab to make it the active editor.
          Ensure that the class declaration is still selected, and:
        </p>

        <ul class="UnorderedList">
          <li class="Item">
            select from the menu bar Navigate &gt; Open Type Hierarchy or
          </li>
          <li class="Item">press F4.</li>
        </ul>

        <div class="Snapshot">
          <img src="../images/qs-26.gif" alt="Menu Open Type Hierarchy" />
        </div>
      </li>

      <li>
        <p class="Para">
          The Hierarchy view opens with the TestCase class displayed.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-27.gif" alt="Type Hierarchy View" />
        </div>

        <div class="Note">
        <p class="Para">
          Note: You can also open editors on the types and methods in the
          Hierarchy view.
        </p></div>

        <p class="Para">
        </p>
      </li>
    </ol>

    <div class="copyright">
      <img src="../images/ngibmcpy2002.gif"
        alt="Copyright IBM Corporation 2000, 2002. All Rights Reserved." />
    </div>

  </body>
</html>
