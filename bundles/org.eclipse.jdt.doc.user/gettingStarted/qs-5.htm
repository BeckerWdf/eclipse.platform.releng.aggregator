<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html>
  <head>
    <title>Editing Java elements</title>
    <link rel="stylesheet" href="../book.css" charset="ISO-8859-1" type="text/css" />
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <meta http-equiv="Content-Style-Type" content="text/css" />
  </head>

  <body>
    <h1 class="Head">Editing Java elements</h1>

    <p class="Para">
      In this section, you will edit Java elements in the workbench.
    </p>

    <div class="Topic">

    <h2>Using the outline view</h2>

    <ol>
      <li>
        <p class="Para">
          To open the file
          <span class="Filename">junit.samples.VectorTest.java</span>
          in the Java editor, double click on the file in the Package Explorer view.
        </p>
      </li>

      <li>
        <p class="Para">
          Notice the syntax highlighting. Examples of parts of java source
          which are rendered differently are:
        </p>

        <ul class="UnorderedList">
          <li class="Item">Regular comments</li>
          <li class="Item">Javadoc comments</li>
          <li class="Item">Keywords</li>
          
        <li class="Item">Strings.</li>
        </ul>

        <div class="Snapshot">
          <img src="../images/qs-8.gif" alt="Syntax highlighting" />
        </div>
      </li>

      <li>
        <p class="Para">
          Look at the Outline view.
          It displays an outline of the Java file
          including the package declaration, import declarations,
          fields, types and methods.

          The Outline view also indicates whether a Java element
          is static, abstract, final, etc. The outline view also shows you whether
		  a method is overridden from a base class (<img src="../images/org.eclipse.jdt.ui/ovr16/over_co.gif" alt="overridden" />) or when it implements a method
		  from an interface (<img src="../images/org.eclipse.jdt.ui/ovr16/implm_co.gif" alt="implements" />).
        </p>

        <div class="Snapshot">
          <img src="../images/qs-9.gif" alt="Outline view" />
        </div>
      </li>

      <li>
        <p class="Para">
          Toggle the
          <span class="Label">Hide Fields</span>,
          <span class="Label">Hide Static Members</span>, and
          <span class="Label">Hide Non-Public Members</span>
          buttons in the Outline view toolbar to filter the view's display.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-10.gif" alt="Outline view tool bar" />
        </div>
      </li>

      <li>
        <p class="Para">
          Toggle the <span class="Label">Sort</span>
          button in the Outline view to sort the Java elements in
          alphabetical order rather than in the order they appear in the
          Java file.
        </p>
      </li>

      <li>
        <p class="Para">
          You can edit source code by viewing the whole 
          Java file, or you can narrow the view to a single Java element.
          Click the
          <span class="Label">Show Source of Selected Element Only</span>
          button in the toolbar.
        </p>

        <p class="Para">
          Next, In the Outline view, select any element and note that only
          the selected element is displayed in the Java editor.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-11.gif" alt="Show selected element only tool bar button" />
        </div>
      </li>

      <li>
        <p class="Para">
          Press the
          <span class="Label">Show Source of Selected Element Only</span>
          button again to see the whole Java file again.
        </p>

        <p class="Para">
          In the Outline view, select different elements and note that they
          are once again displayed in a whole file view in the editor.
         The Outline view selection is now indicated with a
          range indicator on the vertical ruler on the left border of the
          Java editor.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-12.gif" alt="Range indicator" />
        </div>
      </li>
    </ol>

</div>

<div class="Topic">

    <h2>Adding methods and using code assist</h2>

    <ol>
      <li>
        <p class="Para">
          Confirm that the alphabetical Sort button in the toolbar of the Outline view
          is toggled off.
        </p>
      </li>

      <li>
        <p class="Para">
          Start adding a method by typing the following at the end of the
          <span class="Filename">VectorTest.java</span> file
          (but before the closing brackets of the type) in the Java editor:
        </p>

        <pre class="Code">public void testSizeIsThree() {</pre>

        <p class="Para">
          As soon as you type the method name in the editor area,
          the new method appears at the bottom of the Outline view.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-13.gif" alt="New method in outline view" />
        </div>
      </li>

      <li>
        <p class="Para">
          Click the <span class="Label">Save</span> button.
        </p>

        <p class="Para">
          The compilation unit is compiled automatically and
          errors show up in the Package Explorer view, in the Tasks view and on the
          vertical ruler. In the Package Explorer view, the errors are propagated
          up to the project of the compilation unit containing the error.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-14.gif" alt="Error propagation in package explorer" />
        </div>
      </li>
 
      <li>
        <p class="Para">
          Complete the new method by typing the following:
        </p>

         <pre class="Code">    assertTrue(fFull.size() == 3);
}</pre>
      </li>

      <li>
        <p class="Para">
          Save the file.
        </p>
        
        
      <p class="Para"> Notice that the error indicators disappear.</p>
      </li>
    </ol>

</div>

<div class="Topic">

    <h2>Deleting and replacing a method from the local history</h2>

    <p class="Para">
      In this section, you will use the local history feature to switch
      to a previously saved version of an individual Java element.
    </p>

    <ol>
      <li>
        <p class="Para">
          Delete the method you just created by selecting it in the Outline view
          and clicking <span class="Label">Delete</span> from the
          context menu.
        </p>
      </li>
 
      <li>
        <p class="Para">
          Add a new version of the method by typing the following at the end of the
          <span class="Filename">VectorTest.java</span> file
          in the Java editor:
        </p>

        <pre class="Code">public void testSizeIsThree() {
    fFull.add(0, new Integer(0));
    fFull.remove(new Integer(3));
    assertTrue(fFull.size() == 3);
}</pre>

        <p class="Para">
          Save the file.
        </p>
      </li>

      <li>
        <p class="Para">
          In the Outline view, select the method <code>testSizeIsThree()</code>,
          and from its context menu, select
          <span class="Label">Replace from Local History</span>.
        </p>
      </li>

      <li>
        <p class="Para">
          In the
          <span class="Label">Replace Java Element from Local History</span>
          dialog, the Local History list shows the various saved states of
          that element. The Java Source Compare pane shows details
          of the differences between the selected history resource and
          the existing workbench resource.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-15.gif" alt="Replace from local history" />
        </div>
      </li>

      <li>
        
      <p class="Para"> In the Local History pane, select the version that you 
        deleted, then click <span class="Label">the Replace button</span>. </p>

        <p class="Para">
          In the Java editor, the method is replaced with the selected
          history version.
        </p>
      </li>

      <li>
        <p class="Para">
          Save the file.
        </p>
      </li>
    </ol>

</div>

<div class="Topic">

    <h2>Using content assist</h2>

    <ol>
      <li>
        <p class="Para">
          Open the
          <span class="Filename">junit.samples.VectorTest.java</span>
          file in the Java editor.
        </p>
      </li>

      <li>
        <p class="Para">
          Go to the <code>testSizeIsThree()</code> method by selecting it
          in the Outline view.
        </p>
      </li>

      <li>
        <p class="Para">
          Add the following lines to the end of the method:
        </p>

        <pre class="Code">Vector v = new Vector();
for (int i=0; i&lt;3; i++)
    v.addElement(new Object());
assert</pre>
      </li>

      <li>
        <p class="Para">
          With your cursor at the end of the word
          <code>assert</code>,
          press <kbd>Ctrl</kbd>+<kbd>Space</kbd> to activate content assist.
        </p>

        <p class="Para">
          The content assist window with a list of proposals will appear.
          Scroll the list to see the available choices.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-16.gif" alt="Content assist" />
        </div>
      </li>

      <li>
        <p class="Para">
          With the content assist window still active, type the letter
          't' after <code>assert</code> (with no space in between).
          The list is narrowed and only shows entries starting with
          'assert'.
        </p>

        <p>
          Select and then hover over various items in the list to view any
          available Javadoc help for each item.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-17.gif" alt="Content assist filtered" />
        </div>

      </li>
 
      <li>
        <p class="Para">
          Select <code>assertTrue(boolean)</code> from the list and press
          <kbd>Enter</kbd>.
        </p>
        
        <p>
          The code for the <code>assertTrue(boolean)</code> method is inserted.
        </p>
      </li>

      <li>
        
      <p class="Para"> Complete the line so that it reads as follows: </p>

        <pre class="Code">assertTrue(v.size() == fFull.size());</pre>
      </li>

      <li>
        <p class="Para">
          Save the file.
        </p>
      </li>
    </ol>

</div>

<div class="Topic">

    <h2>Using templates</h2>

    <ol>
      <li>
        
      <p class="Para"> Open the <span class="Filename"><i>junit.samples.VectorTest.java</i></span> 
        file in the Java editor. </p>
      </li>

      <li>
        <p class="Para">
          Start adding a new method by typing the following:
        </p>

        <pre class="Code">public void testValues() {
    Integer[] expected= new Integer[3];
    for</pre>
      </li>
 
      <li>
        
      <p class="Para"> With the cursor at the end of <code>for</code>, type <kbd>Ctrl</kbd>+<kbd>Space</kbd> 
        to enable content assist. </p>

        <div class="Figure">
          <img src="../images/qs-17b.gif" alt="Content assist for for" />
        </div>
      </li>

      <li>
        
      <p class="Para"> Choose the <code>for - iterate over array</code> entry.</p>
        
        
      <p class="Para"> The template is inserted in the editor and <code>i</code> is highlighted. 
        The local array name is guessed automatically. </p>
        
        <div class="Figure">
          <img src="../images/qs-17c.gif" alt="Inserted for template" />
        </div>
      </li>
      
      <li>
        <p class="Para">
          Press <kbd>Enter</kbd> to confirm the template.
        </p>
      </li>
      
      <li>        
        
      <p class="Para"> Complete the <code>for</code> loop to: </p>

        <pre class="Code">public void testValues() {
    Integer[] expected= new Integer[3];
    for (int i= 0; i &lt; expected.length; i++) {
        expected[i]= i + 1;
    }
    
    Integer[] actual= to</pre>        
      </li>

      <li>
        
      <p class="Para"> With the cursor at the end of <code>to</code>, type <kbd>Ctrl</kbd>+<kbd>Space</kbd> 
        to enable content assist. Pick <code>toarray - convert collection to array</code>. 
      </p>

        <div class="Figure">
          <img src="../images/qs-17d.gif" alt="Inserted for template" />
        </div>
        
        
      <p class="Para"> The template is inserted in the editor and <code>type</code> 
        is highlighted and selected. </p>

        <div class="Figure">
          <img src="../images/qs-17e.gif" alt="Inserted for template" />
        </div>
      </li>
      
      <li>
        
      <p class="Para"> Overwrite the selection by typing <code>Integer</code>. 
        The type of the array constructor changes synchronously. </p>
      </li>

      <li>
        
      <p class="Para"> Type <kbd>Tab</kbd> to highlight and select <code>collection</code> 
        and Overwrite the selection by typing <code>fFull</code>. </p>

        <div class="Figure">
          <img src="../images/qs-17f.gif" alt="Inserted for template" />
        </div>
      </li>

      <li>
       <p class="Para">
         Type <kbd>Enter</kbd> to confirm the template.
       </p>
     </li>

      <li>
       <p class="Para">
         Add the following lines of code to complete the method:
       </p>
       
        <pre class="Code">        assertEquals(expected.length, actual.length);
        for (int i= 0; i &lt; actual.length; i++)
            assertEquals(expected[i], actual[i]);
    }</pre>
      </li>
      
      <li>
        <p class="Para">
          Save the file.
        </p>
      </li>
    </ol>

</div>

<div class="Topic">

    <h2>Organizing imports</h2>

    <ol>
      <li>
        <p class="Para">
          Open the
          <span class="Filename">junit.samples.VectorTest.java</span>
          file in the Java editor.
        </p>
      </li>
 
      <li>
        <p class="Para">
          Delete the import declarations by selecting them in the
          Outline view and selecting <span class="Label">Delete</span> from
          the context menu.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-18.gif" alt="Outline view context menu" />
        </div>
      </li>

      <li>
        <p class="Para">
          From the context menu in the editor, select
          <span class="Label">Organize Imports</span>.
        </p>

        <p class="Para">
          The required import statements are added to the beginning of your
          code below the package declaration.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-19.gif" alt="Organize imports" />
        </div>
        
        <p class="Para">
          Alternatively, <span class="Label">Organize Imports</span> 
          can be invoked directly from the context menu of the
          import declarations in the Outline view.
        </p>

        <div class="Note"><p class="Para">
          Note: You can specify the order of the import declarations in
          <span class="Label">Preferences</span>
          (Window &gt; Preferences &gt; Java &gt; Organize Imports).
        </p></div>
      </li>

      <li>
        <p class="Para">
          Save the file.
        </p>
      </li>
    </ol>

</div>

<div class="Topic">

    <h2>Extract a method</h2>

    <p class="Para">
      In this section, you will improve the code of the constructor of
      <span class="Filename">junit.framework.TestSuite</span>.
      To make the intent of the code more clear, you will extract the code
      that collects test cases from base classes into a new method called
      <span class="Filename"> collectTestMethods</span>.
    </p>

    <ol>
      <li>
        <p class="Para">
          In the <span class="Filename">junit.framework.TestSuite.java</span>
          file, select the following range of code:
        </p>

        <pre class="Code">Class superClass= theClass;
Vector names= new Vector();
while (Test.class.isAssignableFrom(superClass)) {
    Method[] methods= superClass.getDeclaredMethods();
    for (int i= 0; i &lt; methods.length; i++) {
        addTestMethod(methods[i], names, constructor);
    }
    superClass= superClass.getSuperclass();
}</pre>

        
      <p class="Para"> Select the code range by using the <b>Expand Selection 
        to</b> feature: </p>
        
        <ol>
          <li>Navigate to the constructor <code>TestSuite(Class)</code>.</li>
          
        <li>Set the cursor just before <code>while</code>.</li>
          <li>Press <kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>Arrow Up</kbd>.</li>
          <li>Press <kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>Arrow Left</kbd> twice.</li>          
        </ol>
      </li>

      <li>
        <p class="Para">
          From the selection's context menu in the editor, select
          <span class="Label">Refactor > Extract Method...</span>.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-20.gif" alt="Context menu extract method" />
        </div>
      </li>

      <li>
        <p class="Para">
          In the <span class="Label">Method Name</span>
          field, type <span class="Filename">collectInheritedTests</span>,
          then click <span class="Label">Next</span>.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-21.gif" alt="Extract method wizard page 1" />
        </div>
      </li>

      <li>
        <p class="Para">
          The refactoring preview page displays the changes that will be made.
        </p>
        
        <p>
          Press <span class="Label">Finish</span> to extract the method.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-22.gif" alt="Extract method wizard page 2" />
        </div>
      </li>

      <li>
        <p class="Para">
          Go to the extracted method by selecting it in the Outline view.
        </p>
 
        <div class="Snapshot">
          <img src="../images/qs-23.gif" alt="Extracted method" />
        </div>
      </li>
    </ol>

</div>
<div class="Topic">

    <h2>Using open declaration and open on type hierarchy</h2>

    <ol>
      <li>
        <p class="Para">
          Open the
          <span class="Filename">junit.samples.money.MoneyTest.java</span>
          file in the Java editor.
        </p>
      </li>

      <li>
        <p class="Para">
          On the first line of the MoneyTest class declaration,
          select the TestCase superclass specification and either
        </p>

        <ul class="UnorderedList">
          <li class="Item">
            select from the menu bar Navigate &gt; Open Declaration or
          </li>

          <li class="Item">press <kbd>F3</kbd>.</li>
        </ul>

        <div class="Note">
        <p class="Para">
          Note: This command also works on methods and fields.
        </p></div>

        <div class="Snapshot">
          <img src="../images/qs-24.gif" alt="Menu open declaration" />
        </div>

        <p class="Para">
          The TestCase superclass opens in the editor area and is also
          represented in the Outline view.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-25.gif" alt="Opened declaration" />
        </div>
      </li>

      <li>
        <p class="Para">
          Click the <span class="Filename">TestCase.java</span>
          editor tab to make it the active editor.
          Ensure that the class declaration is still selected, and:
        </p>

        <ul class="UnorderedList">
          <li class="Item">
            select from the menu bar Navigate &gt; Open Type Hierarchy or
          </li>
          <li class="Item">press <kbd>F4</kbd>.</li>
        </ul>

        <div class="Snapshot">
          <img src="../images/qs-26.gif" alt="Menu open type hierarchy" />
        </div>
      </li>

      <li>
        <p class="Para">
          The Hierarchy view opens with the TestCase class displayed.
        </p>

        <div class="Snapshot">
          <img src="../images/qs-27.gif" alt="Type hierarchy view" />
        </div>

        <div class="Note">
        <p class="Para">
          Note: You can also open editors on types and methods in the
          Hierarchy view.
        </p></div>

        <p class="Para">
        </p>
      </li>
    </ol>

</div>
    
    <p><img border="0" src="../images/ngrelc.gif" alt="Related concepts" width="159" height="27"></p>
    <p> <a href="../tasks/tasks-6.htm">Java 
      views</a><br>
      <a href="../concepts/concepts-7.htm">Java 
      editor</a><br>
      <a href="../concepts/concepts-9.htm">Refactoring 
      support</a><br>
      <a href="../concepts/ctemplates.htm">Templates</a><br>
    </p>
    <p> <img src="../images/ngrelt.gif" alt="Related tasks" border=0 height=27 width=159> 
    </p>
    <p><a href="../tasks/tasks-54.htm">Using the Java editor</a><br>
    <a href="../tasks/tasks-2.htm">Showing and hiding elements</a><br>
      <a href="../tasks/tasks-6.htm">Showing single elements or whole Java files</a><br>
      <a href="../tasks/tasks-195.htm">Sorting elements in Java views</a><br>
      <a href="../tasks/tasks-62.htm">Using the local history</a><br>
      <a href="../tasks/tasks-65.htm">Using content assist</a><br>
      <a href="../tasks/tasks-171.htm">Using templates</a><br>
      <a href="../tasks/tasks-58.htm">Managing import statements</a><br>
      <a href="../tasks/tasks-80.htm">Refactoring</a><br>
      <a href="../tasks/tasks-83.htm">Refactoring with preview</a><br>
      <a href="../tasks/tasks-37.htm">Using the Hierarchy view</a><br>
    <a href="../tasks/tasks-39.htm">Opening a type hierarchy on a Java element</a><br>
      <a href="../tasks/tasks-40.htm">Opening a type hierarchy on the current 
      text selection</a><br>
      <a href="../tasks/tasks-73.htm">Opening an editor for a selected element</a><br>
    </p>

    <p>
      <img src="../images/ngrelr.gif" alt="Related reference" />
    </p>

    <p>
      <a href="../reference/ref-view-outline.htm">Java Outline View</a><br />
      <a href="../reference/ref-143.htm">Java Content Assist</a><br />
      <a href="../reference/ref-preferences-templates.htm">Templates Preferences</a><br />
      <a href="../reference/ref-22.htm">Organize Imports Preferences</a><br />
      <a href="../reference/ref-21.htm">Java Editor Preferences</a><br />
      <a href="../reference/ref-154.htm">Extract Method Errors</a><br />
      <a href="../reference/ref-type-hierarchy.htm">Type Hierarchy View</a><br />
    </p>
		
  <div class="copyright"> 
    <p><a href="../hglegal2002.htm"><img src="../images/ngibmcpy2002.gif"
          alt="Copyright IBM Corporation 2000, 2002. All Rights Reserved." border=0/> 
      </a> </p>
  </div>

  </body>
</html>
