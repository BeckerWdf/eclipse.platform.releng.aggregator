<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
  <head>
    <title>
      Implementing and Running JUnit Tests
    </title>
    <link rel="stylesheet" href="../book.css" charset="ISO-8859-1" type="text/css">
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <meta http-equiv="Content-Style-Type" content="text/css">
  </head>
  <body>
    <h1>
      Writing and Running JUnit Tests
    </h1>
    <p>
      In this section, you will be using the <a href="http://www.junit.org"> JUnit</a> 
    testing framework to write and run tests. To get started with JUnit you can
    refer to the <a href="http://junit.sourceforge.net/doc/cookbook/cookbook.htm">JUnit
    Cookbook</a>.
    </p>
    <h2>
      Writing Tests
    </h2>
    
    <p>
      Before you can write JUnit tests you have to add the <strong>junit.jar</strong>
      library to your build class path. The Eclipse installation includes JUnit
      in the <i>org.junit</i> plug-in:
    </p>
    
    <ol>
      <li>Create a project &quot;JUnitTest&quot;
      <li>Open the project's build path property page
      <li>Switch to the <b> Libraries</b> tab</li>
      <li>Add the <i> junit.jar</i> contained in org.junit in the plugins
        directory as an external JAR to your
        project.</li>
    </ol>
    Optionally, if you want to browse the JUnit source, then attach the <i>junitsrc.zip</i>
    to the <i> junit.jar</i>. The source zip is located in the org.eclipse.jdt.source
    plugin in src/org.junit_3.8.1.&nbsp;<p>Now that the JUnitTest project has access to the JUnit classes you can write your
    first test. You implement the test in a subclass of <strong>TestCase</strong>. You can
    do so either using the standard Class wizard or the specialized <strong>Test Case </strong>wizard:&nbsp;</p>
    <ol>
      <li>Open the New wizard</li>
      <li>Select <span class="control">Java &gt; JUnit</span> in the left pane
        and <strong>TestCase</strong> in the right pane and press <strong>Next</strong>.</li>
      <li>Enter &quot;<i>TestFailure&quot;</i> as the name of your test class:<img border="0" src="../images/qs-jun1.gif" alt="TestCase creation wizard page 1"><br>
      </li>
      <li>Press <strong>Finish</strong> to create the test class.
      </li>
    </ol>
    
    <p>Add a test method that fails to the class <i>TestFailure</i>. A quick
        way to enter a test method is with the <i>test</i> template. To do so
        type &quot;test&quot; followed by <b>Ctrl+Space</b> to activate code
        assist and select the &quot;test&quot; template. Change the name of the
    created method to <i>testFailure</i> and invoke the <i>fail() </i>method.</p>

       <code>public void testFailure() {<br>
       &nbsp;&nbsp;&nbsp; fail();<br>
       }
    </code>   
     
    <p>Now you are ready to run your first test.</p>

    <h2>
      Running Tests
    </h2>
    
    <p><font color="#000000">To run the TestFailure you press the <b>Run</b> dropdown
    menu in the toolbar and select <span class="control">Run as &gt; JUnit Test</span>.
    Y</font>ou inspect the test results in the <i>JUnit</i> view. This view <font color="#000000">shows
    you the test run progress and status:</font></p>

    <p><img border="0" src="../images/qs-jun3.gif" alt="Failed test"></p>

    <p> <font color="#000000"> The view is shown in the current
    perspective whenever you start a test run. A convenient arrangement for the
    JUnit view is to dock it as fast view. The JUnit view has two tabs one shows
    you a list of failures and the other one shows you the full test suite as
    a tree. You can navigate from a failure to the corresponding source by
    double clicking the corresponding line in the failure trace.&nbsp;</font></p>

    <p><font color="#000000">Dock the JUnit view as a fast view, remove the <i>
    fail()</i> statement in the method <i> testFailure()</i> so that the test passes and rerun
    the test again. You can rerun a test either by pressing the <b>Rerun</b> button in
    the view's tool bar or you can re-run the last launched program by pressing
    the <b>Run</b> drop down. The test succeeds this time. Since the test
    succeeded the JUnit view isn't popped-up, but an the success indicator is shown
    the JUnit view icon and the test result is shown in the status line. As a reminder
    to rerun your test's the view icon is decorated by a &quot;*&quot;
    whenever there you change the workspace contents after the run.</font></p>

    <blockquote>
      <p><img border="0" src="../images/qs-jun2.gif" alt="Successful test" width="23" height="23">
      - A successful test run<br>
      <img border="0" src="../images/qs-jun4.gif" alt="Successful test but workspace has changed" width="25" height="23"> -
      A successful test run, but the workspace contents has changed after the
      test has finished.</p>

    </blockquote>
    <p>In addition to running a test case as described above you can also:</p>
    <ul>
      <li>Run all tests inside a project, source folder, or package:&nbsp;<br>
        select a package or source folder and run all the included tests with <font color="#000000"><span class="control">Run as &gt; JUnit Test</span>.
        This command finds all tests inside a project, source folder or package
        and executes them.</font></li>
      <li>Run a single test method:<br>
        select a test method in the Outline or Package Explorer and with <font color="#000000"><span class="control">Run as &gt; JUnit Test
        </span></font>you run the selected test method.</li>
      <li>Rerun a single test:<br>
        select a test in the JUnit view an execute <b>Rerun </b>from the context
        menu.</li>
    </ul>

    <h2>
      Customizing a Test Configuration
    </h2>
    
    <p>When you want to pass parameters or customize the
    settings for a test run you open the Launch Configuration Dialog. Select <strong>Run...</strong>.in the <strong>Run</strong>
    drop-down menu in the toolbar:</p>
    <p><img border="0" src="../images/qs-jun5.gif" alt="JUnit Launch Configuration"></p>
    <p>In this dialog you can specify the test to be run, its arguments, its run-time
    class path, and the Java run-time environment.</p>

    <h2>
      Debugging a Test Failure
    </h2>
    
    <p>In the case of a test failure you can follow these steps to debug it:</p>
    <ol>
      <li>Double click the failure entry from the stack trace in the JUnit view to open the
        corresponding file in the editor.
      <li>Set a breakpoint at the beginning of the test method.
      <li>Select the test case and execute&nbsp; <b>Debug As&gt;JUnit Test</b> from
        the <b>Debug </b>drop down.
    </ol>
    <p>A JUnit launch configuration has a &quot;keep alive&quot; option. If your
    Java virtual machine supports &quot;hot code replacement&quot; you can fix the code and rerun the test
    without restarting the full test run. To enable this option select the <span class="control">Keep
    JUnit running after a test run when debugging</span>  checkbox in the JUnit
    launch configuration.</p>

    <h2>
      Creating a Test Suite
    </h2>
    
    <p>
      The JUnit <b>TestSuite </b>wizard helps you with the creation of a test
      suite. You can select the set of classes that should belong to a suite. To
      do so you open the&nbsp;
    </p>
    
    <ol>
      <li>Open the New wizard</li>
      <li>Select <span class="control">Java &gt; JUnit</span> in the left pane
        and <strong>TestSuite</strong> in the right pane and press <strong>Next</strong>.</li>
      <li>Enter the name of your desired test suite class (the common convention is
        &quot;AllTests&quot; and is already filled in for you).<br>
        <img border="0" src="../images/qs-jun6.gif" alt="Test Suite wizard"><br>
      </li>
      <li>Select the classes that should be included in the suite. We currently
        have a single test class only, but you can expand the suite later.</li>
    </ol>
    
    <p>You can add new test classes (or remove some) to the created suite:</p>
    <ul>
      <li>Either manually or
      <li>By re-running the wizard and selecting the new set of test classes.</li>
    </ul>
    <p>Note: the wizard puts 2 special markers (<code>//$JUnit-BEGIN$</code> and
    <code>//$JUnit-END$</code>) into the created Test suite class, which allows
    the wizard to update existing test suite classes. It is recommended not to
    edit code in between the markers.</p>
    <p>
      <a href="../hglegal2002.htm"><img src="../images/ngibmcpy2002.gif" alt="Copyright IBM Corporation 2000, 2002. All Rights Reserved." border="0"></a>
    </p>
  </body>
</html>

