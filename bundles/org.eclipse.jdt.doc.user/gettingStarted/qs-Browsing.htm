<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>
      Preparing the workbench
    </title>
    <link rel="stylesheet" href="../book.css" charset="ISO-8859-1" type="text/css">
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <meta http-equiv="Content-Style-Type" content="text/css">
  </head>
  <body>
    <h1>
      Using the Java browsing perspective
    </h1>
    <p>
      In this section you will use the Java browsing perspective to browse and
      manipulate your code. Section <a href="qs-4.htm">Browsing Java elements with the 
      Package Explorer</a> gave an overview about using the Package Explorer to browse
      elements. In contrast to the Package Explorer, which organizes all Java elements
      in a tree, consisting of projects, packages, compilation units, types, ..., the
      browsing perspective uses distinct views to present the same information. Selecting 
      an element in one view, will show its content in another view. To open a browsing
      perspective activate <strong>Window &gt; Open Perspective &gt; Java Browsing</strong> from 
      within the Java perspective or use the context menu of the <strong>Open a Perspective
      </strong> toolbar button.
    </p>
    <p>
	  <img src="../images/qs-browsing1.gif" alt="Java browsing perspective">
    </p>
    <p>
      The views of the perspective are connected to each other in the following way:
      <ul>
        <li>
          selecting an element in the <strong>Projects</strong> views shows its packages
          in the <strong>Packages</strong> view.
        </li>
        <li>
          the <strong>Types</strong> view shows the types contained in the package selected
          in the <strong>Packages</strong> view.
        </li>
        <li>
          the <strong>Members</strong> view shows the members of a selected type. Regarding its functionality
          the <strong>Members</strong> view it comparable to the <strong>Outliner</strong> used in the normal Java
          perspective.
        </li>
        <li>
          selecting an element in the <strong>Members</strong> view reveals the element in the editor. If there
          isn't any open editor for the element, a double-click on it will open a corresponding editor.
        </li>
      </ul>
    </p>
    <p>
      All four views are per default linked to the active editor. This means that the views will adjust 
      their content and their selection according to the file presented in the active editor. Follow the
      following steps to study this behavior:
      <ul>
        <li>
          select <em>junit.extensions</em> in the <strong>Packages</strong> view.
        </li>
        <li>
          open type <em>TestSetup</em> in the editor by double-clicking it in the <strong>Types view</strong>.
        </li>
        <li>
          now give focus back to the editor opened on file <em>TestCase.java</em> (by clicking on the
          editor tab). Observe, that the <strong>Packages</strong>, <strong>Types</strong> and <strong>
          Members</strong> view adjust the content and their selecting to reflect the active editor. The
          <strong>Packages</strong> view's selection is set to <em>junit.framework</em> and the <strong>
          Types</strong> view shows the content of the <em>junit.framework</em> packages. Furthermore
          the type <em>TestCase</em> is selected.
        </li>
      </ul> 
    </p>
    <p>
      Regarding functionality the Java browsing perspective is fully comparable to the Java perspective.
      The context menus for projects, packages, types, ... and the global menu and tool bar are the same.
      Hence activating these functions works analogous to the Java perspective.
    </p>
  </body>
</html>