<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Miscellaneous</title>

</HEAD>
<BODY BGCOLOR="#ffffff">
<H1 CLASS="Head">Miscellaneous</H1>
<ul>
  <li>You can organize imports by selecting a set of packages and choosing <b>Organize 
    Imports</b> from pop-up manu or <b>Source &gt; Organize</b> Imports from the 
    menu bar.</li>
  <li>You can change the behavior of Organize Imports in <b>Window &gt; Preferences 
    &gt; Java &gt; Organize Imports</b>. Using 0 in the number field creates all 
    imports with *.</li>
  <li>You can add Javadoc comments to a set of members by selecting them and choosing 
    <b>Add Javadoc Comment</b> from the pop-up menu.</li>
  <li>You can run code with syntax errors.</li>
  <li>You can create method stubs by dragging and dropping methods from one class 
    to another with <strong>Ctrl+Shift</strong> (Windows) held down (to create 
    a 'link').</li>
  <li>QuickFix can help you fix spelling mistakes. 
    <ul>
      <li>For example, type <i>&quot;a&quot;.lengh()</i> // note the missing &quot;t&quot; 
        and use QuickFix to correct the spelling mistake.</li>
    </ul>
  </li>
  <li>QuickFix can create method stubs. 
    <ul>
      <li>For example, type a method call <code>iDoNotExist();</code><br>
        If you now press <b>Ctrl+1</b>, Eclipse will offer to create a stub for 
        that method. </li>
    </ul>
  </li>
  <li>QuickFix can create fields, local variables an dmethod parameters: 
    <ul>
      <li>For example, after you type:<br>
        <code>myLuckyNumber = new Integer(100);</code> QuickFix will help you 
        create a field, local variable or parameter <code>myLuckyNumber</code> 
        of type Integer.</li>
    </ul>
  </li>
  <li>Deleting a field that had a getter or/and a setter prompts you to delete 
    them as well.</li>
  <li>Deleting a top-level class prompts you to delete the compilation unit as 
    well. </li>
  <li>To create a nested type, you can drag and drop (either as copy or move) 
    one type to another.</li>
  <li>You can use Override methods to implement interfaces. Select the type and 
    do one of the following: 
    <ul>
      <li>Select <b>Override Methods</b> from the type's pop-up menu or</li>
      <li>Select <b>Source &gt; Override Method</b> from the menu bar.</li>
    </ul>
  </li>
  <li>You can get the local history of an individual method or field.<br>
    Select a method or a field in the Outline or Hierarchy View and execute <b>Replace 
    With &gt; Local history</b> from the pop-up menu. <br>
    This will show you the history of this particular method or field and you 
    can select which version should replace the one in the workspace.<br>
  </li>
  <li>Simliarly, you can add a deleted method or field by using the local history.<br>
    Select a type in the Outline view and execute <b>Restore from Local History</b> 
    from the pop-up menu. </li>
  <li>Single method parameters can be renamed like other local variables - by 
    selecting in the editor and executing <b>Refactor &gt; Rename</b> from the 
    menu bar or pop-up menu.<br>
  </li>
</ul>
<p><img src="../ngibmcpy.gif"> </p>
</BODY>
</HTML>
