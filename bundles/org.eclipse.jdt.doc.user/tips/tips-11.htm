<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <meta http-equiv="Content-Style-Type" content="text/css">
    <link rel="stylesheet" href="../book.css" charset="ISO-8859-1" type="text/css">
    <title>Debugging</title>
  </head>
  <body>
    
<h1> Debugging <br>
</h1>
<table border="0" cellpadding="10" cellspacing="0" width="500">
  <tr> 
    <td width="30%" valign="top" align="right"> 
      <div align="right"> <b>Stop in Main</b> </div>
    </td>
    <td width="70%" valign="top" align="left"> 
      <p>You can use <strong>Stop in main&nbsp;</strong>in a Java Application 
        launch configuration to cause your program to stop at the first executable 
        line of the main method when you run it under debug mode.</p>
      <p><img src="images/stop-in-main.gif" width="478" height="202"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Conditional<br>
      breakpoints</b></td>
    <td width="70%" valign="top" align="left">You can use conditional breakpoints 
      in <strong> Breakpoint Properties... </strong>to control when a breakpoint 
      actually halts execution.&nbsp; You can specify whether you want the breakpoint 
      to suspend execution only when the condition is true, or when the condition 
      value changes. 
      <p><img src="images/conditional-breakpoint-property.gif" width="351" height="172"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Disabling<br>
      breakpoints</b></td>
    <td width="70%" valign="top" align="left">If you find yourself frequently 
      adding and removing a breakpoint in the same place, consider disabling the 
      breakpoint when you don't need it (using <strong>Disable Breakpoint </strong>in 
      the breakpoint context menu or the <strong>Breakpoints view</strong>) and 
      enabling it when needed again.&nbsp; 
      <p><img src="images/breakpoint-context-menu.gif" width="411" height="124"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Changing variable values</b></td>
    <td width="70%" valign="top" align="left"> 
      <p>When a thread is suspended in the debugger, you can change the values 
        of Java primitives and Strings in the <b>Variables</b> view. From the 
        variable's context menu, choose <b>Change Variable Value</b>. </p>
      <p><img src="images/change-variable-value.gif" width="483" height="275"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Variable values in hover help</b></td>
    <td width="70%" valign="top" align="left">When a thread is suspended and the 
      cursor is placed over a variable in the Java editor, the value of that variable 
      is displayed as hover help. 
      <p><img src="images/variable-hover.gif" width="400" height="104"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Drop to Frame</b></td>
    <td width="70%" valign="top" align="left">When stepping through your code, 
      you might occasionally step too far, or step over a line you meant to step 
      into. Rather than restarting your debug session, you can use the <b>Drop 
      to Frame</b> action to quickly go back to the beginning of a method. Select 
      the stack frame corresponding to the Java method you wish to restart, and 
      select <b>Drop to Frame</b> from its context menu. The current instruction 
      pointer will be reset to the first executable statement in the method. Note 
      that this works for non-top stack frames as well. Drop to frame is only 
      available when debuggin with a 1.4 or higher VM, or the J9 VM.</td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Hot code replace</b></td>
    <td width="70%" valign="top" align="left">The debugger supports Hot Code Replace 
      when debugging with a 1.4 or higher VM, or the J9 VM. This lets you make 
      changes to code you are currently debugging. Note that some changes such 
      as new or deleted methods, class variables or inner classes cannot be hot 
      loaded.</td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"> 
      <div align="right"> <b>Stepping into selections</b> </div>
    </td>
    <td width="70%" valign="top" align="left"> 
      <p>The Java debugger allows you to step into a single method within a series 
        of chained or nested method calls. Simply highlight the method you wish 
        to step into and select <b>Step into Selection</b> from the Java editor 
        context menu.</p>
      <p><img src="../whatsNew/images/step-into-selection.gif" width="703" height="168"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Controlling<br>
      your console</b></td>
    <td width="70%" valign="top" align="left">Output displayed in the console 
      can be locked to a specific process via a drop-down menu in the Console 
      view toolbar. There's also a new scroll lock button that stops the console 
      from automatically scrolling as new output is appended. 
      <p><img border="0" src="images/selective-output.gif" width="459" height="140"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"> 
      <div aligh="right"> <b>Creating watch items</b> </div>
    </td>
    <td width="70%" valign="top" align="left">A watch item is an expression in 
      the <b>Expressions</b> view whose value is updated as you debug. You can 
      create watch items from the Java editor by selecting an expression or variable 
      and choosing <b>Watch</b> from its context menu or the top-level <b>Run</b> 
      menu). </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"> 
      <div aligh="right"> <b>Watch points</b></div>
    </td>
    <td width="70%" valign="top" align="left"> 
      <p>A watch point is a breakpoint that suspends execution whenever a specified 
        variable is accessed or modified. To set a watchpoint, select a variable 
        in the Outline view and choose <b>Add/Remove Watchpoint</b> from its context 
        menu. To configure a watchpoint, select the watchpoint in the <b>Breakpoints</b> 
        view and choose <b>Properties...</b> from its context menu. The most important 
        properties for this type of breakpoint are the <b>Access</b> and <b>Modification</b> 
        checkboxes which control when the breakpoint can suspend execution.</p>
      <p><img src="images/watchpoint-properties.gif" width="403" height="458"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"> 
      <div align="right"> <b>Threads &amp; Monitors view</b></div>
    </td>
    <td width="70%" valign="top" align="left"> 
      <p>The debugger's<b> Threads and Monitors</b> view shows which threads are 
        holding locks and which are waiting to acquire locks. </p>
      <p><img src="../whatsNew/images/threads-monitors.gif" width="373" height="260"></p>
      <p>&nbsp;</p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Step filters</b></td>
    <td width="70%" valign="top" align="left">Step filters prevent the debugger 
      from suspending in specified classes and packages when stepping into code. 
      Step filters are established in Window&gt;Preferences&gt;Java&gt;Debug&gt;Step 
      Filtering. Step filters are in effect when the <b>Step With Filters</b> 
      action (on the debug toolbar and menu) is invoked. In the Debug view, the 
      selected stack frame's package or declaring type can be quickly added to 
      the list of filters by selecting <b>Filter Type</b> or <b>Filter Package</b> 
      from the stack frame's context menu.</td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Using the scrapbook</b></td>
    <td width="70%" valign="top" align="left"> 
      <p>If you want to experiment with API or test out a new algorithm, it's 
        frequently easier to use a Java scrapbook page than create a new class. 
        A scrapbook page is a container for random snippets of code that you can 
        execute at any time without a context. To create a scrapbook page in the 
        Java Perspective, select File&gt;New&gt;Scrapbook Page from the workbench 
        menu, or click the New Scrapbook Page button <img src="images/new-scrapbook-button.gif" width="17" height="19">on 
        the workbench toolbar. Enter whatever code you wish to execute, then select 
        it. There are three ways to execute your code:</p>
      <ul>
        <li>Execute the selected code and place the returned result in the Expressions 
          view</li>
        <li>Execute the selected code and place the String result right in the 
          scrapbook page<br>
          <img src="images/scrapbook-display.gif" width="544" height="139"> </li>
        <li>Execute the selected code (and ignore any returned result)</li>
      </ul>
      <p>These actions are in the workbench toolbar and also in the scrapbook 
        page's context menu.</p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Editing<br>
      launch<br>
      configurations</b></td>
    <td width="70%" valign="top" align="left">Holding down the Control key and 
      making a selection from the <b>Run</b> or <b>Debug</b> drop-down menu opens 
      the associated launch configuration for editing. The launch configuration 
      can also be opened from the context menu associated with any item in the 
      Debug view.</td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Favorite launch configurations</b></td>
    <td width="70%" valign="top" align="left"> 
      <p>Launch configurations appear in the Run/Debug drop-down menus in most 
        recently launched order. However it is possible to force a launch configuration 
        to always appear at the top of the drop-downs by making the configuration 
        a 'favorite'. In the Debug&gt;Launch History preference page, you can 
        establish favorites by launch type (Run, Debug, External Tools).</p>
      <p><img src="images/favorites-prefs.gif" width="541" height="528"></p>
      <p>Now, the Debug drop-down menu shows the specified configurations as favorites, 
        with the rest of the configurations in history order.</p>
      <p><img src="images/debug-drop-down.gif" width="191" height="206"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Detail formatters</b></td>
    <td width="70%" valign="top" align="left"> 
      <p>In the <b>Variables</b> &amp; <b>Expressions</b> views, the detail pane 
        shows an expanded representation of the currently selected variable. By 
        default, this expanded representation is the result of calling <b>toString()</b> 
        on the selected object, but you can create a custom detail formatter that 
        will be used instead by choosing <b>New Detail Formatter</b> from the 
        variable's context menu. This detail formatter will be used for all objects 
        of the same type. You can view and edit all detail formatters in the Java&gt;Debug&gt;Detail 
        Formatters preference page. </p>
      <p><img src="images/detail-formatter.gif" width="426" height="582"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Running code with compile errors</b></td>
    <td width="70%" valign="top" align="left"> 
      <p>You can run and debug code that did not compile cleanly. The only difference 
        between running code with and without compile errors is that if a line 
        of code with a compile error is executed, one of two things will happen:</p>
      <ul>
        <li>If the 'Suspend execution on compilation errors' preference on the 
          Java&gt;Debug preference page is set and you are debugging, the debug 
          session will suspend as if a breakpoint had been hit. Note that if your 
          VM supports Hot Code Replace, you could then fix the compilation error 
          and resume debugging</li>
        <li>Otherwise, execution will terminate with a 'unresolved compilation' 
          error </li>
      </ul>
      <p>It is important to emphasize that as long as your execution path avoids 
        lines of code with compile errors, you can run and debug just as you normally 
        do.</p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Word wrap in<br>
      Variables<br>
      view</b></td>
    <td width="70%" valign="top" align="left">The details area of the debugger's 
      <b>Variables</b> and <b>Expressions</b> views supports word wrap, available 
      from the view drop-down menu. 
      <p><img src="images/variables-details-pane.gif" width="352" height="218"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Code assist in the debugger</b></td>
    <td width="70%" valign="top" align="left"> 
      <p>Code assist is available in many contexts beyond writing code in the 
        Java editor:</p>
      <ul>
        <li>When entering a condition for a breakpoint</li>
        <li>In the Details pane of the Variables &amp; Expressions view</li>
        <li>When entering a Details Formatter code snippet</li>
        <li>When entering code in a Scrapbook page</li>
        <li>In the Display view</li>
      </ul>
      <p><img src="images/display-view-code-assist.gif" width="406" height="228"></p>
      <p>&nbsp;</p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Command line details</b></td>
    <td width="70%" valign="top" align="left">You can always see the exact command 
      line used to launch a program in run or debug mode by selecting <b>Properties</b> 
      from the context menu of a process or debug target, even if the launch has 
      terminated. 
      <p><img src="images/process-info.gif" width="496" height="254"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Stack trace<br>
      hyperlinks</b></td>
    <td width="70%" valign="top" align="left"> 
      <p>Java stack traces in the console appear with hyperlinks. When you place 
        the mouse over a line in a stack trace, the pointer changes to the hand 
        and the stack trace is underlined. Pressing the mouse button opens the 
        associated Java source file and positions the cursor at the corresponding 
        line.</p>
      <p><img border="0" src="images/stack-trace-hyperlink.gif" width="416" height="133"></p>
    </td>
  </tr>
</table>
<p>&nbsp;</p>
<p><img border="0" src="../images/ngrelc.gif" alt="Related concepts" width="159" height="27"><br>
  <a href="../concepts/concepts-10.htm">Debugger</a><br>
  <a href="../concepts/concepts-7.htm">Java editor</a></p>
	<p>
      <a href="../hglegal2003.htm"><img src="../images/ngibmcpy2003.gif" alt="Copyright (c) 2000, 2003 IBM Corporation and others. All Rights Reserved." border="0" width="324" height="14"></a>
	</p>  
  </body>
</html>

