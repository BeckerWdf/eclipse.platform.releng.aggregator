<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <title>
      Templates
    </title>
    <link rel="stylesheet" href="../book.css" charset="ISO-8859-1" type="text/css">
    <script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js"> </script>
  </head>
  <body>
    <h1>
      Templates
    </h1>
    <p>
      The
      <a class="command-link" href='javascript:executeCommand("org.eclipse.ui.window.preferences(preferencePageId=org.eclipse.jdt.ui.preferences.JavaTemplatePreferencePage)")'>
      <img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="Opens the Templates preference page">
      <b>Java &gt; Editor &gt; Templates</b></a> preference page
      allows to create new and edit existing templates. A template is a convenience for the programmer to quickly insert often reoccurring source
      code patterns.
    </p>
    <p>
      The following buttons allow manipulation and configuration of templates:
    </p>
    <table border="1" cellspacing="0" cellpadding="5" width="100%">
      <thead>
        <tr>
          <th>
            <p>
              Action
            </p>
          </th>
          <th>
            <p>
              Description
            </p>
          </th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td valign="top">
            <p>
              New...
            </p>
          </td>
          <td valign="top">
            <p>
              Opens the Template dialog to create a new template.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              Edit...
            </p>
          </td>
          <td valign="top">
            <p>
              Opens the Template dialog to edit the currently selected template.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              Remove
            </p>
          </td>
          <td valign="top">
            <p>
              Removes all selected templates.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              Restore Removed
            </p>
          </td>
          <td valign="top">
            <p>
              Restores any preconfigured templates that have been removed.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              Revert to Default
            </p>
          </td>
          <td valign="top">
            <p>
              Restores any preconfigured templates to their default. This does not modify user-created templates.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              Import...
            </p>
          </td>
          <td valign="top">
            <p>
              Imports templates from the file system.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              Export...
            </p>
          </td>
          <td valign="top">
            <p>
              Exports all selected templates to the file system.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              Use code formatter
            </p>
          </td>
          <td valign="top">
            <p>
              If enabled, the template is formatted according to the code formatting rules specified in the <a href="ref-17.htm">Code Formatter preferences</a>, prior to insertion.
              Otherwise, the template is inserted as is, but correctly indented.
            </p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2>
      Template dialog
    </h2>
    <p>
      Creating a new template and editing an existing template uses the same dialog, which is described here.
    </p>
    <p>
      The following fields and buttons appear in the dialog:
    </p>
    <table border="1" cellspacing="0" cellpadding="5" width="100%">
      <thead>
        <tr>
          <th>
            <p>
              Option
            </p>
          </th>
          <th>
            <p>
              Description
            </p>
          </th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td valign="top">
            <p>
              Name
            </p>
          </td>
          <td valign="top">
            <p>
              The name of the template.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              Context
            </p>
          </td>
          <td valign="top">
            <p>
              The context determines where the template can be used and the set of available pre-defined template variables.
            </p>
            <dl>
              <dt>
                Java
              </dt>
              <dd>
                The Java context
              </dd>
              <dt>
                Javadoc
              </dt>
              <dd>
                The Javadoc context
              </dd>
            </dl>
          </td>
        </tr>
                <tr>
          <td valign="top">
            <p>
              Automatically insert
            </p>
          </td>
          <td valign="top">
            <p>
              If selected, code assist will automatically insert the template if it is the only proposal available at the caret position.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              Description
            </p>
          </td>
          <td valign="top">
            <p>
              A description of the template, which is displayed to the user when choosing the template.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              Pattern
            </p>
          </td>
          <td valign="top">
            <p>
              The template pattern.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              Insert Variables...
            </p>
          </td>
          <td valign="top">
            <p>
              Displays a list of pre-defined context specific variables.
            </p>
          </td>
        </tr>
      </tbody>
    </table>
    <h2>
      Template variables
    </h2>
    <p>
      Template variables may be used in the template pattern. Variables are resolved
      to their concrete value when the template is evaluated in its context. Variables may be specified
      using <i>simple</i> or <i>full</i> syntax: 
      <ul>
        <li><strong>Simple</strong> variables take the following form:
        <p>
        <strong><code>${array}</code></strong>
        </p><p>This defines a variable with name 'array' that will resolve to an array. It can be referenced multiple times as is.
        </p></li>
        <li><strong>Full</strong> variables take the following form:
        <p><strong><code>${it:var(java.util.Iterator)}</code></strong>
        </p><p>This defines a variable with name 'it' that will resolve to an local variable of type <code>java.util.Iterator</code>. It can be referenced multiple times by simply giving its name without the type: <code>${it}</code>.
        </p></li>
      </ul>
    </p>
    <p>
    If there are several possible matches for a variable, they may be presented as proposals to the user.
    </p>
    
    <p>
      Both Java and Javadoc context define the following variables:
    </p>
    <table border="1" cellspacing="0" cellpadding="5" width="100%">
      <thead>
        <tr>
          <th>
            <p>
              Variable
            </p>
          </th>
          <th>
            <p>
              Description
            </p>
          </th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td valign="top">
            <p>
              <strong>${cursor}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Specifies the cursor position when the template edit mode is left. This is useful when the cursor should jump to another place than to the end of the template on
              leaving template edit mode.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${date}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the current date.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${dollar}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the dollar symbol '$'.
            </p>
            <p>
              Alternatively, two dollars can be used: '$$'.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${enclosing_method}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the name of the enclosing name.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${enclosing_method_arguments}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to a comma separated list of argument names of the enclosing method. This variable can be useful when generating log statements for many methods.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${enclosing_package}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the name of the enclosing package.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${enclosing_project}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the name of the enclosing project.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${enclosing_type}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the name of the enclosing type.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${file}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the name of the file.
            </p>
          </td>
        </tr>
                <tr>
          <td valign="top">
            <p>
              <strong>${line_selection}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to content of all currently selected lines.
            </p>
          </td>
        </tr>
                <tr>
          <td valign="top">
            <p>
              <strong>${primary_type_name}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the name primary type of the current compilation unit.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${return_type}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the return type of the enclosing method.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${time}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the current time.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${user}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the user name.
            </p>
          </td>
        </tr>
                <tr>
          <td valign="top">
            <p>
              <strong>${word_selection}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the content of the current text selection.
            </p>
          </td>
        </tr>
                <tr>
          <td valign="top">
            <p>
              <strong>${year}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the current year.
            </p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>
      The Java context additionally defines the following variables:
    </p>
    <table border="1" cellspacing="0" cellpadding="5" width="100%">
      <thead>
        <tr>
          <th>
            <p>
              Variable
            </p>
          </th>
          <th>
            <p>
              Description
            </p>
          </th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td valign="top">
            <p>
              <strong>${<i>id</i>:var(<i>type&nbsp;name</i>)}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to a local variable visible in the current scope that is a
              subtype of the given type. If no type is specified, any local variable matches.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${<i>id</i>:arg(<i>reference,&nbsp;n</i>)}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the <i>nth</i> type argument of the referenced template variable. The reference should be the name of another
              template variable. Resolves to <code>java.lang.Object</code> if the referenced variable cannot be found or is not
              a parameterized type.
            </p>
            <p>Example:<br>
            <code>${type:arg(vector)}&nbsp;${first:name(type)}&nbsp;=&nbsp;${vector:var(java.util.Vector)}.get(0)</code>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${<i>id</i>:elem(<i>reference</i>)}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the element type of the referenced template variable. 
              The reference should be the name of another
              template variable that resolves to an array or an instance of <code>java.lang.Iterable</code>.
              The <strong>elem</strong> variable type is similar to <strong><code>${:arg(<i>reference</i>,0)}</code></strong>, the difference
              being that it also resolves the element type of an array.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${<i>id</i>:name(<i>reference</i>)}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to an non-conflicting name for a new local variable of the type specified
              by the reference. The reference may either be a Java type name or the name of another
              template variable. The generated name respects the code style settings.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${array}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to a proposal for an array visible in the current scope.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${array_element}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to a name for a new local variable for an element of the <code>${array}</code> variable match.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${array_type}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to the element type of the <code>${array}</code> variable match.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${collection}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
             Evaluates to a proposal for a collection visible in the current scope.
             This is equivalent to <strong>${collection:var(java.util.Collection)}</strong>.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${index}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to a proposal for an undeclared array index. 
             This is equivalent to <strong>${index:var(int)}</strong>.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${iterator}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to an unused name for a new local variable of type <code>java.util.Iterator</code>.
             This is equivalent to <strong>${iterator:name(java.util.Iterator)}</strong>.
            </p>
          </td>
        </tr>
                <tr>
          <td valign="top">
            <p>
              <strong>${iterable}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to a proposal for an iterable or array visible in the current scope.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${iterable_element}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to a name for a new local variable for an element of the <code>${iterable}</code> variable match.
            </p>
          </td>
        </tr>
        <tr>
          <td valign="top">
            <p>
              <strong>${iterable_type}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
             Evaluates to the element type of the <code>${iterable}</code> variable match.
            </p>
          </td>
        </tr>
                <tr>
          <td valign="top">
            <p>
              <strong>${todo}</strong>
            </p>
          </td>
          <td valign="top">
            <p>
              Evaluates to a proposal for the currently specified default task tag.
            </p>
          </td>
        </tr>
      </tbody>
    </table>
    <p>
      <img src="../images/ngrelc.png" alt="Related concepts" border="0" ></p>
      <p>
      <a href="../concepts/ctemplates.htm">Templates</a><br>
    </p>
    <p>
      <img border="0"  src="../images/ngrelr.png" alt="Related reference"></p>
      <p>
      <a href="../reference/ref-143.htm">Java content assist</a><br>
      <a href="../reference/ref-preferences-task-tags.htm">Task tag preferences</a><br>
      <a href="../reference/ref-preferences-code-templates.htm">Code templates preferences</a><br>
      <a href="../reference/ref-preferences-code-generation.htm">Code style preferences</a>
    </p>
    
  </body>
</html>

