<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
  <head>
    <title>Templates</title>
    <link rel="stylesheet" href="../book.css" charset="ISO-8859-1" type="text/css" />
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <meta http-equiv="Content-Style-Type" content="text/css" />
  </head>  

  <body>
    <h1 class="Head">Templates</h1>

    <p class="Para">
      The Templates preference page allows to create new and edit existing
      templates. A template is a convenience for the programmer to quickly
      insert often reoccurring source code patterns.      
    </p>

    <p>
      The following buttons allow manipulation and configuration of templates: 
    </p>
    
<!--
    <p>
      <img src="../images/template-preference.gif" />
    </p>
-->    

    <table border="1" cellspacing="0" cellpadding="5" width="100%">
      <caption>Template Manipulation</caption>
      <thead>
        <tr>
          <th><p class="Para">Action</p></th>
          <th><p class="Para">Description</p></th>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td valign="top"><p class="Para"><span class="Label">New...</span></p></td>
          <td valign="top">
            <p class="Para">
              Opens a dialog to create a new template.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">Edit...</span></p></td>
          <td valign="top">
            <p class="Para">
              Opens a dialog to edit the currently selected template.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">Remove</span></p></td>
          <td valign="top">
            <p class="Para">
              Removes all selected templates.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">Import...</span></p></td>
          <td valign="top">
            <p class="Para">
              Imports templates from the file system.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">Export...</span></p></td>
          <td valign="top">
            <p class="Para">
              Exports all selected templates to the file system.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">Export All...</span></p></td>
          <td valign="top">
            <p class="Para">
              Exports all templates to the file system.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">Enable All</span></p></td>
          <td valign="top">
            <p class="Para">
              Enables all templates.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">Disable All</span></p></td>
          <td valign="top">
            <p class="Para">
              Disables all templates.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">Use Code Formatter</span></p></td>
          <td valign="top">
            <p class="Para">
              If enabled, the template is formatted according
              to the code formatting rules specified in the <span class="Label">Code Formatter</span>
              preferences, prior to insertion. Otherwise, the template is inserted
              as is, but correctly indented.
            </p>
            
            <p>
              <a href="ref-17.htm">See Code Formatter preference page</a>
            </p>
          </td>
        </tr>
        
      </tbody>
    </table>

    
<h2>Template dialog</h2>

    <p class="Para">
      Creating a new template and editing an existing template uses the
      same dialog, which is described here.
    </p>

    <p class="Para">
      The following fields and buttons appear in the dialog:
    </p>

    <table border="1" cellspacing="0" cellpadding="5" width="100%">
      <caption>Template Dialog</caption>
      <thead>
        <tr>
          <th><p class="Para">Option</p></th>
          <th><p class="Para">Description</p></th>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td valign="top"><p class="Para"><span class="Label">Name</span></p></td>
          <td valign="top">
            <p class="Para">
              The name of the template.
            </p>
          </td>
        </tr>
        
        <tr>
          <td valign="top"><p class="Para"><span class="Label">Context</span></p></td>
          <td valign="top">
            <p class="Para">
              The context determines where the template can be used and
              the set of available pre-defined template variables.
            </p>

            <dl>
              <dt>Java</dt>              
              <dd>The Java context</dd>
              <dt>Javadoc</dt>
              <dd>The Javadoc context</dd>
            </dl>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">Description</span></p></td>
          <td valign="top">
            <p class="Para">
              A description of the template, which is displayed to the
              user when choosing the template.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">Pattern</span></p></td>
          <td valign="top">
            <p class="Para">
              The template pattern.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">Insert Variables...</span></p></td>
          <td valign="top">
            <p class="Para">
              Displays a list of pre-defined context specific variables.
            </p>
          </td>
        </tr>                        
 
      </tbody>
    </table>       
 
    
<h2>Template variables</h2>
<!--
    <p>
      Template variables are place holders for the dynamic part of a
      template pattern, e.g. subject to change with every application
      of the particular template.
    </p>

    <p>
      When the template is inserted in the Java editor and the template
      pattern contained at least one template variable, the editor enters
      a template edit mode.
    </p>

    <p>
      The first variable is underlined and selected. The variable
      can be modified...
      If the same variable existed multiple times in the template pattern,
      all instances of the same variable are updated instantaneously to
      save typing.
    </p>

    <p>
      Pressing <kbd>Tab</kbd> navigates to the next unique template
      variable, <kbd>Shift-Tab</kbd> navigates to the previous unique
      template variable.
    </p>

    <p>
      The template edit mode is left by either pressing <kbd>Tab</kbd>
      on the last template variable or pressing <kbd>Esc</kbd> or
      <kbd>Enter</kbd>.
    </p>

    <p>
      Template variables are delimited by '${' and '}'. For example, inserting
      'today is ${date}' in the template pattern would evaluate to the current
      date. 
    </p>
-->
    <p>
      Both Java and Javadoc context define the following variables:
    </p>

    <table border="1" cellspacing="0" cellpadding="5" width="100%">
      <caption>Template variables for Java and Javadoc contexts</caption>
      <thead>
        <tr>
          <th><p class="Para">Variable</p></th>
          <th><p class="Para">Description</p></th>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td valign="top"><p class="Para"><span class="Label">${cursor}</span></p></td>
          <td valign="top">
            <p class="Para">
              Specifies the cursor position when the template edit mode is left.
              This is useful when the cursor should jump to another place than
              to the end of the template on leaving template edit mode.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${date}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to the current date.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${dollar}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to the dollar symbol '$'.
            </p>

            <p class="Para">
              Alternatively, two dollars can be used: '$$'.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${enclosing_method}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to the name of the enclosing name.
            </p>
          </td>
        </tr>        

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${enclosing_method_arguments}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to a comma separated list of argument names of the enclosing
              method. This variable can be useful when generating log statements
              for many methods.
            </p>
          </td>
        </tr>        

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${enclosing_package}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to the name of the enclosing package.
            </p>
          </td>
        </tr>        

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${enclosing_project}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to the name of the enclosing project.        
            </p>
          </td>
        </tr>        

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${enclosing_type}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to the name of the enclosing type.
            </p>
          </td>
        </tr>        

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${file}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to the name of the file.
            </p>
          </td>
        </tr>        

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${return_type}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to the return type of the enclosing method.
            </p>
          </td>
        </tr>        

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${time}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to the current time.
            </p>
          </td>
        </tr>    

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${user}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to the user name.
            </p>
          </td>
        </tr>    
      </tbody>
    </table>

    <p>
      The Java context additionally defines the following variables:
    </p>

    <table border="1" cellspacing="0" cellpadding="5" width="100%">
      <caption>Template variables for Java context only</caption>
      <thead>
        <tr>
          <th><p class="Para">Variable</p></th>
          <th><p class="Para">Description</p></th>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td valign="top"><p class="Para"><span class="Label">${array}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to a proposal for a declared array name.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${array_element}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to a proposal for an element name of a declared array.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${array_type}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to a proposal for the element type of a declared array.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${collection}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to a proposal for a declared collection implementing
              <code>java.util.Collection</code>.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${index}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to a proposal for an undeclared array index iterator.
            </p>
          </td>
        </tr>

        <tr>
          <td valign="top"><p class="Para"><span class="Label">${iterator}</span></p></td>
          <td valign="top">
            <p class="Para">
              Evaluates to a proposal for an undeclared collection iterator.
            </p>
          </td>
        </tr>

      </tbody>
    </table>

<!--
    <p>
      If no proposal is found, the variables above evaluate to their names.
    </p>

    <h3>Custom Variables</h3>

    <p>
      You can insert your own template variables, which evaluate to the name
      of the variable itself. You just have to make sure that the name does
      not conflict with the predefined template variable names in the specific
      context.
    </p>

    <p>
      If the dollar symbol '$' should be displayed, it can be escaped by
      using two dollar symbols or using the variable '${dollar}':
    </p>

<pre>/**
 * $$Id$$
 */</pre>

    <p>
      This will be evaluated to:
    </p>

<pre>/**
 * $Id$
 */</pre>
-->
<p><img src="../images/ngrelc.gif" alt="Related concepts" border=0 height=27 width=159> 
</p>
<p> <a href="../concepts/ctemplates.htm">Templates</a><br>

<p><img src="../images/ngrelt.gif" alt="Related tasks" border=0 height=27 width=159> 
<p> <a href="../tasks/tasks-171.htm">Using 
  templates</a><br>
  <a href="../tasks/tasks-203.htm">Writing 
  your own templates</a><br>

<p><img src="../images/ngrelr.gif" alt="Related reference" /> </p>

    <p>
      <a href="../reference/ref-143.htm">Java Content Assist</a><br />
    </p>

    <div class="copyright">
      <a href="../hglegal2002.htm">
        </a><a href="../hglegal2002.htm"><img src="../images/ngibmcpy2002.gif" alt="Copyright IBM Corporation 2000, 2002. All Rights Reserved." border="0" width="324" height="14"></a>
      
    </div>

  </body>
</html>
