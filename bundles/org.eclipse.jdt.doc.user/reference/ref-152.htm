<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Frequently-Asked Questions: JDT</title>

</HEAD>
<BODY BGCOLOR="#ffffff">
<h1 CLASS="Head">
Frequently-Asked Questions: JDT</H1>
<h2>
Can I use a Java compiler other than the built-in one (e.g., javac) with the workbench?</h2>
<P CLASS="Para">
No. The JDT provides a number of sophisticated features including fully automatic incremental recompilation, code snippet evaluation, code assist, type hierarchies, and hot code replace. These features require special support found in the workbench Java compiler (an integral part of the JDT's incremental project builder), but not available in standard Java compilers. </P>
<h2 CLASS="Head">
Where do Java packages come from?
</h2>
<P CLASS="Para">
A project contains only files and folders. The notion of a Java package is introduced by a Java project's class path (at the UI, the Packages view presents the packages as defined by the classpath). Tip: If the package structure is not what you expect, check out your classpath. The Java search infrastructure only finds declarations for and references from Java elements on the classpath.</P>
<h2 CLASS="Head">
When do I use an internal vs. an external JAR library file?
</h2>
<P CLASS="Para">
An internal resource resides in some project in the workbench and is therefore managed by the workbench; like other resources, these resources can be version managed by the workbench. An external resource is not part of the workbench and can be used only by reference. For example, a JRE is often external and very large, and there is no need to associate it with a VCM system.</P>
<h2 CLASS="Head">
When should I use source folders within a Java project? 
</h2>
<P CLASS="Para">
Each Java project locates its Java source files via one or more source type entries on the project's classpath. Use source folders to organize the packages of a large project into useful grouping, or to keep source code separate from other files in the same project. Also, use source folders if you have files (e.g., documentation) which need not be on the build path.</P>
<h2 CLASS="Head">
What are source attachments, how do I define one? 
</h2>
<P CLASS="Para">
Libraries are stored as JAR files containing binary class files (and perhaps other resources). These binary class files provide signature information for packages, classes, methods, and fields. This information is sufficient to compile or run against, but contains far less information that the original source code. In order to make it easier to browse and debug binary libraries, there is a mechanism for associating a corresponding source JAR (or ZIP) file with a binary JAR file.</P>
<DIV CLASS="XRefList">
<P CLASS="Para">
Related Topics:</P>
<LI CLASS="Item">
<A HREF="ref-123.htm" CLASS="XRef">See Java Settings Page</A></LI>
<LI CLASS="Item">
<A HREF="ref-123.htm" CLASS="XRef">See Libraries Tab</A></LI>
</DIV>
<h2 CLASS="Head">
Why are all my resources duplicated in the output folder (e.g., bin)? 
</h2>
<P CLASS="Para">
If your Java project is using source folders, then in the course of compiling the source files in the project, the Java compiler copies non-Java resources to the output folder as well so that they will be available on the classpath of the running program.</P>
<h2 CLASS="Head">
How do I prevent having my documentation files from being copied to the project's output folder? 
</h2>
<P CLASS="Para">
Use source folders and put any resources that you do not want to be copied to the output folder into a separate folder that is not included on the classpath. </P>
<h2 CLASS="Head">
How do I create a default package? 
</h2>
<P CLASS="Para">
You don't have to. Files in the root folder of a source folder or project are considered to be in the default package. In effect, every source folder has the capability of having a fragment of the default package.</P>
<h2 CLASS="Head">
What is refactoring? 
</h2>
<P CLASS="Para">
Refactoring means behavior-preserving program transformations. The JDT supports a number of transformations described in Martin Fowler's book <SPAN CLASS="Title">
Refactoring: Improving the Design of Existing Code</SPAN>, Addison Wesley 1999.</P>
<h2 CLASS="Head">
When do I use code select/code resolve (F3)? 
</h2>
<P CLASS="Para">
To find out the Java element that corresponds to a source range with the help of the compiler.</P>
<h2 CLASS="Head">
Is the Java program information (e.g., type hierarchy, declarations, references) produced by the Java builder? Is it still updated when auto-build is off?
</h2>
<P CLASS="Para">
The Java program information is independent from the Java builder. It is automatically updated when performing resource changes or Java operations. In particular, all the functionalities offered by the Java tooling (e.g., type hierarchies, code assisting, search) will continue to perform accurately when auto-build is off; e.g., when doing heavy refactoring which require to turn off the builders, you can still use code assist, which will reflect the latest changes (not yet build). Other than the launching (i.e., running and debugging) of programs, the only functionality which requires the Java builder is the evaluation of code snippets.</P>
<h2 CLASS="Head">
After reopening a workbench, the first build that happens after editing a Java source file seems to take a long time. Why is that? 
</h2>
<P CLASS="Para">
The Java incremental project builder saves its internal state to a file when the workbench is closed. On the first build after the project is reopened, the Java incremental project builder will restore its internal state. When this file is large, the user experiences an unusually long build delay.</P>
<h2 CLASS="Head">
I can't see a type hierarchy for my class. What can I do?
</h2>
<P CLASS="Para">
Check that you have your build class path set up properly. Setting up the proper build class path is an important task when doing Java development. Without the correct build path, you will not be able to compile your code. In addition, you will not be able to search or look at the type hierarchies for Java elements.</P>
<P>&nbsp;<br>

<img src = ../ngibmcpy.gif width="195" height="12">

</P>





</BODY>
</HTML>
