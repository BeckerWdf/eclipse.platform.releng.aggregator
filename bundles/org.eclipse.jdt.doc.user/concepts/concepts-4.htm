<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Building</title>

</HEAD>
<BODY BGCOLOR="#ffffff">
<H1 CLASS="Head">
Building</H1>
<P CLASS="Para">
The Java builder uses a compiler that implements the Java Language Specification.</P>
<P CLASS="Para">
Problems detected by the compiler are classified as either warnings or errors. The existence of a warning does not effect the execution of the program; the code executes as if it were written correctly.  Errors are problems that cannot be ignored. </P>
<P CLASS="Para">
The Java compiler can create CLASS files, even in presence of compilation errors. However, in the case of serious errors (e.g., references to inconsistent binaries, most likely related to an invalid classpath setting), the Java builder does not produce any CLASS file.</P>
<DIV CLASS="Topic">
<h2>
Build Class Path</h2>
<P CLASS="Para">
Each project defines a build classpath that defines how its sources should be compiled.</P>
<P CLASS="Para">
Setting up the proper build class path is an important task when doing Java development. Without the correct build path, you will not be able to compile your code. In addition, you will not be able to search or look at the type hierarchies for Java elements.</P>
<P CLASS="Para">
The build class path consist of the following entries.</P>
<DIV CLASS="Subtopic">
<H2 CLASS="Head">
Source</H2>
<P CLASS="Para">
The source entry can be either the project itself or one or more of its source folders.</P>
</DIV>
<DIV CLASS="Subtopic">
<H2 CLASS="Head">
Required Projects</H2>
<P CLASS="Para">
The build class path defines the list of projects required for building this project. Required projects are always built prior to building a project that depends upon them.</P>
</DIV>
<DIV CLASS="Subtopic">
<H2 CLASS="Head">
Library JAR Files</H2>
<UL CLASS="UnorderedList">
<LI CLASS="Item">
A workbench internal JAR file has the benefit of being managed like any other workbench resource, meaning that it can be versioned and shared in a team. However, you must first import the JAR file to your workbench. </LI>
<LI CLASS="Item">
A workbench external JAR does not have to be imported to the workbench and can simply be referenced in the file system. However, the resulting build class path cannot be easily shared with a team, since it contains the absolute path to the JAR file. In order to avoid this problem, you can use a classpath variable instead of an absolute path to an JAR file outside the workbench. Classpath variables are stored global to your workbench.</LI>
<LI CLASS="Item">
Adding an external JAR file to your build path results in a build class path with an absolute path name, which is not always a desired feature. To avoid problems resulting from using an absolute path, you can refer to an external JAR indirectly via a classpath variable. </LI>
</UL>
</DIV>
<DIV CLASS="Subtopic">
<H2 CLASS="Head">
Output Folder</H2>
<P CLASS="Para">
A Java project can optionally use an output folder for storing the generated class files. The default name of the output folder is &quot;bin&quot;. When a project is using source folders it has to use an output folder. Non-Java resources contained in source folders like PROPERTIES files or GIF files are copied into the output folder by the Java builder. This ensures that they can be found at run time. If you have non-Java resources (e.g., documentation) that should not be copied into the output folder, you can create an ordinary folder and store these resources there.</P>
</DIV>
<DIV CLASS="Subtopic">
<H2 CLASS="Head">
Source Attachments for Library JAR Files</H2>
<P CLASS="Para">
You can attach source to a JAR file to enable source-level stepping and browsing of classes contained in a binary JAR file. </P>
<P CLASS="Para">
Source can be attached either on the Properties page of a JAR file (via the file's context menu) or when defining any project's build path (Properties &gt; Java Build Path &gt; Libraries tab). </P>
<P CLASS="Para">
In addition, the debugger will prompt you for a source attachment when it steps into code with no associated source. </P>
<DIV CLASS="Note">
<P CLASS="Para">
Note:	When attaching source to a JAR file that is referenced more then once inside a workbench, the JDT propagates the attachment to all the referenced JAR files. </P>
</DIV>
<P CLASS="Para">
A source attachment for a variable entry must be done only with variables. Both the path to the archive and the root path need to be defined by variables.</P>
</DIV>
</DIV>
<P>&nbsp;<br>

<img src = ../ngibmcpy.gif width="195" height="12">

</P>





</BODY>
</HTML>
