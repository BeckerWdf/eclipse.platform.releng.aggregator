<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Refactoring</title>

</HEAD>
<BODY BGCOLOR="#ffffff">
<H1 CLASS="Head">
Refactoring</H1>
<P CLASS="Para">
Refactoring means behavior-preserving program transformations. The JDT supports a number of transformations described in Martin Fowler's book <SPAN CLASS="Title">
Refactoring: Improving the Design of Existing Code</SPAN>, Addison Wesley 1999.</P>
<P CLASS="Para">
When performing a refactoring, you can optionally preview all the impending changes resulting from a refactoring command before you finally choose to carry it out.</P>
<DIV CLASS="Topic">
<h2>
Supported Refactoring Actions</h2>
<P CLASS="Para">
Depending on the context from which you choose to refactor, various refactoring commands are available.</P>
<TABLE BORDER="1" cellspacing="0">
<CAPTION>
Refactoring Commands</CAPTION>
<THEAD>
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="Para">
Element</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="Para">
Available Refactoring Commands</P>
</TH>
</TR>
</THEAD>
<TBODY>
<TR>
<TD ROWSPAN="1" COLSPAN="1" valign="top" align="left">
<P CLASS="Para">
Package</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1" valign="top" align="left">
<P CLASS="Para">
Rename</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1" valign="top" align="left">
<P CLASS="Para">
Compilation unit</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1" valign="top" align="left">
<P CLASS="Para">
Rename</P>
<P CLASS="Para">
Move to another package</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1" valign="top" align="left">
<P CLASS="Para">
Type</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1" valign="top" align="left">
<P CLASS="Para">
Rename</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1" valign="top" align="left">
<P CLASS="Para">
Method</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1" valign="top" align="left">
<P CLASS="Para">
Rename</P>
<P CLASS="Para">
Rename parameters</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1" valign="top" align="left">
<P CLASS="Para">
Code</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1" valign="top" align="left">
<P CLASS="Para">
Extract Method</P>
</TD>
</TR>
</TBODY>
</TABLE>
<DIV CLASS="Subtopic">
<H2 CLASS="Head">
Rename Element</H2>
<P CLASS="Para">
You can rename an element, and the workbench's refactoring support changes both the selected resource's name and all references to it.</P>
<UL CLASS="UnorderedList">
<LI CLASS="Item">
<SPAN CLASS="Label">
Package</SPAN>
: Updates all import statements of any affected compilation units.</LI>
<LI CLASS="Item">
<SPAN CLASS="Label">
Compilation Unit</SPAN>
: Renaming a compilation unit will also rename (and update all references to) the top-level type that has the same name as the compilation unit. For example, renaming a compilation unit <SPAN CLASS="Filename">
A.java</SPAN>
 in which a class <SPAN CLASS="Filename">
A</SPAN>
 is declared will also rename class <SPAN CLASS="Filename">
A</SPAN>
 and update all references to it.</LI>
<LI CLASS="Item">
<SPAN CLASS="Label">
Interface, Class, or Field</SPAN>
: You can rename an interface, class, or field by modifying its declaration in the compilation unit in which it is declared. You can also update all references to the class, field, or interface.</LI>
<LI CLASS="Item">
<SPAN CLASS="Label">
Method</SPAN>
: Renaming a method declared in an interface will also rename (and update all references to) all methods that are abstract and non-abstract implementations of that method. All such methods in all subclasses of the interface in which the method is declared will be renamed.</LI>
<UL CLASS="UnorderedList">
<LI CLASS="Item">
When renaming a non-static method declared as public, package visible, or protected, all methods overriding it will also be renamed and all references to them updated.</LI>
<LI CLASS="Item">
Renaming a static method or a private method will update references only to that method, since it cannot be overridden.</LI>
<LI CLASS="Item">
You can rename a method by modifying its declaration in the compilation unit in which it is declared. You can also update all references to the method.</LI>
</UL>
</UL>
</DIV>
<DIV CLASS="Subtopic">
<H2 CLASS="Head">
Rename Method Parameters</H2>
<P CLASS="Para">
You can rename the parameters of a method by renaming the parameter's declaration as well as all references to the parameters inside the method
body. Use the <SPAN CLASS="Label">
Rename Parameters</SPAN>
 command to rename the parameters of a method as well as all references to these parameters. On the refactoring parameters page, you can click in the <SPAN CLASS="Label">
New Parameter Names</SPAN>
 column on the row containing the parameter you want to change and type a new name for the parameter.</P>
</DIV>
<DIV CLASS="Subtopic">
<H2 CLASS="Head">
Move Compilation Unit</H2>
<P CLASS="Para">
You can move a compilation unit to a different package. Imports and references are automatically updated.</P>
</DIV>
<DIV CLASS="Subtopic">
<H2 CLASS="Head">
Extract Method</H2>
<P CLASS="Para">
When you extract a method, the workbench extracts a range of code from an existing method body and creates a new method for it, also adding a call from the old method to the new method. This feature is useful for cleaning up lengthy, cluttered, or overly-complicated methods. </P>
</DIV>
</DIV>
<DIV CLASS="Topic">
<h2>
Previewing Refactoring Results</h2>
<P CLASS="Para">
You can execute a refactoring in one of two different ways. </P>
<DIV CLASS="Subtopic">
<h3>
Refactoring without Preview</h3>
<P CLASS="Para">
In a quick refactoring, you skip being notified of potential problems and the refactoring preview. If a Stop problem is predicted, the refactoring will not be carried out.</P>
</DIV>
<DIV CLASS="Subtopic">
<h3>
Refactoring with Preview</h3>
<P CLASS="Para">
In a controlled refactoring, you are notified of potential problems and are given a detailed preview of what the refactoring action will do.</P>
</DIV>
</DIV>
<P>&nbsp;<br>

<img src = ../ngibmcpy.gif width="195" height="12">

</P>





</BODY>
</HTML>
