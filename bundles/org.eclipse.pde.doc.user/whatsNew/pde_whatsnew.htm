<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>PDE - What's New in 3.3</title>
<link rel="stylesheet" href="../book.css" type="text/css">
</head>
<body>
<h2>What's New in 3.3</h2>
<p>This document contains descriptions of some of the more interesting or 
  significant changes made to PDE for the 3.3 release of Eclipse. </p>

<!-- ****************** START OF N&N TABLE ****************** -->
<table cellpadding="10" cellspacing="0" width="600">
  <colgroup>
  <col width="20%">
  <col width="80%">
  </colgroup>
  <tbody>
  <tr>
    <td colspan="2"><h2>PDE</h2>    </td>
  </tr>
  <tr>
    <td><p align="right"><b>Self-hosting with multiple versions of the same plug-in</b></p></td>
    <td>PDE now supports self-hosting scenarios that will allow you to develop
      and run with multiple versions of the same plug-in in the workspace or
      target platform.
      <p>Development scenarios where this new support is particularly useful
        include:</p>
      <ul>
          <li>Workflows that require different plug-ins to compile against different
            versions of the same plug-in</li>
        <li>Building an update site where you are constantly managing multiple
          versions of the same plug-in in the workspace</li>
      </ul></td>
  </tr>

  <tr>
    <td><p align="right"><b>PDE editors facelift</b></p></td>
    <td>All PDE form-based editors have acquired a new
      look and feel. Visual enhancements include the following:
      <ul>
        <li>Gradient form headers</li>
        <li>Form title icons</li>
        <li>New section title bar design and colors</li>
        <li>Section header tool items using standard size icons</li>
        <li>Form header help icons</li>
      </ul>
      <p>In addition, all PDE form editor pages comply with the latest UI recommendations
        for margins and spacing.</p>
      <p><img src="images/pde-editors-facelift.png" alt="PDE Editor Facelift"></p></td>
  </tr>

  <tr> 
    <td><p align="right"><b>Field assist in Forms </b></p></td>
    <td>All fields denoting classes in the plug-in manifest 
      editor now support a field assist feature to help you complete the name 
      of a partially entered class name. 
      <p>This feature works in a similar way to the content assist in the Java 
        editor, and supports package names and CamelCase. </p>
      <p><img src="images/field-assist.png" alt="Field Assist"></p></td>
  </tr>

  <tr>
    <td><p align="right"><b>Field validation in plug-in
        and product editors</b></p></td>
    <td>PDE now validates plug-in and product editor
      form fields while input is being entered.
      <p>During validation, form fields are decorated according to problem severity
        and provide status messages via tool tips.</p>
      <p>All status messages are qualified with a field label and rolled up into
        the form title header where they are available on mouse over.</p>
      <p><img src="images/field-validation.png" alt="Field Validation"></p>
      <p>As with source page validation, the problem severity used by field validation
        is configurable on the <b>Plug-in Development &gt; Compilers</b> preference
        page.</p></td>
  </tr>

  <tr> 
    <td><p align="right"><b>Content assist in plugin.xml</b></p></td>
    <td><p>Content assist (<strong>Ctrl+Space</strong>) 
      is now available on the plugin.xml source page to give you context-sensitive 
      information as you create extensions and extension points. </p>
      <p>Features include: </p>
      <ul><li>completion proposals for extensions, extension points, attributes, 
        and elements</li>
        <li>auto-generation of required elements and attributes</li>
      </ul>
      <p>Note that the content assist can be activated without the need for a 
        partial string. PDE uses extension point schemas to determine which elements 
        and attributes are suitable for the current context. </p>
      <p><img src="images/xml-assist.png" alt="XML Content Assist"> </p></td>
  </tr>

  <tr> 
    <td><p align="right"><b>Content assist in MANIFEST.MF</b></p></td>
    <td>Content assist (<strong>Ctrl+Space</strong>) 
      is now available on the MANIFEST.MF source page, including completion proposals 
      for: 
      <ul>
        <li>header names, attributes, and directives</li>
        <li>header values such as plug-in IDs, package names, and Java class names</li>
        <li>boolean and enumerated values for attributes and directives</li>
      </ul>
      <p><img src="images/manifest-assist.png" alt="MANIFEST.MF content assist"></p></td>
  </tr>

  <tr>
    <td><p align="right"><b>Quick outline in plug-in editor
        source pages </b></p></td>
    <td><p>When editing a source in the plug-in manifest
        editor, pressing <strong>Ctrl+O</strong> or selecting <strong>Navigate &gt; Quick
        Outline</strong> from the top level menu shows you a quick outline. </p>
      <p>The quick outline has many of the sizing and filtering options that
        are available in the Java editor's quick outline. </p>
      <p><img src="images/ctrl-o.png" alt="Ctrl+O"></p></td>
  </tr>

  <tr> 
    <td><p align="right"><b>Hyperlinking and open declarations 
      </b></p></td>
    <td>Hyperlinking (i.e. the use of <strong>Ctrl+Left</strong> 
      to navigate from one editor to another) is now supported on the plug-in 
      manifest editor source page. The usage of the <strong>F3</strong> key to 
      open declarations is also supported and provides the same functionality 
      as hyperlinking. 
      <p>Hovering over attribute values on the plugin.xml page and pressing <strong>Ctrl+Left</strong> 
        can be used to </p>
      <ul>
        <li>open resources and Java type declarations</li>
        <li>open extension point schema descriptions</li>
        <li>navigate from a translated key reference to that key in the properties 
          file</li>
      </ul>
      <p><img src="images/xml-hyperlink.png" alt="plugin.xml hyperlink"></p>
      <p>Hyperlinking provides additional functionality on the MANIFEST.MF source 
        page including: </p>
      <ul>
        <li>opening manifest editors for referenced plug-ins</li>
        <li>opening referenced packages </li>
      </ul>
      <p><img src="images/manifest_hyperlink.png" alt="MANIFEST.MF hyperlink"></p></td>
  </tr>

  <tr> 
    <td><p align="right"><b>Hover support in plug-in manifest 
      editors </b></p></td>
    <td><p>The source pages in the plug-in manifest editors 
        now provide a number of useful hovers. Hovering over an attribute in the 
        plugin.xml shows the schema description for that attribute, while hovering 
        over a manifest header shows the Javadoc for that header. </p>
      <p><img src="images/source-hover.png" alt="Source Hover"></p>
      <p>The hover support has also improved on the Extensions page of the plug-in 
        manifest editor. Hovering over a translated attribute now shows the actual 
        substituted value for that attribute.</p>
      <p><img src="images/forms-hover.png" alt="Forms Hover"></p></td>
  </tr>

  <tr> 
    <td><p align="right"><b>Code folding </b></p></td>
    <td>Folding is now supported on the plugin.xml and 
      MANIFEST.MF source pages of the plug-in manifest editor to make large files 
      more manageable. 
      <p>The option to turn folding on and off can be found on the <strong>Plug-in 
        Development &gt; Editors</strong> preference page. </p>
      <p><img src="images/code-folding.png" alt="Code Folding"></p></td>
  </tr>

  <tr> 
    <td><p align="right"><b>Code formatting </b></p></td>
    <td><p>Line wrapping introduced by some packaging tools 
      make the plug-in MANIFEST.MF file hard to read. </p>
      <p>PDE now provides a <strong>Format</strong> action in the context menu of the MANIFEST.MF source page to format the 
        contents of the file into something more human-readable. </p>
      <p><img src="images/manifest-format.png" alt="MANIFEST.MF formatting"></p></td>
  </tr>
  
  <tr>
    <td><p align="right"><b>Stronger plugin.xml validation</b></p></td>
    <td>PDE now flags warnings when the number of elements
      in an extension's XML markup is at odds with the arity specified in the
      extension point schema.
      <p>The severity for this type of problem is set to <em>Warning</em> by
        default, and can be customized via the <strong>Plug-in Development &gt; Compilers &gt; Plug-ins &gt; Illegal
        elements</strong> preference. </p>
      <p><img src="images/multiplicity.png" alt="Element Occurrence Validation"></p></td>
  </tr>
  
  <tr>
    <td><p align="right"><b>Flag for non-exported packages
        in the MANIFEST.MF file</b></p></td>
    <td><p>PDE now provides a flag on the MANIFEST.MF
        file when the list of exported packages of the plug-in is incomplete.
        This feature is a useful reminder when you wish to expose all your plug-in
        code to downstream clients. </p>
      <p>By default, the severity of this flag is set to IGNORE, but it can be
        raised to WARNING or ERROR at a global level via the <strong>Plug-in
        Development &gt; Compilers &gt; Plug-ins &gt; Non-exported Packages</strong> preference.
        It can also be set on a per-project basis on the <strong>Plug-in Development &gt; Compilers</strong> property
        page of a plug-in project. </p>
      <p><img src="images/non-exported-packages.png" alt="Non-Exported Packages"></p></td>
  </tr>

  <tr>
    <td><p align="right"><b>PDE problem categories</b></p></td>
    <td>Problems in plug-in manifest files can now be
      categorized, allowing you to easily spot fatal issues such as unsatisfied
      constraints which may prevent your plug-in from compiling and running properly.
      <p>You can turn this feature on via <strong>Group by &gt; PDE Problem Type</strong> from
        the drop down menu of the <strong>Problems</strong> view. </p>
      <p> <img src="images/pde-problem-category.png" alt="PDE Problem Category" border="0"></p></td>
  </tr>

  <tr>
    <td><p align="right"><b>State of the plug-ins</b></p></td>
    <td><p>The <em>Plug-in Dependencies</em> view, available
        under <strong>Window &gt; Show View &gt; Other &gt; PDE &gt; Plug-in
        Dependencies</strong>, has been enhanced to show you the state of every
        plug-in you have in your development environment.</p>
      <p>For each plug-in, you get to see all its dependencies and the plug-ins
        supplying each of its imported packages. </p>
      <p>The view now also serves as a valuable diagnostic tool that shows you
        the unsatisfied constraints that may prevent your plug-in from running
        and which may cause a chain reaction affecting other plug-ins. </p>
      <p>New filtering capabilities include: </p>
      <ul>
        <li>focusing on unresolved plug-ins only </li>
        <li>showing leaf plug-ins only therefore helping you prune unnecessary
          plug-ins when assembling a product</li>
      </ul>
      <p><img src="images/state-of-state.png" alt="State of the State"></p></td>
  </tr>

  <tr>
    <td><p align="right"><b>Plug-in refactoring</b></p></td>
    <td> PDE now supports plug-in refactoring by providing
      the ability to rename a plug-in ID and update all references to it in downstream
      plug-ins.
      <p>The <strong>Rename</strong> function is available in the context menu
        of the <strong>Plug-ins</strong> view, the <strong>Plug-in Dependencies</strong> view
        and the <em>MANIFEST.MF</em> source page. </p>
      <p><img src="images/plugin-rename-view.png" alt="Rename in Plug-ins view"></p>
      <p>Plug-in refactoring may also take place as part of the regular project
        renaming action in the <strong>Package Explorer</strong> view (<strong>Refactor &gt; Rename</strong> from
        the context menu) if the project name matches the plug-in ID. </p></td>
  </tr>

  <tr>
    <td><p align="right"><b>Plug-in manifest files participate
        in refactorings</b></p></td>
    <td>When you rename or move files and folders in
      your plug-in project, PDE will now update references to these resources
      in the plugin.xml and build.properties files.
      <p><img src="images/resource-refactoring.png" alt="Resource Refactoring"></p></td>
  </tr>

  <tr> 
    <td align="left" valign="top" width="30%"><div align="right"><strong>Cheat sheet authoring </strong></div></td>
    <td><p>Cheat sheets guide users through a series 
        of steps to achieve an overall task. PDE now provides a cheat sheet editor 
        to let you compose cheat sheets, complete with embedded workbench commands 
        and links to the Help documentation. </p>
      <p>The editor also provides a <strong>Preview</strong> function that allows 
        you to preview your work on the fly directly in the Cheat Sheets view.      </p>
      <p>You can create a cheat sheet via <strong>File &gt; New &gt; Other... &gt; 
        User Assistance &gt; Cheat Sheets</strong>.</p>
      <p><img src="images/cheatsheet-editor.png" alt="Cheat sheet Editor"></p></td>
  </tr>

  <tr> 
    <td><p align="right"><b>Command composer</b></p></td>
    <td><p>Cheat sheets support the embedding of workbench 
        commands allowing you to execute commands such as opening a particular 
        perspective or a wizard in a script-like fashion. </p>
      <p>The Command Composer 
        dialog shows you a categorized list of available commands and their parameters, 
        making it easy to compose, test, serialize, and embed commands into your 
        cheat sheet. </p>
      <p>The Command Composer can be invoked from the <strong>Command</strong> section of the cheat sheet editor. </p>
      <p><img src="images/command-composer.png" alt="Command Composer"></p></td>
  </tr>

  <tr>
    <td><p align="right"><b>Bundling JREs in your RCP product</b></p></td>
    <td><p>The Product editor now gives you the option
      to bundle a JRE with your exported Eclipse product. JREs can be specified
      on a per-platform basis.</p>
      <p>The JRE will be bundled  in a <strong>jre/ </strong>subdirectory
        inside the product, and it will be the default JRE used when the product
        runs. </p>
      <p>This feature is useful if you want your product with a specific JRE
        or if the end user of your product does not have a JRE installed on their
        system. </p>
      <p><img src="images/jre-export.png" alt="Cross-Platform-JRE"></p></td>
  </tr>

  <tr>
    <td><p align="right"><b>Custom splash screen templates</b></p></td>
    <td> PDE now provides three templates for creating
      custom splash screens, complete with code, images and XML markup:
      <ol>
        <li>Interactive: A simulated log-in session</li>
        <li>Browser: An embedded HTML browser</li>
        <li>Extensible: A dynamic set of image contributions</li>
      </ol>
      <p>This feature is available in the <strong>Templates</strong> section
        on the <strong>Splash</strong> page of the product configuration editor<em>.</em></p>
      <p>Splash screen templates are also available in the <strong>New Extension</strong> wizard
        when generating a new <code>org.eclipse.ui.splashHandlers</code> extension
        on the <strong>Extensions</strong> page in the plug-in manifest editor. </p>
      <p><img src="images/splash-templates.png" alt="Splash templates"></p></td>
  </tr>

  <tr>
    <td><p align="right"><b>Target platform provisioning</b></p></td>
    <td><p>PDE now allows the dynamic addition of plug-in
        locations to the target platform by simply pressing <strong>Add</strong> on
        the <strong>Plug-in Development &gt; Target Platform</strong> preference
        page.</p>
      <p>PDE provides two provisioners:</p>
      <ol>
        <li>a file system provisioner to augment the content of the
          target platform with plug-ins located in the file system. </li>
        <li>an update site provisioner that downloads and installs plug-ins into your target platform with a single click by simply pointing at an update site. </li>
      </ol>
      <p><img src="images/target-provisioning.png" alt="Target Provisioning"></p>
      <p>Additional types of provisioners can be declared via the <code>org.eclipse.pde.ui.targetProvisioners</code> extension
        point.</p></td>
  </tr>
  <tr>
    <td><p align="right"><b>Extensible launch shortcuts</b></p></td>
    <td>PDE now provides the <code>org.eclipse.pde.ui.launchShortcuts</code> extension
      point to enable custom launch shortcuts and additional launch modes (e.g.
      profile) to be integrated into the <strong>Testing</strong> section of
      the plug-in manifest editor.
      <p><img src="images/launch-shortcut.png" alt="Launch Shortcuts"></p></td>
  </tr>

  <tr> 
    <td valign="top"><div align="right"><strong>Launching OSGi frameworks </strong></div></td>
    <td><p>PDE now provides the <code>org.eclipse.pde.ui.osgiFrameworks</code> 
        extension point to enable the integration of additional OSGi frameworks 
        into the PDE bundle tooling.</p>
      <p>If more than one OSGi framework is installed, the default can be set 
        on the <strong>Plug-in Development &gt; OSGi Frameworks</strong> preference 
        page. </p>
      <p><img src="images/frameworks.png" alt="OSGi Frameworks Preference Page"></p>
      <p>Testing against different OSGi frameworks is as easy as selecting that 
        framework in the <strong>OSGi Framework</strong> launch configuration.      </p>
      <p><img src="images/osgi-launcher.png" alt="OSGi Framework Launcher"></p>
      <p>Note that PDE only provides the Equinox OSGi framework extension. </p></td>
  </tr>
  <tr>
    <td><p align="right"><b>Hello, World - 3.3 edition</b></p></td>
    <td><p>In Eclipse 3.3, the Platform introduced a
      new way to contribute menu and toolbar items to the workbench. See this
      new support in action by selecting the <em>Hello, World Command </em>template
      in the <em>New Plug-in Project</em> wizard, available under <strong>File &gt; New &gt; Project... &gt; Plug-in
        Development &gt; Plug-in Project</strong>. </p>
        <p><img src="images/hello-world.png" alt="Hello World 3.3"></p></td>
  </tr>

  <tr> 
    <td valign="top"><div align="right"><strong>OSGi Services Templates </strong></div></td>
    <td><p>The <strong>New Plug-in Project</strong> wizard, available under <strong>File 
        &gt; New &gt; Project... &gt; Plug-in Development &gt; Plug-in Project</strong>, 
        provides new templates demonstrating the usage and implementation of programmatic 
        OSGi services.</p>
      <p><img src="images/osgi-services.png" alt="OSGi Services Templates"></p>
      <p>The templates are available when the option to target an OSGi framework 
        is selected on the first page of the wizard.</p>
      <p><img src="images/osgi-option.png" alt="OSGi Option"></p></td>
  </tr>

  <tr>
    <td><p align="right"><b>Analyze dependencies for JAR
        archives</b></p></td>
    <td>When creating a plug-in from existing JAR archives<b> (File &gt; New &gt; Project... &gt; Plug-in
        Development &gt; Plug-in from existing JAR archives)</b>, PDE now computes
        the dependencies required to run the code in the archive.
        <p>Plug-ins targeted to run with an OSGi framework will have their dependencies
        specified with <em>Import-Package</em> statements, while plug-ins targeted
        to run with Eclipse will have theirs specified with <em>Require-Bundle</em> statements.</p>
      <p><img src="images/analyze-dependencies.png" alt="Analyze dependencies"></p></td>
  </tr>

  <tr>
    <td><p align="right"><b>Uses directive calculation</b></p></td>
    <td>PDE is now able to calculate the OSGi <em>uses</em> directive
      for exported packages.
      <p>The <em>uses</em> directive is important because it models inter-package
        dependencies to ensure that consistent class spaces are calculated for
        each bundle. This helps prevent ClassCastExceptions when multiple versions
        of a package or bundle are installed in the Framework. </p>
      <p>The calculation can be initiated from the <b>Organize Manifest</b>s
        wizard (<strong>PDE Tools &gt; Organize Manifests...</strong> from the
        context menu of plug-in projects) or the <strong>Calculate Uses</strong> button
        in the <b>Exported Packages</b> section on the <strong>Runtime</strong> page
        of the plug-in manifest editor.</p>
      <p><img src="images/uses-directive-wizard.png" alt="Uses Directive"></p></td>
  </tr>

  <tr>
    <td><p align="right"><b>Multi-version support for build
        contributions</b></p></td>
    <td>Support has been added to allow for multiple
      versions of the same bundle to appear in a client's map file contribution
      to the build and therefore retrieved to be part of the same build. Clients
      wishing to take advantage of this functionality should specify a version
      in the map file as well as in the referencing feature. </td>
  </tr>

  <tr>
    <td><p align="right"><b>GET fetch support</b></p></td>
    <td>A new GET fetch factory was added to PDE Build
      which allows clients to specify URLs in their map files contributions to
      a build. The factory generates a call to the Ant Get task, and clients
      are able to specify whether or not the fetched file should be unzipped,
      which is especially useful for clients who are retrieving build input from
      an HTTP server. </td>
  </tr>

  <tr>
    <td><p align="right"><b>platform.xml handling</b></p></td>
    <td>In order to handle linked directories and extension
      locations while building, PDE Build now constructs its state by consulting
      the platform.xml file contained in the base location, if available.</td>
  </tr>
  </tbody>
</table>
</body>
</html>
