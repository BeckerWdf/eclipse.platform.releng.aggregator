<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2003, 2009. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>PDE - What's New in 3.4</title>
<link rel="stylesheet" href="../book.css" type="text/css">
<style type="text/css">
td {border-top: solid thin black;}
img[alt] {background-color:#ffdddd;}
tr {vertical-align: top;}
</style>
</head>
<body>
<h2>What's New in 3.4</h2>
<p>This document contains descriptions of some of the more interesting or 
  significant changes made to PDE for the 3.4 release of Eclipse. </p>

<!-- ****************** START OF N&N TABLE ****************** -->
<table cellpadding="10" cellspacing="0" width="600">
  <colgroup>
  <col width="20%">
  <col width="80%">
  </colgroup>
  <tbody>
  <tr>
    <td colspan="2"><h2>PDE</h2>    </td>
  </tr>
  <tr>
    <td><p align="right"><b>Plug-in spy</b></p></td>
    <td><p>Ever wondered where the source is for something you're looking at in Eclipse?   Wonder no more. Select what   you're interested in and invoke Plug-in Spy by pressing <strong>Alt+Shift+F1</strong>.   Plug-in Spy currently supports inspection of: </p>
      <ul>
        <li>Selections</li>   
        <li>Editors</li>   
        <li>Views</li>   
        <li>Dialogs</li>   
        <li>Dialog Pages</li>         
        <li>Preference Pages</li>   
        <li>Wizards </li>
        <li>Active Help Context Identifiers </li>
        <li>Launch Configuration Tabs</li>
        </ul>
      <p><img src="images/plug-in-spy.png" alt="Press Alt+Shift+F1 to invoke the Plug-in Spy"></p>      
      <p>To save time, PDE Spy includes hyperlinks directly to a contributing plug-in's   MANIFEST.MF. By clicking the link, PDE will open the Plug-in Manifest editor on   that plug-in.</p>      </td>
  </tr>
  <tr>
    <td><p align="right"><b>API analysis </b></p></td>
    <td><p>Integrated tooling assists developers with API maintenance. Developers can add special Javadoc tags to document API restrictions and specify an API baseline for binary compatibility checks.</p>
      <p>Code is analyzed during incremental and full builds and problems are reported (quick fixes are provided where possible):</p>
      <ul>
        <li>Binary incompatibilities between releases </li>
        <li>Illegal use of APIs based on restrictions </li>
        <li>Leaking non-API types from an API package </li>
        <li>Incorrect plug-in version numbers </li>
        <li>Missing or incorrect @since tags</li>
        </ul>
      <p><img src="images/missing-since.png" alt="Problem and quick fix for a missing @since tag"></p>
      <p>Problem severities can be configured for the workspace and overridden per project at a fine grained level, and specific problems can be filtered from the workspace (problem filters can be shared in CVS). </p></td>
  </tr>
  <tr>
    <td><p align="right"><b>Improved self-hosting</b></p></td>
    <td>PDE  supports the ability to compile runtime workspace plug-ins against the   launching workspace.</td>
  </tr>

  <tr>
    <td><p align="right"><strong>Internal extension points</strong></p></td>
    <td><p>Extension points can be marked as internal. Clients using the extension point will be notified when they are using an internal extension point.</p>
      <p><img src="images/internal-extension.png" alt="Internal extension points"></p></td>
  </tr>

  <tr> 
    <td><p align="right"><b>Enhanced target provisioner</b></p></td>
    <td><p>A new target provisioner lets you add plug-ins to your   target platform from a p2 repository or an update site. Press <b>Add</b> on the
          <a class="command-link" href='javascript:executeCommand("org.eclipse.ui.window.preferences(preferencePageId=org.eclipse.pde.ui.TargetPlatformPreferencePage)")'> 
          <img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="Opens the Target Platform preference page">
          <b>Plug-in Development &gt; Target Platform</b></a> preference page 
    to access the wizard. </p>
      <p><img src="images/target-prov.png" alt="Target Provisioner Wizard"></p></td>
  </tr>


  <tr> 
    <td><p align="right"><strong>Product editor enhancements</strong></p></td>
    <td><p>The product editor was enhanced to allow for per-platform configuration files   (config.ini) and the ability to version product definitions.</p>
      <p><img src="images/config-file.png" alt="Product editor with per-platform configuration files"></p></td>
  </tr>


  <tr>
    <td><p align="right"><strong>Schema identifier attribute</strong></p></td>
    <td><p>Extension point authors can define attributes that reference other  attributes. This is accomplished by setting your extension   point attributes as type <strong>identifier</strong> and choosing the attribute it   references. An example of this would be the <code>org.eclipse.ui.handlers</code>   extension point. The <strong>commandId</strong> attribute references commands defined in   the <code>org.eclipse.ui.commands</code> extension point.</p>
      <p><img src="images/id-def.png" alt="Defining an identifier attribute"></p>
      <p>Extension developers contributing a handler can then select from all valid identifiers for the <strong>commandId</strong> attribute. Warnings are issued for identifiers that   don't exist to prevent the common mistake of a misspelled identifier.</p>
      <p><img src="images/ref-id.png" alt="Referencing an identifier attribute"></p></td>
  </tr>


  <tr> 
    <td><p align="right"><strong> Support for other OSGi frameworks</strong></p></td>
    <td><p>PDE, in conjunction with Equinox, now supports development against different   types of system bundles (i.e., other OSGi framework implementations).</p>      </td>
  </tr>

  <tr> 
    <td><p align="right"><strong>Open plug-in artifact</strong></p></td>
    <td><p>Find extension references, extension point declarations, exported packages, and plug-ins all in one   place. Simply type <strong>Ctrl+Shift+A</strong>, enter the id, and let PDE do the   work. The dialog includes filters for extensions and extension points to help   you quickly and easily find what you are looking for.</p>
      <p><img src="images/plug-in-artifact.png" alt="Open Plug-in Artifact"></p></td>
  </tr>

  <tr> 
    <td><p align="right"><strong>Context help editor</strong></p></td>
    <td><p>There is a new <strong>Context Help</strong> editor available to assist clients creating   context-specific help for their applications.</p>
      <p><img src="images/context-help-editor.png" alt="Context Help Editor"></p></td>
  </tr>
  
  <tr>
    <td><p align="right"><strong>Error log enhancements</strong></p></td>
    <td><p>The Error Log view has been enhanced to support text filtering, grouping by session or plug-in, and to display logs from runtime workspaces.</p>
      <p><img src="images/log-view.png" alt="Error Log View"></p></td>
  </tr>
  
  <tr>
    <td><p align="right"><strong>Flexible plug-in project conversion</strong></p></td>
    <td><p>In order to encourage clients to not use embedded JARs, it's now easier to   convert an existing JAR to a plug-in project. To do this, simply select the JAR   within your project that you want to convert and run <strong>PDE Tools &gt; Convert   Jars to Plug-in Projects</strong>.</p>      </td>
  </tr>

  <tr>
    <td><p align="right"><strong>Bundle-ActivationPolicy support</strong></p></td>
    <td><p>To further align with OSGi R4.1, PDE now supports the <strong>Bundle-ActivationPolicy</strong> manifest header, the replacement for the   now-deprecated <strong>Eclipse-LazyStart</strong> header.</p>
      <p><img src="images/bundle-activation.png" alt="Bundle Activation Policy"></p></td>
  </tr>



  <tr>
    <td><p align="right"><strong>Greater simplification and customizability in headless builds</strong></p></td>
    <td><p>Setting up a headless build has been simplified. A build can be set up with only   the single <code>build.properties</code> configuration file. The <code>allElements.xml</code> file is not   needed unless the added customization it provides is desired. </p>
      <p>PDE Build has been enhanced to allow custom steps during the assembly and packaging   phases of a headless build. A template <code>customAssembly.xml</code> script is provided with   the available targets.</p></td>
  </tr>

  <tr> 
    <td align="left" valign="top" width="30%"><div align="right"><strong>Individual Source Bundles in Eclipse SDK</strong></div></td>
    <td><p>The Eclipse SDK ships with individual source bundles instead of the old source plug-ins. This makes shipping source   simpler and more flexible. See the <a href="http://wiki.eclipse.org/PDEBuild/Individual_Source_Bundles">wiki page</a> for details on converting your build to use the new source format.</p>      </td>
  </tr>

  <tr> 
    <td><p align="right"><strong>Plug-ins and execution environments</strong></p></td>
    <td><p>PDE now supports the  Bundle Required Execution Environment, and   surfaces it in the New Plug-in Project wizard.</p>
      <p><img src="images/new-project-bree.png" alt="Bundle Required Execution Environment"></p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Bundle operations</strong></p></td>
    <td><p>The Plug-in Registry view now includes advanced bundle-related operations: </p>
      <ul>
        <li>Start</li>   
        <li>Stop</li>   
        <li>Enable</li>   
        <li>Disable </li>
      </ul>
      <p>These advanced operations are disabled by default; toggle the <strong>Show   Advanced Operations</strong> menu item to turn them on.</p>
      <p><img src="images/bundle-operations.png" alt="Bundle Operations" width="357" height="380"></p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Extension point renaming</strong></p></td>
    <td><p>PDE now supports renaming extension point ids and updating all referencing   extensions found in the workspace.</p>
      <p>The <strong>Rename</strong> function is available in the context menu in the <strong>All Extension Points</strong> section and the <code>plugin.xml</code> source page of the   plug-in manifest editor.</p>
      <p><img src="images/rename.png" alt="Rename extension point"></p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>PDE Quickfix for Java file issues</strong></p></td>
    <td><p>To assist plug-in developers, extra validation was added to help with access   restriction issues that could be solved by exporting a package. For example, say   you have two plug-ins: <strong>a</strong> and <strong>b</strong>. If <strong>a</strong> attempts to use a   class from <strong>b</strong> and <strong>b</strong> doesn't export the package containing the   class, you'll receive a warning and applicable quickfix. </p>
      <p><img src="images/pde-export-quickfix.png" alt="PDE Export Quickfix"></p>
      <p>Quickfixes are now provided to aid users in adding dependencies to their plug-in   that will attempt to resolve unresolved classes. If any plug-ins export a   package that matches an unresolved class's package, PDE creates Quickfixes to   add the package to an Import-Package statement or require the bundle directly   through a Require-Bundle entry.</p>
      <p><img src="images/pde-unresolved-quickfix.png" alt="PDE Unresolved Quickfix"></p>
    </td>
  </tr>

  <tr> 
    <td valign="top"><div align="right"><strong>Drag and drop in plug-in manifest editor</strong> </div></td>
    <td><p>Drag and drop support has been implemented in the following sections of the plug-in manifest editor to support reordering: </p>
      <ul>
        <li><em>All Extensions</em></li>
        <li><em>Required Plug-ins</em></li>
        <li><em>Execution Environments</em></li>
        <li><em>Automated Management of Dependencies</em></li>
        <li><em>Classpath</em></li>
      </ul>
      <p><img src="images/pde-dnd.png" alt="Drag and drop" width="411" height="257"></p>
      <p>Note: The drag and drop support in the <strong>All Extensions</strong> section is   "schema aware".</p></td>
  </tr>
  <tr>
    <td><p align="right"><strong>Highlight externalized strings in XML editors</strong> </p></td>
    <td><p>PDE highlights externalized strings within all XML editor source pages in purple, by default. <br>
      <img src="images/pde-externalized-strings.png" alt="Externalized string are highlighted"></p>
        <p>An <em>Externalized strings</em> preference has been added to the
          <a class="command-link" href='javascript:executeCommand("org.eclipse.ui.window.preferences(preferencePageId=org.eclipse.pde.ui.EditorPreferencePage)")'> 
          <img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="Opens the Plug-in Development Editors preference page">
          <b>Plug-in Development &gt; Editors</b></a> preference page 
        to customize the highlight color:</p> 
        <p><img src="images/pde-externalized-pref.png" alt="Preference for highlight color"></p></td>
  </tr>

  <tr> 
    <td valign="top"><div align="right"><strong>Cheat sheet editor enhancements </strong></div></td>
    <td><p>The simple cheat sheet editor has been revamped to include the following   enhancements: </p>
      <ul>
        <li>Custom XML formatting and XML comments preserved on save</li>   
        <li>New <strong>Source</strong> page with a dedicated <strong>Outline</strong> view</li>   
        <li>XML Syntax highlighting</li>   
        <li>Quick outline (<strong>Ctrl+O</strong>)</li>   
        <li>Drag and drop support</li>   
        <li>Clipboard operation support (cut, copy and paste)</li>
        <li>Hyperlinking</li>
        <li>Selection synchronization between <strong>Definition</strong> and <strong>Source</strong> pages</li>
        <li>Browse button for <strong>Help</strong> section </li>
        </ul>
      <p><img src="images/pde-simplecs.png" alt="Simple Cheet Sheet Editor" width="432" height="422"></p></td>
  </tr>


  <tr>
    <td><p align="right"><strong>New projects can now be added to working sets</strong> </p></td>
    <td><p>The New Plug-in Project wizard now has additional input fields to specify the   working sets to which the new project gets added.</p>
      <p><img src="images/add-ws.png" alt="Add project to working set(s) on creation"></p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Table of contents authoring</strong></p></td>
    <td>Tables of contents allow you to organize your Eclipse product's contribution to   online help documentation. PDE now provides an editor to help you easily create,   modify and visualize tables of contents for your Eclipse product.
      <p>Creating a table of contents is now as easy as dragging and dropping   documentation files from the Package Explorer into the editor.</p>
      <p>The editor also comes with a rich source page that features syntax   highlighting, hyperlink navigation (<strong>Ctrl+Left</strong>) and a quick outline   (<strong>Ctrl+O</strong>).</p>
      <p>You can create a table of contents via <strong>File &gt; New &gt; Other &gt;   User Assistance &gt; Help Table of Contents</strong>.</p>
      <p><img src="images/toc-editor.png" alt="Table of Contents Editor" width="365" height="322"></p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Preview changes in PDE wizards </strong></p></td>
    <td>You can now preview changes made by the <strong>Organize Manifests</strong> and   the <strong>Externalize Strings</strong> wizards before they are applied to the   plug-in manifest files.
      <p>Much like the refactoring wizards provided by JDT, the previews allow you to   select only the changes you wish to apply.</p>
      <p>Both wizards can be invoked from the <strong>PDE Tools</strong> context menu   of plug-in projects.</p>
      <p><img src="images/refactor-preview.png" alt="Preview changes"></p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Structural compare for plugin.xml files </strong></p></td>
    <td><p>When comparing two versions of a plugin.xml file, the new structure compare   views will let you easily see what extensions and extension points have been   added, removed, and modified. </p>
      <p><img src="images/xml-compare.png" alt="Structural compare"></p></td>
  </tr>
  </tbody>
</table>
</body>
</html>
