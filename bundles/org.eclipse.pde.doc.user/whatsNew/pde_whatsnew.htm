<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>PDE - What's New in 3.3</title>
<link rel="stylesheet" href="../book.css" type="text/css">
<style type="text/css">
td {border-top: solid thin black;}
img[alt] {background-color:#ffdddd;}
tr {vertical-align: top;}
</style>
</head>
<body>
<h2>What's New in 3.4</h2>
<p>This document contains descriptions of some of the more interesting or 
  significant changes made to PDE for the 3.4 release of Eclipse. </p>

<!-- ****************** START OF N&N TABLE ****************** -->
<table cellpadding="10" cellspacing="0" width="600">
  <colgroup>
  <col width="20%">
  <col width="80%">
  </colgroup>
  <tbody>
  <tr>
    <td colspan="2"><h2>PDE</h2>    </td>
  </tr>
  <tr>
    <td><p align="right"><b>Improved self-hosting</b></p></td>
    <td>PDE now supports the ability to compile runtime workspace plug-ins against the   launching workspace.</td>
  </tr>

  <tr>
    <td><p align="right"><strong>Internal extension points</strong></p></td>
    <td><p>PDE now lets you mark an extension point as internal. This allows extension   point clients to be notified when they are using an internal extension point.</p></td>
  </tr>

  <tr> 
    <td><p align="right"><b>Enhanced target provisioner</b></p></td>
    <td><p>PDE includes a new p2 target provisioner that lets you add plug-ins to your   target platform from a p2 repository or update site.</p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>OSGi services</strong></p></td>
    <td><p>The Plug-in Registry view was enhanced to include information about OSGi   services.</p>
      </td>
  </tr>

  <tr> 
    <td><p align="right"><strong>Product editor enhancements</strong></p></td>
    <td><p>The product editor was enhanced to allow for per-platform configuration files   (config.ini) and the ability to version product definitions.</p>
      </td>
  </tr>

  <tr> 
    <td><p align="right"><b>API Tooling</b></p></td>
    <td><p>API tools are now a standard part of the Eclipse SDK. The following   features assist developers with API maintenance.</p>
      <UL>
        <LI>Javadoc tags to annotate API with explicit restrictions (available with   code assist):
          <UL>
              <LI>@noimplement - indicates an interface is not to be implemented   by clients   
              <LI>@noinstantiate - indicates class is not to be instantiated by   clients   
              <LI>@noextend - indicates a class is not to be subclassed by   clients or a method is not to be overridden   
              <LI>@noreference - indicates a method or field is not to be   referenced by clients </LI>
          </UL>
        <LI>Report problems during full and incremental builds:
          <UL>
              <LI>Binary incompatibilities between releases   
              <LI>Illegal use of APIs based on restriction tags   
              <LI>Leaking non-API types from an API package   
              <LI>Incorrect plug-in version numbers   
              <LI>Missing or incorrect @since tags (quick fix provided)</LI>
          </UL>
        </LI>
      </UL></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Schema identifier attribute</strong></p></td>
    <td><p>Extension point authors will now be able to define attributes that reference   attributes defined elsewhere. This is accomplished by setting your extension   point attributes as type <strong>identifier</strong> and choosing the attribute it   references. An example of this would be the org.eclipse.ui.handlers   extension point. The <strong>commandId</strong> attribute references commands defined in   the org.eclipse.ui.commands extension point.</p>
      <p>Extension developers will now be able to browse for valid identifiers given the <strong>commandId</strong> attribute. Warnings will also be issued for identifiers that   don't exist, to prevent the common mistake of a misspelled identifier.</p></td>
  </tr>

  <tr> 
    <td><p align="right"><strong>Launch configuration filtering</strong></p></td>
    <td><p>To aid developers working with large sets of plug-ins, it's now possible to   filter plug-ins in PDE-based launch configurations.  </p></td>
  </tr>

  <tr> 
    <td><p align="right"><strong>Enhanced support for other OSGi frameworks</strong></p></td>
    <td><p>PDE, in conjunction with Equinox, now supports development against different   types of system bundles (i.e., other OSGi framework implementations).</p>
      </td>
  </tr>

  <tr> 
    <td><p align="right"><strong>Open plug-in artifact</strong></p></td>
    <td><p>Find extension references, extension point declarations, exported packages, and plug-ins all in one   place. Simply type <strong>Ctrl+Shift+A</strong>, enter the plug-in id, and let PDE do the   work. The dialog includes filters for extensions and extension points to help   you quickly and easily find what you are looking for.</p>
      </td>
  </tr>

  <tr> 
    <td><p align="right"><strong>Context help editor</strong></p></td>
    <td><p>There is a new <strong>Context Help</strong> editor available to assist clients creating   context-specific help for their applications.</p>
      </td>
  </tr>
  
  <tr>
    <td><p align="right"><strong>Error log enhancements</strong></p></td>
    <td><p>The Error Log view has been refactored into a separate plug-in   (<em>org.eclipse.ui.views.log</em>) and enhanced in a few ways: </p>
      <UL>
        <LI>Ability to easily filter log entries   
        <LI>Log entries are now broken up by corresponding session   
        <LI>Improved performance for large logs</LI>
      </UL>
      <p>The <strong>Error Log</strong> view can now be used to quickly browse launch   configuration logs.</p>
      <p>The Log View now supports grouping log entries by session or by the plug-in   which logged the entry. When the view is grouped by session, the most recent   session is denoted in bold to allow for easy identification. </p></td>
  </tr>
  
  <tr>
    <td><p align="right"><strong>Flexible plug-in project conversion</strong></p></td>
    <td><p>In order to encourage clients to not use embedded JARs, it's now easier to   convert an existing JAR to a plug-in project. To do this, simply select the JAR   within your project that you want to convert and run <strong>PDE Tools &gt; Convert   Jars to Plug-in Projects</strong>.</p>
      </td>
  </tr>

  <tr>
    <td><p align="right"><strong>Bundle-ActivationPolicy support</strong></p></td>
    <td><p>To further align with OSGi R4.1, PDE now supports the <strong>Bundle-ActivationPolicy</strong> manifest header, the replacement for the   now-deprecated <strong>Eclipse-LazyStart</strong> header.</p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Editor icon overlay enhancements</strong></p></td>
    <td><p>PDE has added icon overlays to easily identify: </p>
      <UL>
        <LI>Optionally required bundles and imported packages   
        <LI>Exported packages specifying x-friends   
        <LI>Exported packages declared to be x-internal </LI>
      </UL></td>
  </tr>

  <tr>
    <td><p align="right"><b>Plug-in spy</b></p></td>
    <td><p>The Plug-in Spy (<strong>Alt+Shift+F1</strong>) has been enhanced to include spying on: </p>
      <UL>
        <LI>Active Help Context Identifiers   
        <LI>Launch Configuration Dialogs   
        <LI>Dialog Pages </LI>
      </UL>
      <p>To save time, PDE Spy includes hyperlinks directly to a contributing plug-in's   MANIFEST.MF. By clicking the link, PDE will open the Plug-in Manifest editor on   that plug-in.</p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Greater simplification and customizability in headless builds</strong></p></td>
    <td><p>Setting up a headless build has been simplified. A build can be set up with only   the single build.properties configuration file. The allElements.xml file is not   needed unless the added customization it provides is desired. </p>
      <p>PDE Build now also allows custom steps during the assembly and packaging   phase of a headless build. A template customAssembly.xml script is provided with   the available targets.</p></td>
  </tr>

  <tr> 
    <td align="left" valign="top" width="30%"><div align="right"><strong>Individual Source Bundles in Eclipse SDK</strong></div></td>
    <td><p>PDE now supports individual source bundles.&nbsp; The Eclipse SDK is now shipping new   source bundles instead of the old source plugins. This makes shipping source   simpler and more flexible.&nbsp; See the <A href="http://wiki.eclipse.org/PDEBuild/Individual_Source_Bundles">wiki page</A> for details on converting your build to use the new source format.</p>
      </td>
  </tr>

  <tr> 
    <td><p align="right"><strong>Plug-ins and execution environments</strong></p></td>
    <td><p>PDE now supports the concept of a Bundle Required Execution Environment, and   surfaces it in the New Plug-in Project wizard:</p>
      </td>
  </tr>

  <tr>
    <td><p align="right"><strong>Plug-in registry view enhancements</strong></p></td>
    <td><p>Ever wondered where the source is for something you're looking at in Eclipse?   Well wonder no more. The PDE team brings you Plug-in Spy. Simply select what   you're interested in and invoke Plug-in Spy by pressing <strong>Alt+Shift+F1</strong>.   Plug-in Spy currently supports inspection of: </p>
      <UL>
        <LI>Selections   
        <LI>Editors   
        <LI>Views   
        <LI>Dialogs   
        <LI>Preference Pages   
        <LI>Wizards</LI>
      </UL>
      <p>The Plug-in Registry view now includes advanced bundle-related operations: </p>
      <UL>
        <LI>Start   
        <LI>Stop   
        <LI>Enable   
        <LI>Disable </LI>
      </UL>
      <p>These advanced operations are disabled by default; toggle the <strong>Show   Advanced Operations</strong> menu item to turn them on.</p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Extension point renaming</strong></p></td>
    <td><p>PDE now supports renaming extension point ids and updating all referencing   extensions found in the workspace.</p>
      <p>The <STRONG>Rename</STRONG> function is available in the context menu in the <strong>All Extension Points</strong> section and the plugin.xml source page of the   plug-in manifest editor.</p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Bundle classpath synchronization</strong></p></td>
    <td><p>To aid new users battling with compile-time versus run-time issues, PDE has   added an optional check (warning by default) and quick fix to ensure that source   entries found in the build.properties are properly accounted for in the plug-in   manifest.</p>
      <p>This behavior is controlled by the Bundle Classpath Synchronization option on   the <strong>Plug-in Development &gt; Compilers</strong> preference page.</p></td>
  </tr>
  <tr>
    <td><p align="right"><strong>PDE Quickfix for Java file issues</strong></p></td>
    <td><p>To assist plug-in developers, extra validation was added to help with access   restriction issues that could be solved by exporting a package. For example, say   you have two plug-ins: <strong>a</strong> and <strong>b</strong>. If <strong>a</strong> attempts to use a   class from <strong>b</strong> and <strong>b</strong> doesn't export the package containing the   class, you'll receive a warning and applicable quickfix. </p>
      <p>Quickfixes are now provided to aid users in adding dependencies to their plug-in   that will attempt to resolve unresolved classes. If any plug-ins export a   package that matches an unresolved class's package, PDE creates Quickfixes to   add the package to an Import-Package statement or require the bundle directly   through a Require-Bundle entry.</p>
      <p>&nbsp;</p></td>
  </tr>

  <tr> 
    <td valign="top"><div align="right"><strong>Drag and drop in plug-in manifest editor</strong> </div></td>
    <td><p>Drag and drop support has been implemented in the plug-in manifest editor for   the following sections: </p>
      <UL>
        <LI><em>All Extensions</em>
        <LI><em>Required Plug-ins</em>
        <LI><em>Execution Environments</em>
        <LI><em>Automated Management of Dependencies</em>
        <LI><em>Classpath</em> </LI>
      </UL>
      <p>Now objects within these tree or table viewers can be reordered with ease.</p>
      <p>Note: The drag and drop support in the <strong>All Extensions</strong> section is   "schema aware".</p></td>
  </tr>
  <tr>
    <td><p align="right"><strong>Highlight externalized strings in XML editors</strong> </p></td>
    <td><p>PDE now highlights externalized strings within all XML editor source pages. </p>
        <p>Externalized strings found within XML attribute values or XML element text   content can be easily identified by the default purple highlight color.</p></td>
  </tr>

  <tr> 
    <td valign="top"><div align="right"><strong>Simple cheat sheet editor 2.0</strong></div></td>
    <td><p>The simple cheat sheet editor has been revamped to include the following   enhancements: </p>
      <UL>
        <LI>Custom XML formatting and XML comments preserved on save   
        <LI>New <strong>Source</strong> page with a dedicated <strong>Outline</strong> view   
        <LI>XML Syntax highlighting   
        <LI>Quick outline (<strong>Ctrl+O</strong>)   
        <LI>Drag and drop support   
        <LI>Clipboard operation support (cut, copy and paste)   
        <LI>Hyperlinking   
        <LI>Selection synchronization between <strong>Definition</strong> and <strong>Source</strong> pages   
        <LI>Browse button for <strong>Help</strong> section </LI>
      </UL></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Improved management of PDE shortcuts</strong></p></td>
    <td><p>PDE has improved the function and location of its shortcuts. Many editors now   have common shortcuts available on their toolbars.</p>
      <p>The Run and Debug shortcuts in the plug-in manifest editor have also been   improved to automatically include any new dependencies required for launching   the plug-in project.</p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>New projects can now be added to working sets</strong> </p></td>
    <td><p>The New Plug-in Project wizard now has additional input fields to specify the   working sets to which the new project gets added.</p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Table of contents authoring</strong></p></td>
    <td>Tables of contents allow you to organize your Eclipse product's contribution to   online help documentation. PDE now provides an editor to help you easily create,   modify and visualize tables of contents for your Eclipse product.
      <p>Creating a table of contents is now as easy as dragging and dropping   documentation files from the Package Explorer into the editor.</p>
      <p>The editor also comes with a rich source page that features syntax   highlighting, hyperlink navigation (<strong>Ctrl+Left</strong>) and a quick outline   (<strong>Ctrl+O</strong>).</p>
      <p>You can create a table of contents via <STRONG>File &gt; New &gt; Other &gt;   User Assistance &gt; Help Table of Contents</STRONG>.</p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Preview changes in PDE wizards </strong></p></td>
    <td>You can now preview changes made by the <STRONG>Organize Manifests</STRONG> and   the <STRONG>Externalize Strings</STRONG> wizards before they are applied to the   plug-in manifest files.
      <p>Much like the refactoring wizards provided by JDT, the previews allow you to   select only the changes you wish to apply.</p>
      <p>Both wizards can be invoked from the <STRONG>PDE Tools</STRONG> context menu   of plug-in projects.</p></td>
  </tr>

  <tr>
    <td><p align="right"><strong>Structural compare for plugin.xml files </strong></p></td>
    <td>When comparing two versions of a plugin.xml file, the new structure compare   views will let you easily see what extensions and extension points have been   added, removed, and modified. </td>
  </tr>
  </tbody>
</table>
</body>
</html>
