<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Command line Ant script generation</title>
</head>

<BODY BGCOLOR="#ffffff">

<h3>Generating Ant scripts from the command line</h3>

<p>Ant scripts are typically generated using the Plug-in Development Environment (PDE), but it is also possible to generate
them by hand or from other scripts.&nbsp;<br>
Indeed PDE exposes Ant tasks to generate the various build scripts. Build script generation facilities
reside in the following tasks.&nbsp; Arguments are also listed for each task.
</p>

<ul>
  <li><b>eclipse.fetch</b>: generates an Ant script that fetches content from a CVS repository.
  The eclipse fetch is driven by a file whose format is described below (see <a href="#directoryFileFormat">Directory file format</a>).
   <p><i>elements</i> : a comma separated list of entries that will be fetched. Entries are expected to be of the form type@id as specified in the directory file format;
   <p><i>buildDirectory</i> :  the directory into which features and plug-in projects will be checked out;
   <p><i>directory</i> : the name of the directory file;
   <p><i>children</i> : optional, specifies whether the script generation for contained plug-ins and fragments should be invoked. Default is set to true;
   <p><i>cvspassfile</i> : optional, the name of a CVS password file;
   <p><i>fetchTag</i> : optional, overrides the tag provided by in directory file by the given value;
   <p><i>configInfo</i> : optional, an ampersand separated list of configuration indicates the targeted configuration. The default is set to be platform independent.
  </li>
<br>
  <li><b>eclipse.buildScript</b>: generates a build.xml file for the given elements.
  	<p><i>elements</i> : a comma separated list of entries that will be built. Entry are expected to be of the form type@id as specified in the directory file format;
  	<p><i>buildDirectory</i> :  the directory where the features and plug-ins to build are located;
  	<p><i>children</i> : optional, specifies whether the script generation for contained plug-ins and fragments should be invoked. Default is set to true;
  	<p><i>recursiveGeneration</i> : optional, specified whether the script generation for contained features should be invoked. Default is set to true;
  	<p><i>devEntries</i> : optional, a comma separated list of directories to be given to the compile classpath;
  	<p><i>buildlingOSGi</i> : optional, indicates if the pluginsflag indicating if the target is 3.0 or 2.1;
  	<p><i>baseLocation</i> : optional, indicates a folder which contains installed features and folders;
  	<p><i>configInfo</i> : optional, an ampersand separated list of configuration indicates the targeted configuration. The default is set to be platform independent.
  	<p><i>pluginPath</i> : optional, a comma separated list of URLs pointing to installed plug-ins. If specified, this list must include the whole list of plug-ins to be compiled.
  </li> 	  	  	
</ul>

<h4>Examples</h4>
<pre>
&lt;eclipse.fetch elements=&quot;plugin@org.eclipse.core.boot&quot;
		buildDirectory=&quot;c:\toBuild&quot;
		directory=&quot;directory.txt&quot;
		configInfo=&quot;win32,win32,x86 & linux, motif, x86&quot;
		/&gt;
		
&lt;eclipse.buildScript elements=&quot;plugin@org.eclipse.core.boot&quot; 
		install=&quot;c:\toBuild&quot;/&gt;
</pre>
<a name="directoryFileFormat">
<h3>Directory file format</h3>
</a>
Directory files are used to indicate where the plug-ins and features are located, as well as indicating which version
should be fetched. It is a Java property file whose line format is &quot;type@id=version, repositoryLocation, password,path&quot;.
<ul>
<li><i>type</i></li> : a string describing the type of the element. It must be one of the following: plugin, fragment, feature;
<li><i>id</i></li> : the name of the CVS module where the element is located. Note that the feature/plugin/fragment.xml must be in the root of this module;
<li><i>version</i></li> : an existing version tag in the repository;
<li><i>repositoryLocation</i></li> : a CVS repository location;
<li><i>password</i></li> : optional, a password to connect to this repository;
<li><i>path</i><li> : optional, the cvs module name and path to the element manifest.
</ul>
<h4>Example of a directory file</h4>
<tt>
plugin@org.eclipse.pde.build=v20040622,:pserver:anonymous@dev.eclipse.org:/home/eclipse,<br>
feature@org.eclipse.pde.builder=v20040622,:pserver:anonymous@dev.eclipse.org:/home/eclipse,,org.eclipse.pde.build/feature<br>
plugin@org.eclipse.osgi=v20040617a,:pserver:anonymous@dev.eclipse.org:/home/eclipse,
</tt>
  
<h3>Using the targets</h3>
The tasks previously described only work if Eclipse is running. In the particular scenario of executing Ant scripts using 
Eclipse tasks,the scripts must be run using the Eclipse Ant Runner application. The command line for this particular
case is the following:<br>
&nbsp;&nbsp;<tt>java -cp startup.jar org.eclipse.core.launcher.Main -application org.eclipse.ant.core.antRunner -buildfile build.xml</tt>
  <p>
  
Note that the parameters appearing after the application are the parameters that are passed to Ant.

<p>&nbsp;<br>
<a href="../hglegal2003.htm">
<img src = "../images/ngibmcpy2003.gif" alt="Copyright IBM Corporation and others 2000, 2003" border="0" width="324" height="14"></a>
</p>

</body>

</html>
