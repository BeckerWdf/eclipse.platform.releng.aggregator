<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<LINK REL="STYLESHEET" HREF="isvGuide.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Component build configuration</title>
</head>

<BODY BGCOLOR="#ffffff">

<h3>Build configuration</h3>

<p>The component build mechanism is driven by a build configuration.&nbsp; The
build configuration for an individual plug-in, fragment, or component is found
in a <b> build.properties</b> file for the corresponding element.</p>

<p>PDE supplies wizards that create the <b> build.properties</b> file for each plug-in and fragment
that is to be packaged into a component. The <b> build.properties</b> file contains information on how to compile source folders into
JARs. Typically, you modify this file inside the component manifest
editor.&nbsp; You can also add entries directly to the file using another
editor.</p>

<p>PDE provides a simple editor for the <b> build.properties</b> that has form and source views.
The file itself follows the Java properties format. You need to provide a number of
keys and their corresponding values. Multiple values are separated using a comma
as the delimiter. </p>

<p > There are six
points where text can be specified by a plug-in or fragment for inclusion in the
build.&nbsp;  These points are: 
 
 </p>
<ul>
  <li>bin.includes
</li>
  <li>bin.excludes
</li>
  <li>javadoc.packages
</li>
  <li>javadoc.excludedpackages
</li>
  <li>
src.includes</li>
  <li>
 src.excludes</li>
</ul>
<p  > The values
defined in these points are expressed as Ant "patterns". 
 &nbsp;  Typically this amounts to a comma-separated list of strings
to match.&nbsp;&nbsp;  
 </p>
<p  >Standard formats give the
expected results.&nbsp; For example, &quot;<b>.jar</b>&quot; indicates all jar files in the top level
directory.
</p>
<p  >The patterns are
not deep by default.&nbsp; If you want to
describe all Java files for example, you should use the pattern "<b>**/*.java</b>".&nbsp;&nbsp;
The pattern "<b>**</b>" matches any number of directory levels.&nbsp;
Similarly, to describe whole subtrees, use "<b>foo/</b>".&nbsp;
 </p>
<p  > Default
values for these points are always automatically generated with identifiers of
form <b>auto.&lt;lastPortionOfPointId&gt;</b>.&nbsp;
This is done to allow your override to extend these default values if
desired. &nbsp; To set override values, a
plug-in defines additional name/value properties in the previously-mentioned <b>build.properties</b>
file. &nbsp; Some examples: 
 
 </p>
<blockquote>
  <p class="Code">bin.includes=plugin.xml,*.jar 
  <br>
 javadoc.packages=${auto.packages},org.eclipse.core.target.*
  <br>
src.excludes=${auto.excludes},*Hack.java</p>
</blockquote>
<p>When these values are entered in
the <b> build.properties</b> editor, it looks like this:</p>
<p align="center"><img border="0" src="images/build-variables.jpg" width="547" height="488"></p>
<p CLASS="BodyText"><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" width="195" height="12"></a></p>

</body>

</html>
