<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Creating a PDE plug-in</title>
</head>

<BODY BGCOLOR="#ffffff">

<h1>Creating a plug-in</h1>
<p>Once your working environment is clean and configured, you can start creating
your first plug-in.&nbsp;</p>
<p>You start by creating a special plug-in project.&nbsp; PDE provides a wizard for
setting up the project.&nbsp; You can access this wizard using <b>File-&gt;New-&gt;Project...</b>
and
selecting <b>Plug-in Project</b> in the list of wizards.&nbsp;</p>
<p>When you press <b>Next</b>, the first entry you will need to set is the project
name. Plug-in project names must be the same as the unique id that the plug-in
will have.&nbsp; (See <a href="../../org.eclipse.platform.doc.isv/guide/firstplugin_minimal.htm#firstplugin_minimal_pluginid">plug-in
ids</a> for a description of the format.)&nbsp; As an example, we will choose
&quot;<b>com.example.xyz</b>&quot; for
the project name.</p>
<p>The next page shows the initial structure of the plug-in project.&nbsp; The <b>Plug-in
runtime library </b> name will be used to
define where the code of your new plug-in will be packaged once you are ready to
publish it. The <b>Source folder</b> will be created to store your Java source inside the
new project.</p>
<p align="center"><img border="0" src="images/project-structure.jpg" width="500" height="500"></p>
<p>In the next page, you will need to choose what the content of your new plug-in
is going to look like. If you choose a blank plug-in, only the plug-in project
will be created.&nbsp; If you use the template wizards, the PDE will also create
files such as the plug-in class, build properties, and plug-in
manifest.&nbsp;</p>
<p>In this example, we use the default content from the default content wizard.</p>
<p align="center"><img border="0" src="images/project-codegen.jpg" width="500" height="500"></p>
<p align="left">The next page belongs to the default plug-in code
generator. It will collect information about the plug-in, such as its name,
version, and provider.&nbsp; It also provides options related to the plug-in
class that will be generated.&nbsp; In this example, we will accept all the
options.</p>
<p align="center"><img border="0" src="images/default-codegen.jpg" width="500" height="500"></p>
<p align="left">When you press <b>Finish</b>, the wizard will create the new
project, all the specified folders and files, and the initial Java build path.
The build path is important for correct compilation of Java classes that are
generated. The wizard will also open the plug-in manifest editor so that you can
define additional attributes of your plug-in.&nbsp;&nbsp;</p>
<p align="left"> After the wizard is
finished, the initial project structure should look like this:</p>
<p align="center"><img border="0" src="images/initial-structure.jpg" width="240" height="146"></p>
<p CLASS="BodyText"><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" width="195" height="12"></a></p>

</body>

</html>
