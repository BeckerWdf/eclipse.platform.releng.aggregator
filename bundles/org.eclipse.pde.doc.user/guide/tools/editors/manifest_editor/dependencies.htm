<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Dependencies</title>
<script language="JavaScript" type="text/javascript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js"></script>
<link href="../../../book.css" rel="stylesheet" type="text/css">
<style type="text/css">
<!--
.style1 {
	font-size: 18px;
	font-weight: bold;
}
.style2 {
	font-size: 12pt;
	font-weight: bold;
}
-->
</style>
</head>

<body>
<p class="style1">Dependencies</p>
<p>The <STRONG>Dependencies</STRONG> page shows the dependencies that your   plug-in has on other plug-ins.&nbsp; On this page, you must list all plug-ins that contribute code to your plug-in project and that are required to be on your project's classpath in order to compile.&nbsp;&nbsp; When   you modify the list of dependencies and save the file, PDE will automatically   update your classpath.</p>
<p>&nbsp;</p>
<p class="style2">Required Plug-ins </p>
<p>The <strong>Required Plug-ins</strong> section specifies your plug-in project's dependencies on other plug-ins by explicitly enumerating these plug-ins. Your plug-in will not resolve or run at runtime if any of your plug-in dependencies are missing or unresolved. </p>
<p><img src="../../../images/plugin_editor/dependencies_required.png" alt="Require-Bundle" hspace="30"></p>
<p>Press the <strong>Add...</strong> button to browse the list of all plug-ins that your plug-in may make a dependency on.</p>
<p>The order of the plug-ins in the list is important because it dictates the   class loading order at runtime; therefore, use the <STRONG>Up</STRONG> and <STRONG>Down</STRONG> buttons to organize the list as appropriate.</p>
<p>You can set several properties on each plug-in dependency by selecting a plug-in and clicking the <strong>Properties</strong> button:</p>
<ul>
  <li>You can make a plug-in dependency optional by selecting the <strong>Optional</strong> option.  When this option is enabled, it indicates to the runtime that your plug-in should run even if an optional plug-in dependency is missing or not resolved.</li>
  <li>You  can select the <strong>Re-export this dependency</strong> option to re-export your dependency in order to make it automatically visible to any downstream plug-in that require it.  Please note that you should only re-export a given plug-in dependency only if your plug-in exposes one ore more API's from that dependency.</li>
  <li>You can also specify the <strong>Minimum Version</strong> and <strong>Maximum Version</strong> of the plug-in dependency.</li>
</ul>
<p>&nbsp;</p>
<p class="style2">Imported Packages </p>
<p>The Eclipse runtime provides the flexibility of specifying a dependency on a package without explicitly identifying its originating plug-in. These packages are enumerated in the <strong>Imported Packages</strong> section. </p>
<p><img src="../../../images/plugin_editor/dependencies_imported.png" alt="Import-Package" hspace="30"></p>
<p>Press the <strong>Add...</strong> button to browse the list of packages available to your plug-in for importing. PDE filters out packages contributed by plug-ins that are already on your plug-in classpath. </p>
<p>You can set several properties on each package dependency:</p>
<ul>
  <li>You can make the dependency optional by selecting the <strong>Optional</strong> option.  When this option is enabled, this indicates to the runtime that your plug-in should run even if a package dependency is missing.</li>
  <li>You can specify the <strong>Minimum Version</strong> and <strong>Maximum Version</strong> of the package you require.</li>
</ul>
<p>&nbsp;</p>
<p class="style2">Automated Management of Dependencies </p>
<p>The <strong>Automated Management of Dependencies</strong> section provides a new flexible workflow.  This workflow allows you to code your plug-in first and then have PDE analyze your code and automatically generate the list of plug-in dependencies. </p>
<p><img src="../../../images/plugin_editor/dependencies_automated.png" alt="Automated Management" hspace="30"></p>
<p>Press the <strong>Add...</strong> button to add plug-ins to the list.  Consequently, this action will augment your development build path and your content assist scope accordingly.</p>
<p>These dependencies do not get added to the <em>MANIFEST.MF</em> file immediately; however, you   can start coding right away as if they were.</p>
<p>At any time, you can click the <strong>add dependencies</strong> hyperlink to have PDE analyze your code and generate the correct   dependencies in your <em>MANIFEST.MF</em> file via either the <strong>Require-Bundle</strong> or <strong>Import-Package</strong>   headers.</p>
<p>&nbsp;</p>
<p class="style2">Dependency Analysis</p>
<p align="left">The <strong>Dependency Analysis</strong> section contains several useful features that help you examine and optimize your plug-in dependencies to make your plug-in run better. </p>
<p><img src="../../../images/plugin_editor/dependencies_analysis.png" alt="Dependency Analysis" width="343" height="125"></p>
<p>Since JARs from all the plug-ins listed as dependencies will be on your plug-in runtime classpath, it is very important not to list dependencies that are not required.  Otherwise, class loading performance will be detrimentally affected.  If you click the <strong>Find unused dependencies</strong> hyperlink, PDE will find unused and redundant entries in the list of required plug-ins and imported packages and offer to remove them. </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</body>
</html>
