<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Build path considerations</title>
</head>

<BODY BGCOLOR="#ffffff">

<h3>Build path considerations</h3>
<p>By default, the dependencies page will dynamically manage the build path of your plug-in
project. If you turn this feature off and if you add or remove a plug-in in your dependency list, you are
responsible for updating the build path so that the required entries are added.
If you do not, the Java compiler will not be able to resolve references to types
that belong to the required plug-ins.</p>
<p>If you turn the automatic feature off, there are two ways for PDE to assist you in calculating your build path. You can
explicitly request selecting <b>Compute
Build Path</b> in the popup menu on the Dependencies Page.&nbsp;You can
also use the &quot;<b>Plug-in Development-&gt;Java Build Path Control</b>&quot;
preferences page. If
you check the &quot;<b>When modifying dependencies in plug-in manifest editor</b>&quot;
button, your build path will be automatically updated each time you change
dependency information and save the editor.</p>
<p> PDE will recreate the build path from scratch in both of these cases.
That means that you will lose any entries you have added manually to the build
path.&nbsp; The build path is updated from scratch because PDE builds it
recursively.&nbsp; Here's why:</p>
<p>If a Java class is referenced by a plug-in at run time, its libraries
will be searched first for the class, then the libraries of its required plug-ins, then the
libraries of their required plug-ins, and so on. In order to recreate a similar
lookup environment during design time, PDE updates the build path recursively.
It's possible for several different plug-ins to depend on the same library. If you delete one of
these plug-ins from your dependency list, it is not safe to remove libraries all
the way up the chain because some of the plug-ins you still have on the list may
be needing them. The only way to always maintain a valid build path is to create it
from scratch.</p>
<p>It is not necessary to have the manifest editor open to update the build path
of a plug-in. You can also select the plug-in manifest file in the Navigator or
Package Explorer view, bring up the pop-up menu and select &quot;<b>Update
classpath...</b>&quot;. A wizard will open:</p>
<p align="center"><img border="0" src="images/classpath-update.jpg" width="438" height="539"></p>
<p align="left">The checkbox list will contain all the plug-ins and fragments in
the workspace. Initially, only the selected plug-in will be checked, but you can
change it. Pressing 'Finish' will re-compute class path for each selected
plug-in project.</p>
<p>In order to provide for better sharing of projects on authoring servers, PDE
adds all external libraries to the build path relative to the run-time platform location
represented by the Java build path variable <b>ECLIPSE_HOME</b>. This way, you can have
your code on the server and it will work regardless of the location of your
platform install. This variable is set and managed by PDE and you are not
supposed to modify its value.</p>

<p CLASS="BodyText"><a href="../hglegal2002.htm"><img border="0" src="../ngibmcpy2002.gif" width="324" height="14"></a></p>

</body>

</html>
