<project
  name="Publish Build"
  default="default">

  <!-- Properties that must be passed to this script:
    buildDirectory: Path to perform the build in. (A working directory)
    buildType: Type of build (nightly, integration etc.)
    buildId: Build name
    buildLabel: <buildType>-<buildName>-<timestamp>
  -->
  <property
    name="result"
    value="${buildDirectory}" />

  <!--name of generated index page -->
  <fail
    unless="indexFileName"
    message="indexFileName should have been defined by now." />

  <target name="default">
    <antcall target="getStaticFiles" />
    <antcall target="generateIndex" />
  </target>

  <target name="generateIndex">

    <property
      name="class"
      value="org.eclipse.releng.generators.TestResultsGenerator" />
    <taskdef
      name="indexResults"
      classname="${class}" />

    <!--
      isBuildTested: true|false should JUnit plugin test results be used to generate index page
      dropTokenList: comma separated list of strings which should be replaced by the fileName attribute settings in the testManifest.xml.
      xmlDirectoryName: path to directory containing JUnit plugin test results in xml format (see doc is org.eclipse.test).
      dropDirectoryName: path to directory containing the result of the build.
      testResultsHtmlFileName: name of file which will be generated with links to JUnit test results
      dropHtmlFileName: name of generated index page
      hrefTestResultsTargetPath: relative path from index page to parent directory containing JUnit html and xml test results
      for example,
      if html is in
      .../testResults/html/...
      and xml is in
      .../testResults/xml/...
      then hrefTestResultsTargetPath would be set to testResults
      if, that is, the "testResults.php" page is a peer of the 'testResults'
      directory. If testResults.php page is under testResults directory,
      then the value would be ".".
      hrefCompileLogsTargetPath: relative path from index page directory containing compilelogs
      testManifestFileName: name of xml file containing descriptions of zip types and log files

    -->

    <!-- xml results directory -->
    <condition
      property="xmlDirectoryName"
      value="${result}/baseline/xml">
      <contains
        string="${job}"
        substring="-baseline" />
    </condition>
    <condition
      property="xmlDirectoryName"
      value="${result}/performance/xml">
      <contains
        string="${job}"
        substring="-perf-" />
    </condition>
    <!-- else standard default for unit tests -->
    <property
      name="xmlDirectoryName"
      value="${result}/testresults/xml" />

    <condition
      property="indexFileName"
      value="baseline.php">
      <contains
        string="${job}"
        substring="-baseline" />
    </condition>
    <condition
      property="indexFileName"
      value="performance.php">
      <contains
        string="${job}"
        substring="-perf-" />
    </condition>
    <condition
      property="indexFileName"
      value="testResults.php">
      <contains
        string="${job}"
        substring="-unit-" />
    </condition>
    <!-- else standard default for download page -->
    <property
      name="indexFileName"
      value="index.php" />

    <!--
    <condition
      property="indexFileName"
      value="baseline.php">
      <contains
        string="${job}"
        substring="-baseline" />
    </condition>
    <condition
      property="indexFileName"
      value="performance.php">
      <contains
        string="${job}"
        substring="-perf-" />
    </condition>
    <condition
      property="indexFileName"
      value="testResults.php">
      <contains
        string="${job}"
        substring="-unit-" />
    </condition>
    <!- - else standard default for download page - ->
    <property
      name="indexFileName"
      value="index.php" />
    -->
    
    <condition
      property="manifestFile"
      value="${basedir}/performanceTestManifest.xml"
      else="${basedir}/testManifest.xml">
      <contains
        string="${job}"
        substring="-perf-" />
    </condition>

    <condition
      property="regenerate"
      value="true"
      else="false">
      <contains
        string="${job}"
        substring="-perf-" />
    </condition>
    
    <property
      name="dropDirectoryName"
      value="${postingDirectory}/${buildLabel}" />

    <!-- TODO: should require this, and others to be passed in, and fail, if not -->
    <property
      name="dropTemplateFileName"
      value="${basedir}/templateFiles/index.html.template" />

    <condition
      property="testResultsHtmlFileName"
      value="baseline.php">
      <contains
        string="${job}"
        substring="-baseline" />
    </condition>
    <condition
      property="testResultsHtmlFileName"
      value="performance/performance.php">
      <contains
        string="${job}"
        substring="-perf-" />
    </condition>
    <condition
      property="testResultsHtmlFileName"
      value="testResultsTables.html">
      <contains
        string="${job}"
        substring="-unit-" />
    </condition>
    <!-- "fake" file that should not hurt anything, but may be published, 
         when doing ONLY the download page? 
         TODO: should be a "<fail" or "undefined" here, but may depend on 
         custom ant task, so we'll take the safe approach first.
    -->
    <property
      name="testResultsHtmlFileName"
      value="noValidJobInPublishXML.html" />

    <condition
      property="hrefTestResultsTargetPath"
      value="baseline">
      <contains
        string="${job}"
        substring="-baseline" />
    </condition>
    <condition
      property="hrefTestResultsTargetPath"
      value="performance">
      <contains
        string="${job}"
        substring="-perf-" />
    </condition>
    <condition
      property="hrefTestResultsTargetPath"
      value="testresults">
      <contains
        string="${job}"
        substring="-unit-" />
    </condition>
    <!-- "fake" dir that should not hurt anything, but may be published, 
         when doing ONLY the download page? 
         TODO: should be a "<fail" or "undefined" here, but may depend on 
         custom ant task, so we'll take the safe approach first.
    -->
    <property
      name="hrefTestResultsTargetPath"
      value="nohrefTestResultsTargetPathDefined" />
    
    <!-- we should be able to do this now, and refine list in manifest. -->
    <property name="doMissingListValue" value="true" />
    <!--
      <property
      name="hrefTestResultsTargetPath"
      value="${result}" />
    -->
    <property
      name="hrefCompileLogsTargetPath"
      value="compilelogs/plugins/" />
    <property
      name="compileLogsDirectoryName"
      value="${dropDirectoryName}/compilelogs/plugins" />
    <property
      name="testManifestFileName"
      value="${manifestFile}" />
    
    <!-- test configs -->
    <condition
      property="testsConfigExpected"
      value="ep46${buildType}-perf-lin64_8.0">
      <contains
        string="${job}"
        substring="ep46${buildType}-perf-lin64" />
    </condition>
    <condition
      property="testsConfigExpected"
      value="ep46${buildType}-perf-lin64-baseline_8.0">
      <contains
        string="${job}"
        substring="ep46${buildType}-perf-lin64-baseline" />
    </condition>
    <condition
      property="testsConfigExpected"
      value="ep46${buildType}LR-perf-lin64_8.0">
      <contains
        string="${job}"
        substring="ep46${buildType}LR-perf-lin64" />
    </condition>
    <condition
      property="testsConfigExpected"
      value="ep46${buildType}LR-perf-lin64-baseline_8.0">
      <contains
        string="${job}"
        substring="ep46${buildType}LR-perf-lin64-baseline" />
    </condition>
    <!-- else normal unit tests configs -->
    <property
      name="testsConfigExpected"
      value="ep46${buildType}-unit-lin64_linux.gtk.x86_64_8.0,ep46${buildType}-unit-mac64_macosx.cocoa.x86_64_8.0,ep46${buildType}-unit-win32_win32.win32.x86_8.0,ep46${buildType}-unit-cen64_linux.gtk.x86_64_8.0" />

    <echo message=" = = properties in publish.xml == " />
    <echo message="     job: ${job}" />
    <echo message="     result: ${result}" />
    <echo message="     xmlDirectoryName: ${xmlDirectoryName}" />
    <echo message="     dropDirectoryName ${dropDirectoryName}" />
    <echo message="     dropTemplateFileName: ${dropTemplateFileName}" />
    <echo message="     testResultsHtmlFileName: ${testResultsHtmlFileName}" />
    <echo message="     hrefTestResultsTargetPath: ${hrefTestResultsTargetPath}" />
    <echo message="     hrefCompileLogsTargetPath: ${hrefCompileLogsTargetPath}" />
    <echo message="     compileLogsDirectoryName: ${compileLogsDirectoryName}" />
    <echo message="     testManifestFileName: ${testManifestFileName}" />
    <echo message="     testsConfigExpected: ${testsConfigExpected}" />
    <echo message="     isBuildTested: ${isBuildTested}" />
    <echo message="     buildType:  ${buildType}" />
    <echo message="     doMissingListValue:  ${doMissingListValue}" />
    <echo message="     testsConfigExpected: ${testsConfigExpected}" />
    <indexResults
      isBuildTested="${isBuildTested}"
      regenerate="${regenerate}"
      buildType="${buildType}"
      dropTokenList="${dropTokenList}"
      dropHtmlFileName="${indexFileName}"
      xmlDirectoryName="${xmlDirectoryName}"
      dropDirectoryName="${dropDirectoryName}"
      dropTemplateFileName="${dropTemplateFileName}"
      testResultsHtmlFileName="${testResultsHtmlFileName}"
      hrefTestResultsTargetPath="${hrefTestResultsTargetPath}"
      hrefCompileLogsTargetPath="${hrefCompileLogsTargetPath}"
      compileLogsDirectoryName="${compileLogsDirectoryName}"
      testManifestFileName="${testManifestFileName}"
      testsConfigExpected="${testsConfigExpected}"
      doMissingList="${doMissingListValue}" />

  </target>


  <target name="getStaticFiles">
    <!--get static files required in the buildLabel directory -->
    <copy todir="${result}">
      <fileset dir="staticDropFiles" />
    </copy>
  </target>
</project>
